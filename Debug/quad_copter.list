
quad_copter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800bcd0  0800bcd0  0001bcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2e0  0800c2e0  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2e0  0800c2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2e8  0800c2e8  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2e8  0800c2e8  0001c2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2ec  0800c2ec  0001c2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800c2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002029c  2**0
                  CONTENTS
 10 .bss          00001348  2000029c  2000029c  0002029c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015e4  200015e4  0002029c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116a1  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300f  00000000  00000000  0003196d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00034980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00035b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f9f  00000000  00000000  00036b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015147  00000000  00000000  0005aa9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd08b  00000000  00000000  0006fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cc71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b14  00000000  00000000  0013ccc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000029c 	.word	0x2000029c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcb4 	.word	0x0800bcb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a0 	.word	0x200002a0
 80001cc:	0800bcb4 	.word	0x0800bcb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <process_control_receive>:
uint8_t control_rx_buf[100];
int16_t control[20] = {0, };
uint16_t control_crc = 0;
uint8_t shutdown = 0;

void process_control_receive (uint8_t data) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if (control_payload_cnt == 0 && data == 0x20) {
 8000f56:	4b81      	ldr	r3, [pc, #516]	; (800115c <process_control_receive+0x210>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <process_control_receive+0x2e>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b20      	cmp	r3, #32
 8000f62:	d10a      	bne.n	8000f7a <process_control_receive+0x2e>
    control_rx_buf[control_payload_cnt] = data;
 8000f64:	4b7d      	ldr	r3, [pc, #500]	; (800115c <process_control_receive+0x210>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	497d      	ldr	r1, [pc, #500]	; (8001160 <process_control_receive+0x214>)
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	54ca      	strb	r2, [r1, r3]
    control_payload_cnt++;
 8000f6e:	4b7b      	ldr	r3, [pc, #492]	; (800115c <process_control_receive+0x210>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a79      	ldr	r2, [pc, #484]	; (800115c <process_control_receive+0x210>)
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e0e9      	b.n	800114e <process_control_receive+0x202>
  } else if (control_payload_cnt == 1 && data == 0x40) {
 8000f7a:	4b78      	ldr	r3, [pc, #480]	; (800115c <process_control_receive+0x210>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10d      	bne.n	8000f9e <process_control_receive+0x52>
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b40      	cmp	r3, #64	; 0x40
 8000f86:	d10a      	bne.n	8000f9e <process_control_receive+0x52>
    control_rx_buf[control_payload_cnt] = data;
 8000f88:	4b74      	ldr	r3, [pc, #464]	; (800115c <process_control_receive+0x210>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4974      	ldr	r1, [pc, #464]	; (8001160 <process_control_receive+0x214>)
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	54ca      	strb	r2, [r1, r3]
    control_payload_cnt++;
 8000f92:	4b72      	ldr	r3, [pc, #456]	; (800115c <process_control_receive+0x210>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a70      	ldr	r2, [pc, #448]	; (800115c <process_control_receive+0x210>)
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e0d7      	b.n	800114e <process_control_receive+0x202>
  } else if (control_payload_cnt >= 2 && control_payload_cnt < 2 + 2 * MAX_CHANNEL_NUM) {
 8000f9e:	4b6f      	ldr	r3, [pc, #444]	; (800115c <process_control_receive+0x210>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	dd0e      	ble.n	8000fc4 <process_control_receive+0x78>
 8000fa6:	4b6d      	ldr	r3, [pc, #436]	; (800115c <process_control_receive+0x210>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b1d      	cmp	r3, #29
 8000fac:	dc0a      	bgt.n	8000fc4 <process_control_receive+0x78>
    control_rx_buf[control_payload_cnt] = data;
 8000fae:	4b6b      	ldr	r3, [pc, #428]	; (800115c <process_control_receive+0x210>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	496b      	ldr	r1, [pc, #428]	; (8001160 <process_control_receive+0x214>)
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	54ca      	strb	r2, [r1, r3]
    control_payload_cnt++;
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <process_control_receive+0x210>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a67      	ldr	r2, [pc, #412]	; (800115c <process_control_receive+0x210>)
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e0c4      	b.n	800114e <process_control_receive+0x202>
  } else if (control_payload_cnt == 2 + 2 * MAX_CHANNEL_NUM) {
 8000fc4:	4b65      	ldr	r3, [pc, #404]	; (800115c <process_control_receive+0x210>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b1e      	cmp	r3, #30
 8000fca:	d114      	bne.n	8000ff6 <process_control_receive+0xaa>
    control_crc &= 0xff00;
 8000fcc:	4b65      	ldr	r3, [pc, #404]	; (8001164 <process_control_receive+0x218>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b63      	ldr	r3, [pc, #396]	; (8001164 <process_control_receive+0x218>)
 8000fd8:	801a      	strh	r2, [r3, #0]
    control_crc |= data;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b61      	ldr	r3, [pc, #388]	; (8001164 <process_control_receive+0x218>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <process_control_receive+0x218>)
 8000fe8:	801a      	strh	r2, [r3, #0]
    control_payload_cnt++;
 8000fea:	4b5c      	ldr	r3, [pc, #368]	; (800115c <process_control_receive+0x210>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a5a      	ldr	r2, [pc, #360]	; (800115c <process_control_receive+0x210>)
 8000ff2:	6013      	str	r3, [r2, #0]
    }
    control_payload_cnt = 0;
  } else {
    control_payload_cnt = 0;
  }
}
 8000ff4:	e0ab      	b.n	800114e <process_control_receive+0x202>
  } else if (control_payload_cnt == 2 + 2 * MAX_CHANNEL_NUM + 1) {
 8000ff6:	4b59      	ldr	r3, [pc, #356]	; (800115c <process_control_receive+0x210>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b1f      	cmp	r3, #31
 8000ffc:	f040 80a3 	bne.w	8001146 <process_control_receive+0x1fa>
    control_crc &= 0x00ff;
 8001000:	4b58      	ldr	r3, [pc, #352]	; (8001164 <process_control_receive+0x218>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b56      	ldr	r3, [pc, #344]	; (8001164 <process_control_receive+0x218>)
 800100a:	801a      	strh	r2, [r3, #0]
    control_crc |= (uint16_t)data << 8;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <process_control_receive+0x218>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <process_control_receive+0x218>)
 8001020:	801a      	strh	r2, [r3, #0]
    uint16_t check_sum = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	83fb      	strh	r3, [r7, #30]
    for (int i = 0; i < (MAX_CHANNEL_NUM + 1) * 2; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	e00a      	b.n	8001042 <process_control_receive+0xf6>
      check_sum += control_rx_buf[i];
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <process_control_receive+0x214>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b29a      	uxth	r2, r3
 8001036:	8bfb      	ldrh	r3, [r7, #30]
 8001038:	4413      	add	r3, r2
 800103a:	83fb      	strh	r3, [r7, #30]
    for (int i = 0; i < (MAX_CHANNEL_NUM + 1) * 2; i++) {
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	3301      	adds	r3, #1
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b1d      	cmp	r3, #29
 8001046:	ddf1      	ble.n	800102c <process_control_receive+0xe0>
    if (0xffff - check_sum == control_crc) {
 8001048:	8bfb      	ldrh	r3, [r7, #30]
 800104a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800104e:	33ff      	adds	r3, #255	; 0xff
 8001050:	4a44      	ldr	r2, [pc, #272]	; (8001164 <process_control_receive+0x218>)
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	4293      	cmp	r3, r2
 8001056:	d172      	bne.n	800113e <process_control_receive+0x1f2>
      for (int i = 0, j = 2; i < MAX_CHANNEL_NUM; i++, j += 2) {
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	e011      	b.n	8001086 <process_control_receive+0x13a>
        control[i] = *(uint16_t *)(control_rx_buf + j) & 0xfff;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4a3e      	ldr	r2, [pc, #248]	; (8001160 <process_control_receive+0x214>)
 8001066:	4413      	add	r3, r2
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b21b      	sxth	r3, r3
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	b219      	sxth	r1, r3
 8001072:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <process_control_receive+0x21c>)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (int i = 0, j = 2; i < MAX_CHANNEL_NUM; i++, j += 2) {
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	3302      	adds	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b0d      	cmp	r3, #13
 800108a:	ddea      	ble.n	8001062 <process_control_receive+0x116>
      control[0] -= 1500;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <process_control_receive+0x21c>)
 800108e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001092:	b29b      	uxth	r3, r3
 8001094:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001098:	b29b      	uxth	r3, r3
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <process_control_receive+0x21c>)
 800109e:	801a      	strh	r2, [r3, #0]
      control[1] -= 1500;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <process_control_receive+0x21c>)
 80010a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <process_control_receive+0x21c>)
 80010b2:	805a      	strh	r2, [r3, #2]
      control[2] -= 1000;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <process_control_receive+0x21c>)
 80010b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <process_control_receive+0x21c>)
 80010c6:	809a      	strh	r2, [r3, #4]
      control[2] = MAX(control[2], 0);
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <process_control_receive+0x21c>)
 80010ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <process_control_receive+0x21c>)
 80010d6:	809a      	strh	r2, [r3, #4]
      control[3] -= 1500;
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <process_control_receive+0x21c>)
 80010da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <process_control_receive+0x21c>)
 80010ea:	80da      	strh	r2, [r3, #6]
      control[3] = -control[3];
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <process_control_receive+0x21c>)
 80010ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	425b      	negs	r3, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <process_control_receive+0x21c>)
 80010fc:	80da      	strh	r2, [r3, #6]
      for (int i = 0; i < 4; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e010      	b.n	8001126 <process_control_receive+0x1da>
        command[i] = control[i];
 8001104:	4a18      	ldr	r2, [pc, #96]	; (8001168 <process_control_receive+0x21c>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <process_control_receive+0x220>)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 4; i++) {
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b03      	cmp	r3, #3
 800112a:	ddeb      	ble.n	8001104 <process_control_receive+0x1b8>
      if (control[4] == 2000) {
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <process_control_receive+0x21c>)
 800112e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001132:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001136:	d102      	bne.n	800113e <process_control_receive+0x1f2>
        shutdown = 1;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <process_control_receive+0x224>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    control_payload_cnt = 0;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <process_control_receive+0x210>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	e003      	b.n	800114e <process_control_receive+0x202>
    control_payload_cnt = 0;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <process_control_receive+0x210>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	e7ff      	b.n	800114e <process_control_receive+0x202>
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200002c8 	.word	0x200002c8
 8001160:	200002cc 	.word	0x200002cc
 8001164:	20000358 	.word	0x20000358
 8001168:	20000330 	.word	0x20000330
 800116c:	200002b8 	.word	0x200002b8
 8001170:	2000035a 	.word	0x2000035a

08001174 <process_debug_values_tx>:
#include "uart_utils.h"
#include "timer.h"
#include "esc.h"
#include "sensor.h"

void process_debug_values_tx () {
 8001174:	b580      	push	{r7, lr}
 8001176:	b09c      	sub	sp, #112	; 0x70
 8001178:	af00      	add	r7, sp, #0
  uint8_t buf[100];
  buf[0] = 0x80;
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	713b      	strb	r3, [r7, #4]
  buf[1] = 0x81;
 800117e:	2381      	movs	r3, #129	; 0x81
 8001180:	717b      	strb	r3, [r7, #5]

  fill_debug_values(buf, PHI_IDX, convert_float_to_uint16(phi, 2000));
 8001182:	4ba4      	ldr	r3, [pc, #656]	; (8001414 <process_debug_values_tx+0x2a0>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8001418 <process_debug_values_tx+0x2a4>
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	f000 f95c 	bl	800144c <convert_float_to_uint16>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f985 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, THETA_IDX, convert_float_to_uint16(theta, 2000));
 80011a2:	4b9e      	ldr	r3, [pc, #632]	; (800141c <process_debug_values_tx+0x2a8>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001418 <process_debug_values_tx+0x2a4>
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	f000 f94c 	bl	800144c <convert_float_to_uint16>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2101      	movs	r1, #1
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f975 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, PHI_DOT_IDX, convert_float_to_uint16(phi_dot, 2000));
 80011c2:	4b97      	ldr	r3, [pc, #604]	; (8001420 <process_debug_values_tx+0x2ac>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eddf 0a93 	vldr	s1, [pc, #588]	; 8001418 <process_debug_values_tx+0x2a4>
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	f000 f93c 	bl	800144c <convert_float_to_uint16>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2102      	movs	r1, #2
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f965 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, THETA_DOT_IDX, convert_float_to_uint16(theta_dot, 2000));
 80011e2:	4b90      	ldr	r3, [pc, #576]	; (8001424 <process_debug_values_tx+0x2b0>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8001418 <process_debug_values_tx+0x2a4>
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f000 f92c 	bl	800144c <convert_float_to_uint16>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2103      	movs	r1, #3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f955 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, PSI_DOT_IDX, convert_float_to_uint16(psi_dot, 2000));
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <process_debug_values_tx+0x2b4>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eddf 0a83 	vldr	s1, [pc, #524]	; 8001418 <process_debug_values_tx+0x2a4>
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	f000 f91c 	bl	800144c <convert_float_to_uint16>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2104      	movs	r1, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f945 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ESC_1_IDX, convert_float_to_uint16(base_throttle + esc_vector[0], 1));
 8001222:	4b82      	ldr	r3, [pc, #520]	; (800142c <process_debug_values_tx+0x2b8>)
 8001224:	ed93 7a00 	vldr	s14, [r3]
 8001228:	4b81      	ldr	r3, [pc, #516]	; (8001430 <process_debug_values_tx+0x2bc>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001232:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001236:	eeb0 0a67 	vmov.f32	s0, s15
 800123a:	f000 f907 	bl	800144c <convert_float_to_uint16>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2105      	movs	r1, #5
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f930 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ESC_2_IDX, convert_float_to_uint16(base_throttle + esc_vector[1], 1));
 800124c:	4b77      	ldr	r3, [pc, #476]	; (800142c <process_debug_values_tx+0x2b8>)
 800124e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001252:	4b77      	ldr	r3, [pc, #476]	; (8001430 <process_debug_values_tx+0x2bc>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	f000 f8f2 	bl	800144c <convert_float_to_uint16>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2106      	movs	r1, #6
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f91b 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ESC_3_IDX, convert_float_to_uint16(base_throttle + esc_vector[2], 1));
 8001276:	4b6d      	ldr	r3, [pc, #436]	; (800142c <process_debug_values_tx+0x2b8>)
 8001278:	ed93 7a02 	vldr	s14, [r3, #8]
 800127c:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <process_debug_values_tx+0x2bc>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f000 f8dd 	bl	800144c <convert_float_to_uint16>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2107      	movs	r1, #7
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f906 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ESC_4_IDX, convert_float_to_uint16(base_throttle + esc_vector[3], 1));
 80012a0:	4b62      	ldr	r3, [pc, #392]	; (800142c <process_debug_values_tx+0x2b8>)
 80012a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80012a6:	4b62      	ldr	r3, [pc, #392]	; (8001430 <process_debug_values_tx+0x2bc>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	f000 f8c8 	bl	800144c <convert_float_to_uint16>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2108      	movs	r1, #8
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f8f1 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, GYRO_X_IDX, convert_float_to_uint16(raw_gyro_x_sensor, 1));
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <process_debug_values_tx+0x2c0>)
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	f000 f8b4 	bl	800144c <convert_float_to_uint16>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2109      	movs	r1, #9
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f8dd 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, GYRO_Y_IDX, convert_float_to_uint16(raw_gyro_y_sensor, 1));
 80012f2:	4b51      	ldr	r3, [pc, #324]	; (8001438 <process_debug_values_tx+0x2c4>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	f000 f8a0 	bl	800144c <convert_float_to_uint16>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	210a      	movs	r1, #10
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f8c9 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, GYRO_Z_IDX, convert_float_to_uint16(raw_gyro_z_sensor, 1));
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <process_debug_values_tx+0x2c8>)
 800131c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001328:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f000 f88c 	bl	800144c <convert_float_to_uint16>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	210b      	movs	r1, #11
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f8b5 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ACC_X_IDX, convert_float_to_uint16(raw_acc_x_sensor, 1));
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <process_debug_values_tx+0x2cc>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001350:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	f000 f878 	bl	800144c <convert_float_to_uint16>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	210c      	movs	r1, #12
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f8a1 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ACC_Y_IDX, convert_float_to_uint16(raw_acc_y_sensor, 1));
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <process_debug_values_tx+0x2d0>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	f000 f864 	bl	800144c <convert_float_to_uint16>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	210d      	movs	r1, #13
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f88d 	bl	80014ac <fill_debug_values>
  fill_debug_values(buf, ACC_Z_IDX, convert_float_to_uint16(raw_acc_z_sensor, 1));
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <process_debug_values_tx+0x2d4>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	f000 f850 	bl	800144c <convert_float_to_uint16>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	210e      	movs	r1, #14
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f879 	bl	80014ac <fill_debug_values>
  uint16_t crc = 0xffff;
 80013ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  for (int i = 0; i < 2 + NUM_OF_DEBUG_VALUES * 2; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80013c6:	e00c      	b.n	80013e2 <process_debug_values_tx+0x26e>
    crc -= buf[i];
 80013c8:	1d3a      	adds	r2, r7, #4
 80013ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  for (int i = 0; i < 2 + NUM_OF_DEBUG_VALUES * 2; i++) {
 80013dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013de:	3301      	adds	r3, #1
 80013e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80013e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	ddef      	ble.n	80013c8 <process_debug_values_tx+0x254>
  }
  buf[2 + NUM_OF_DEBUG_VALUES * 2] = crc & 0x00ff;
 80013e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  buf[2 + NUM_OF_DEBUG_VALUES * 2 + 1] = (uint8_t)((crc >> 8) & 0x00ff);
 80013f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uart_transmit_it(1, buf, 2 + NUM_OF_DEBUG_VALUES * 2 + 2);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2222      	movs	r2, #34	; 0x22
 8001404:	4619      	mov	r1, r3
 8001406:	2001      	movs	r0, #1
 8001408:	f002 fdc6 	bl	8003f98 <uart_transmit_it>
}
 800140c:	bf00      	nop
 800140e:	3770      	adds	r7, #112	; 0x70
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000360 	.word	0x20000360
 8001418:	44fa0000 	.word	0x44fa0000
 800141c:	2000036c 	.word	0x2000036c
 8001420:	20000364 	.word	0x20000364
 8001424:	20000370 	.word	0x20000370
 8001428:	20000378 	.word	0x20000378
 800142c:	20000380 	.word	0x20000380
 8001430:	2000009c 	.word	0x2000009c
 8001434:	200005f8 	.word	0x200005f8
 8001438:	200005fa 	.word	0x200005fa
 800143c:	200005fc 	.word	0x200005fc
 8001440:	200005f2 	.word	0x200005f2
 8001444:	200005f4 	.word	0x200005f4
 8001448:	200005f6 	.word	0x200005f6

0800144c <convert_float_to_uint16>:

uint16_t convert_float_to_uint16 (float value, float scale) {
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	ed87 0a01 	vstr	s0, [r7, #4]
 8001456:	edc7 0a00 	vstr	s1, [r7]
  int ret = (int)(value * scale);
 800145a:	ed97 7a01 	vldr	s14, [r7, #4]
 800145e:	edd7 7a00 	vldr	s15, [r7]
 8001462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	ee17 3a90 	vmov	r3, s15
 800146e:	60fb      	str	r3, [r7, #12]
  ret = MIN(MAX(ret, -15000), 15000);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001476:	4293      	cmp	r3, r2
 8001478:	dc05      	bgt.n	8001486 <convert_float_to_uint16+0x3a>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <convert_float_to_uint16+0x5c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	bfb8      	it	lt
 8001482:	4613      	movlt	r3, r2
 8001484:	e001      	b.n	800148a <convert_float_to_uint16+0x3e>
 8001486:	f643 2398 	movw	r3, #15000	; 0x3a98
 800148a:	60fb      	str	r3, [r7, #12]
  ret += 15000;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001492:	3318      	adds	r3, #24
 8001494:	60fb      	str	r3, [r7, #12]
  return (uint16_t)ret;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b29b      	uxth	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffc568 	.word	0xffffc568

080014ac <fill_debug_values>:

void fill_debug_values (uint8_t *buf, int idx, uint16_t value) {
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  buf[2 + idx * 2] = (value & 0x00ff);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3301      	adds	r3, #1
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	461a      	mov	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
  buf[2 + idx * 2 + 1] = (value >> 8) & 0x00ff;
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b299      	uxth	r1, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	3303      	adds	r3, #3
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <mul_mat_vec_3d>:
#include "math.h"
#include "control_receive.h"

float g = 9.80665;

void mul_mat_vec_3d (float mat[3][3], float vec[3], float rst[3]) {
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 3; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e009      	b.n	8001512 <mul_mat_vec_3d+0x26>
    rst[i] = 0;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b02      	cmp	r3, #2
 8001516:	ddf2      	ble.n	80014fe <mul_mat_vec_3d+0x12>
  }
  for (int i = 0; i < 3; i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e02e      	b.n	800157c <mul_mat_vec_3d+0x90>
    for (int j = 0; j < 3; j++) {
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e025      	b.n	8001570 <mul_mat_vec_3d+0x84>
      rst[i] += mat[i][j] * vec[j];
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	441a      	add	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	edd3 6a00 	vldr	s13, [r3]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 3; j++) {
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b02      	cmp	r3, #2
 8001574:	ddd6      	ble.n	8001524 <mul_mat_vec_3d+0x38>
  for (int i = 0; i < 3; i++) {
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3301      	adds	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	ddcd      	ble.n	800151e <mul_mat_vec_3d+0x32>
    }
  }
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	3724      	adds	r7, #36	; 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <mul_mat_vec_4d>:

void mul_mat_vec_4d (float mat[4][4], float vec[4], float rst[4]) {
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 4; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e009      	b.n	80015b6 <mul_mat_vec_4d+0x26>
    rst[i] = 0;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	ddf2      	ble.n	80015a2 <mul_mat_vec_4d+0x12>
  }
  for (int i = 0; i < 4; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	e02a      	b.n	8001618 <mul_mat_vec_4d+0x88>
    for (int j = 0; j < 4; j++) {
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e021      	b.n	800160c <mul_mat_vec_4d+0x7c>
      rst[i] += mat[i][j] * vec[j];
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	ed93 7a00 	vldr	s14, [r3]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	441a      	add	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	edd3 6a00 	vldr	s13, [r3]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001602:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 4; j++) {
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b03      	cmp	r3, #3
 8001610:	ddda      	ble.n	80015c8 <mul_mat_vec_4d+0x38>
  for (int i = 0; i < 4; i++) {
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	3301      	adds	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b03      	cmp	r3, #3
 800161c:	ddd1      	ble.n	80015c2 <mul_mat_vec_4d+0x32>
    }
  }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <get_C>:
  R_inv[2][0] = sin(eta[0]) * sin(eta[2]) + sin(eta[1]) * cos(eta[0]) * cos(eta[2]);
  R_inv[2][1] = -sin(eta[0]) * cos(eta[2]) + sin(eta[2]) * sin(eta[1]) * cos(eta[0]);
  R_inv[2][2] = cos(eta[0]) * cos(eta[1]);
}

void get_C (float phi, float theta, float C[3][3]) {
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	ed87 0a03 	vstr	s0, [r7, #12]
 8001636:	edc7 0a02 	vstr	s1, [r7, #8]
 800163a:	6078      	str	r0, [r7, #4]
  C[0][0] = 1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001642:	601a      	str	r2, [r3, #0]
  C[0][1] = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  C[0][2] = -sin(theta);
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f7fe ff7b 	bl	8000548 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	ec43 2b10 	vmov	d0, r2, r3
 800165a:	f008 ffc9 	bl	800a5f0 <sin>
 800165e:	ec53 2b10 	vmov	r2, r3, d0
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa9f 	bl	8000ba8 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef1 7a67 	vneg.f32	s15, s15
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edc3 7a02 	vstr	s15, [r3, #8]
  C[1][0] = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	330c      	adds	r3, #12
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
  C[1][1] = cos(phi);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7fe ff5f 	bl	8000548 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b10 	vmov	d0, r2, r3
 8001692:	f008 ff4d 	bl	800a530 <cos>
 8001696:	ec51 0b10 	vmov	r0, r1, d0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f103 040c 	add.w	r4, r3, #12
 80016a0:	f7ff fa82 	bl	8000ba8 <__aeabi_d2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	6063      	str	r3, [r4, #4]
  C[1][2] = sin(phi) * cos(theta);
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7fe ff4d 	bl	8000548 <__aeabi_f2d>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	ec43 2b10 	vmov	d0, r2, r3
 80016b6:	f008 ff9b 	bl	800a5f0 <sin>
 80016ba:	ec55 4b10 	vmov	r4, r5, d0
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe ff42 	bl	8000548 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	ec43 2b10 	vmov	d0, r2, r3
 80016cc:	f008 ff30 	bl	800a530 <cos>
 80016d0:	ec53 2b10 	vmov	r2, r3, d0
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ff8e 	bl	80005f8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f103 040c 	add.w	r4, r3, #12
 80016ea:	f7ff fa5d 	bl	8000ba8 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	60a3      	str	r3, [r4, #8]
  C[2][0] = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3318      	adds	r3, #24
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
  C[2][1] = -sin(phi);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7fe ff23 	bl	8000548 <__aeabi_f2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ec43 2b10 	vmov	d0, r2, r3
 800170a:	f008 ff71 	bl	800a5f0 <sin>
 800170e:	ec53 2b10 	vmov	r2, r3, d0
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff fa47 	bl	8000ba8 <__aeabi_d2f>
 800171a:	4602      	mov	r2, r0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3318      	adds	r3, #24
 8001720:	ee07 2a90 	vmov	s15, r2
 8001724:	eef1 7a67 	vneg.f32	s15, s15
 8001728:	edc3 7a01 	vstr	s15, [r3, #4]
  C[2][2] = cos(phi) * cos(theta);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7fe ff0b 	bl	8000548 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ec43 2b10 	vmov	d0, r2, r3
 800173a:	f008 fef9 	bl	800a530 <cos>
 800173e:	ec55 4b10 	vmov	r4, r5, d0
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	ec43 2b10 	vmov	d0, r2, r3
 8001750:	f008 feee 	bl	800a530 <cos>
 8001754:	ec53 2b10 	vmov	r2, r3, d0
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe ff4c 	bl	80005f8 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f103 0418 	add.w	r4, r3, #24
 800176e:	f7ff fa1b 	bl	8000ba8 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	60a3      	str	r3, [r4, #8]
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}

0800177e <get_C_inv>:

void get_C_inv (float phi, float theta, float C_inv[3][3]) {
 800177e:	b5b0      	push	{r4, r5, r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	ed87 0a03 	vstr	s0, [r7, #12]
 8001788:	edc7 0a02 	vstr	s1, [r7, #8]
 800178c:	6078      	str	r0, [r7, #4]
  C_inv[0][0] = 1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001794:	601a      	str	r2, [r3, #0]
  C_inv[0][1] = sin(phi) * tan(theta);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b10 	vmov	d0, r2, r3
 80017a4:	f008 ff24 	bl	800a5f0 <sin>
 80017a8:	ec55 4b10 	vmov	r4, r5, d0
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	ec43 2b10 	vmov	d0, r2, r3
 80017ba:	f008 ff71 	bl	800a6a0 <tan>
 80017be:	ec53 2b10 	vmov	r2, r3, d0
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe ff17 	bl	80005f8 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f9e9 	bl	8000ba8 <__aeabi_d2f>
 80017d6:	4602      	mov	r2, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	605a      	str	r2, [r3, #4]
  C_inv[0][2] = cos(phi) * tan(theta);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7fe feb3 	bl	8000548 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	ec43 2b10 	vmov	d0, r2, r3
 80017ea:	f008 fea1 	bl	800a530 <cos>
 80017ee:	ec55 4b10 	vmov	r4, r5, d0
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	f7fe fea8 	bl	8000548 <__aeabi_f2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	ec43 2b10 	vmov	d0, r2, r3
 8001800:	f008 ff4e 	bl	800a6a0 <tan>
 8001804:	ec53 2b10 	vmov	r2, r3, d0
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]
  C_inv[1][0] = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
  C_inv[1][1] = cos(phi);
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7fe fe8b 	bl	8000548 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b10 	vmov	d0, r2, r3
 800183a:	f008 fe79 	bl	800a530 <cos>
 800183e:	ec51 0b10 	vmov	r0, r1, d0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f103 040c 	add.w	r4, r3, #12
 8001848:	f7ff f9ae 	bl	8000ba8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
  C_inv[1][2] = -sin(phi);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7fe fe79 	bl	8000548 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ec43 2b10 	vmov	d0, r2, r3
 800185e:	f008 fec7 	bl	800a5f0 <sin>
 8001862:	ec53 2b10 	vmov	r2, r3, d0
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f99d 	bl	8000ba8 <__aeabi_d2f>
 800186e:	4602      	mov	r2, r0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	330c      	adds	r3, #12
 8001874:	ee07 2a90 	vmov	s15, r2
 8001878:	eef1 7a67 	vneg.f32	s15, s15
 800187c:	edc3 7a02 	vstr	s15, [r3, #8]
  C_inv[2][0] = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3318      	adds	r3, #24
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
  C_inv[2][1] = sin(phi) / cos(theta);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7fe fe5c 	bl	8000548 <__aeabi_f2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	ec43 2b10 	vmov	d0, r2, r3
 8001898:	f008 feaa 	bl	800a5f0 <sin>
 800189c:	ec55 4b10 	vmov	r4, r5, d0
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b10 	vmov	d0, r2, r3
 80018ae:	f008 fe3f 	bl	800a530 <cos>
 80018b2:	ec53 2b10 	vmov	r2, r3, d0
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f103 0418 	add.w	r4, r3, #24
 80018cc:	f7ff f96c 	bl	8000ba8 <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	6063      	str	r3, [r4, #4]
  C_inv[2][2] = cos(phi) / cos(theta);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7fe fe37 	bl	8000548 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ec43 2b10 	vmov	d0, r2, r3
 80018e2:	f008 fe25 	bl	800a530 <cos>
 80018e6:	ec55 4b10 	vmov	r4, r5, d0
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ec43 2b10 	vmov	d0, r2, r3
 80018f8:	f008 fe1a 	bl	800a530 <cos>
 80018fc:	ec53 2b10 	vmov	r2, r3, d0
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe ffa2 	bl	800084c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f103 0418 	add.w	r4, r3, #24
 8001916:	f7ff f947 	bl	8000ba8 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	60a3      	str	r3, [r4, #8]
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}

08001926 <get_error>:
  C_dot[2][0] = 0;
  C_dot[2][1] = -eta_dot[0] * cos(phi);
  C_dot[2][2] = -eta_dot[0] * sin(phi) * cos(theta) - eta_dot[1] * sin(theta) * cos(phi);
}

float get_error (float ref, float cur_val) {
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001930:	edc7 0a00 	vstr	s1, [r7]
  return ref - cur_val;
 8001934:	ed97 7a01 	vldr	s14, [r7, #4]
 8001938:	edd7 7a00 	vldr	s15, [r7]
 800193c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <get_dot_ref_by_pd>:

float get_dot_ref_by_pd (float error, float P, float dot_val, float D) {
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	ed87 0a03 	vstr	s0, [r7, #12]
 8001958:	edc7 0a02 	vstr	s1, [r7, #8]
 800195c:	ed87 1a01 	vstr	s2, [r7, #4]
 8001960:	edc7 1a00 	vstr	s3, [r7]
  return error * P - dot_val * D;
 8001964:	ed97 7a03 	vldr	s14, [r7, #12]
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	edd7 6a01 	vldr	s13, [r7, #4]
 8001974:	edd7 7a00 	vldr	s15, [r7]
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001980:	eeb0 0a67 	vmov.f32	s0, s15
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <get_eta_dot_dot_ref>:

void get_eta_dot_dot_ref (float phi_dot_dot_ref, float theta_dot_dot_ref, float psi_dot_dot_ref, float eta_dot_dot_ref[3]) {
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	ed87 0a03 	vstr	s0, [r7, #12]
 8001998:	edc7 0a02 	vstr	s1, [r7, #8]
 800199c:	ed87 1a01 	vstr	s2, [r7, #4]
 80019a0:	6038      	str	r0, [r7, #0]
  eta_dot_dot_ref[0] = phi_dot_dot_ref;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	601a      	str	r2, [r3, #0]
  eta_dot_dot_ref[1] = theta_dot_dot_ref;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3304      	adds	r3, #4
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	601a      	str	r2, [r3, #0]
  eta_dot_dot_ref[2] = psi_dot_dot_ref;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3308      	adds	r3, #8
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <get_force_vector>:

float get_z_dot_dot_ref (float z_dot_signal_error, float P) {
  return z_dot_signal_error * P;
}

void get_force_vector (float eta_dot_dot_ref[3], float T_inv[4][4], float I[3][3], float C[3][3], float rst[4]) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
  float a[3];

  mul_mat_vec_3d(C, eta_dot_dot_ref, a);
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	461a      	mov	r2, r3
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	6838      	ldr	r0, [r7, #0]
 80019dc:	f7ff fd86 	bl	80014ec <mul_mat_vec_3d>
  float b[4] = {a[0], a[1], a[2], command[2] * 4};
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <get_force_vector+0x50>)
 80019ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80019f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fa:	edc7 7a08 	vstr	s15, [r7, #32]
  mul_mat_vec_4d(T_inv, b, rst);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a04:	4619      	mov	r1, r3
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	f7ff fdc2 	bl	8001590 <mul_mat_vec_4d>
  /* for (int i = 0; i < 4; i++) {
    rst[i] += command[2] * 4;
  } */
}
 8001a0c:	bf00      	nop
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002b8 	.word	0x200002b8

08001a18 <get_esc_vector>:

void get_esc_vector (float force_vector[4], float rst[4]) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 4; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e01f      	b.n	8001a68 <get_esc_vector+0x50>
    if (force_vector[i] < 0) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d507      	bpl.n	8001a4e <get_esc_vector+0x36>
      rst[i] = 0;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e009      	b.n	8001a62 <get_esc_vector+0x4a>
    } else {
      rst[i] = force_vector[i];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	441a      	add	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	dddc      	ble.n	8001a28 <get_esc_vector+0x10>
    }
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <update_euler_state>:

float dt = 0.001;
float H = 0.004;
float K = 1;
float dot_dot_K = 1;
void update_euler_state () {
 8001a7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a80:	b09e      	sub	sp, #120	; 0x78
 8001a82:	af00      	add	r7, sp, #0
  float new_phi = 0;
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	677b      	str	r3, [r7, #116]	; 0x74
  float new_theta = 0;
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	673b      	str	r3, [r7, #112]	; 0x70
  float new_phi_dot = 0;
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	66fb      	str	r3, [r7, #108]	; 0x6c
  float new_theta_dot = 0;
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	66bb      	str	r3, [r7, #104]	; 0x68
  float new_psi_dot = 0;
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	667b      	str	r3, [r7, #100]	; 0x64

  float phi_low_pass = atan(acc_y_sensor / acc_z_sensor);
 8001aa2:	4bd7      	ldr	r3, [pc, #860]	; (8001e00 <update_euler_state+0x384>)
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4bd6      	ldr	r3, [pc, #856]	; (8001e04 <update_euler_state+0x388>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ab2:	ee16 0a90 	vmov	r0, s13
 8001ab6:	f7fe fd47 	bl	8000548 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b10 	vmov	d0, r2, r3
 8001ac2:	f008 fb95 	bl	800a1f0 <atan>
 8001ac6:	ec53 2b10 	vmov	r2, r3, d0
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f86b 	bl	8000ba8 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	663b      	str	r3, [r7, #96]	; 0x60
  float theta_low_pass = atan(-acc_x_sensor / sqrt(acc_y_sensor * acc_y_sensor + acc_z_sensor * acc_z_sensor));
 8001ad6:	4bcc      	ldr	r3, [pc, #816]	; (8001e08 <update_euler_state+0x38c>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eef1 7a67 	vneg.f32	s15, s15
 8001ae0:	ee17 3a90 	vmov	r3, s15
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd2f 	bl	8000548 <__aeabi_f2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	4bc4      	ldr	r3, [pc, #784]	; (8001e00 <update_euler_state+0x384>)
 8001af0:	ed93 7a00 	vldr	s14, [r3]
 8001af4:	4bc2      	ldr	r3, [pc, #776]	; (8001e00 <update_euler_state+0x384>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	4bc1      	ldr	r3, [pc, #772]	; (8001e04 <update_euler_state+0x388>)
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	4bbf      	ldr	r3, [pc, #764]	; (8001e04 <update_euler_state+0x388>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b12:	ee17 0a90 	vmov	r0, s15
 8001b16:	f7fe fd17 	bl	8000548 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ec43 2b10 	vmov	d0, r2, r3
 8001b22:	f008 fdf1 	bl	800a708 <sqrt>
 8001b26:	ec53 2b10 	vmov	r2, r3, d0
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fe8d 	bl	800084c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	ec43 2b17 	vmov	d7, r2, r3
 8001b3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b3e:	eef0 0a67 	vmov.f32	s1, s15
 8001b42:	f008 fb55 	bl	800a1f0 <atan>
 8001b46:	ec53 2b10 	vmov	r2, r3, d0
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f82b 	bl	8000ba8 <__aeabi_d2f>
 8001b52:	4603      	mov	r3, r0
 8001b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* float phi_low_pass = acc_y_sensor / acc_z_sensor;
  float theta_low_pass = -acc_x_sensor / acc_z_sensor; */

  float phi_high_pass = phi + dt * phi_dot;
 8001b56:	4bad      	ldr	r3, [pc, #692]	; (8001e0c <update_euler_state+0x390>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4bac      	ldr	r3, [pc, #688]	; (8001e10 <update_euler_state+0x394>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	4bab      	ldr	r3, [pc, #684]	; (8001e14 <update_euler_state+0x398>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b70:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  float theta_high_pass = theta + dt * theta_dot;
 8001b74:	4ba5      	ldr	r3, [pc, #660]	; (8001e0c <update_euler_state+0x390>)
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	4ba7      	ldr	r3, [pc, #668]	; (8001e18 <update_euler_state+0x39c>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	4ba5      	ldr	r3, [pc, #660]	; (8001e1c <update_euler_state+0x3a0>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

  new_phi = phi_low_pass * H + phi_high_pass * (1.0 - H);
 8001b92:	4ba3      	ldr	r3, [pc, #652]	; (8001e20 <update_euler_state+0x3a4>)
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	ee17 0a90 	vmov	r0, s15
 8001ba4:	f7fe fcd0 	bl	8000548 <__aeabi_f2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001bae:	f7fe fccb 	bl	8000548 <__aeabi_f2d>
 8001bb2:	4680      	mov	r8, r0
 8001bb4:	4689      	mov	r9, r1
 8001bb6:	4b9a      	ldr	r3, [pc, #616]	; (8001e20 <update_euler_state+0x3a4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcc4 	bl	8000548 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	4996      	ldr	r1, [pc, #600]	; (8001e24 <update_euler_state+0x3a8>)
 8001bca:	f7fe fb5d 	bl	8000288 <__aeabi_dsub>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	f7fe fd0f 	bl	80005f8 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fb53 	bl	800028c <__adddf3>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe ffdb 	bl	8000ba8 <__aeabi_d2f>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	677b      	str	r3, [r7, #116]	; 0x74
  new_theta = theta_low_pass * H + theta_high_pass * (1.0 - H);
 8001bf6:	4b8a      	ldr	r3, [pc, #552]	; (8001e20 <update_euler_state+0x3a4>)
 8001bf8:	ed93 7a00 	vldr	s14, [r3]
 8001bfc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	ee17 0a90 	vmov	r0, s15
 8001c08:	f7fe fc9e 	bl	8000548 <__aeabi_f2d>
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	460d      	mov	r5, r1
 8001c10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c12:	f7fe fc99 	bl	8000548 <__aeabi_f2d>
 8001c16:	4680      	mov	r8, r0
 8001c18:	4689      	mov	r9, r1
 8001c1a:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <update_euler_state+0x3a4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc92 	bl	8000548 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	497d      	ldr	r1, [pc, #500]	; (8001e24 <update_euler_state+0x3a8>)
 8001c2e:	f7fe fb2b 	bl	8000288 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4640      	mov	r0, r8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fcdd 	bl	80005f8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe fb21 	bl	800028c <__adddf3>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ffa9 	bl	8000ba8 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	673b      	str	r3, [r7, #112]	; 0x70

  float cur_C_inv[3][3];
  float cur_w[3] = {gyro_x_sensor, gyro_y_sensor, gyro_z_sensor};
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <update_euler_state+0x3ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <update_euler_state+0x3b0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <update_euler_state+0x3b4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
  get_C_inv(new_phi, new_theta, cur_C_inv);
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	edd7 0a1c 	vldr	s1, [r7, #112]	; 0x70
 8001c76:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8001c7a:	f7ff fd80 	bl	800177e <get_C_inv>
  float cur_eta_dot[3];
  mul_mat_vec_3d(cur_C_inv, cur_w, cur_eta_dot);
 8001c7e:	463a      	mov	r2, r7
 8001c80:	f107 010c 	add.w	r1, r7, #12
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc2f 	bl	80014ec <mul_mat_vec_3d>
  // float cur_eta_dot[3] = {gyro_x_sensor, gyro_y_sensor, gyro_z_sensor};

  new_phi_dot = phi_dot * (1.0 - K) + cur_eta_dot[0] * K;
 8001c8e:	4b60      	ldr	r3, [pc, #384]	; (8001e10 <update_euler_state+0x394>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc58 	bl	8000548 <__aeabi_f2d>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <update_euler_state+0x3b8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc51 	bl	8000548 <__aeabi_f2d>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	495d      	ldr	r1, [pc, #372]	; (8001e24 <update_euler_state+0x3a8>)
 8001cb0:	f7fe faea 	bl	8000288 <__aeabi_dsub>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fc9c 	bl	80005f8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	ed97 7a00 	vldr	s14, [r7]
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <update_euler_state+0x3b8>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	ee17 0a90 	vmov	r0, s15
 8001cda:	f7fe fc35 	bl	8000548 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fad1 	bl	800028c <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff59 	bl	8000ba8 <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  new_theta_dot = theta_dot * (1.0 - K) + cur_eta_dot[1] * K;
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <update_euler_state+0x39c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc22 	bl	8000548 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <update_euler_state+0x3b8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc1b 	bl	8000548 <__aeabi_f2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	f04f 0000 	mov.w	r0, #0
 8001d1a:	4942      	ldr	r1, [pc, #264]	; (8001e24 <update_euler_state+0x3a8>)
 8001d1c:	f7fe fab4 	bl	8000288 <__aeabi_dsub>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f7fe fc66 	bl	80005f8 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d38:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <update_euler_state+0x3b8>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	ee17 0a90 	vmov	r0, s15
 8001d46:	f7fe fbff 	bl	8000548 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fa9b 	bl	800028c <__adddf3>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe ff23 	bl	8000ba8 <__aeabi_d2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	66bb      	str	r3, [r7, #104]	; 0x68
  new_psi_dot = psi_dot * (1.0 - K) + cur_eta_dot[2] * K;
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <update_euler_state+0x3bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbec 	bl	8000548 <__aeabi_f2d>
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <update_euler_state+0x3b8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbe5 	bl	8000548 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <update_euler_state+0x3a8>)
 8001d88:	f7fe fa7e 	bl	8000288 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fc30 	bl	80005f8 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	461d      	mov	r5, r3
 8001da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <update_euler_state+0x3b8>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	ee17 0a90 	vmov	r0, s15
 8001db2:	f7fe fbc9 	bl	8000548 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe fa65 	bl	800028c <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe feed 	bl	8000ba8 <__aeabi_d2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	667b      	str	r3, [r7, #100]	; 0x64

  float raw_phi_dot_dot = (new_phi_dot - phi_dot) / dt;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <update_euler_state+0x394>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001ddc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <update_euler_state+0x390>)
 8001de2:	ed93 7a00 	vldr	s14, [r3]
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  float new_phi_dot_dot = phi_dot_dot * (1.0 - dot_dot_K) + raw_phi_dot_dot * dot_dot_K;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <update_euler_state+0x3c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fba8 	bl	8000548 <__aeabi_f2d>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	e020      	b.n	8001e40 <update_euler_state+0x3c4>
 8001dfe:	bf00      	nop
 8001e00:	20000604 	.word	0x20000604
 8001e04:	20000608 	.word	0x20000608
 8001e08:	20000600 	.word	0x20000600
 8001e0c:	2000008c 	.word	0x2000008c
 8001e10:	20000364 	.word	0x20000364
 8001e14:	20000360 	.word	0x20000360
 8001e18:	20000370 	.word	0x20000370
 8001e1c:	2000036c 	.word	0x2000036c
 8001e20:	20000090 	.word	0x20000090
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	2000060c 	.word	0x2000060c
 8001e2c:	20000610 	.word	0x20000610
 8001e30:	20000614 	.word	0x20000614
 8001e34:	20000094 	.word	0x20000094
 8001e38:	20000378 	.word	0x20000378
 8001e3c:	20000368 	.word	0x20000368
 8001e40:	4b69      	ldr	r3, [pc, #420]	; (8001fe8 <update_euler_state+0x56c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb7f 	bl	8000548 <__aeabi_f2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	4966      	ldr	r1, [pc, #408]	; (8001fec <update_euler_state+0x570>)
 8001e54:	f7fe fa18 	bl	8000288 <__aeabi_dsub>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <update_euler_state+0x56c>)
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	ee17 0a90 	vmov	r0, s15
 8001e7e:	f7fe fb63 	bl	8000548 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f7fe f9ff 	bl	800028c <__adddf3>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fe87 	bl	8000ba8 <__aeabi_d2f>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  float raw_theta_dot_dot = (new_theta_dot - theta_dot) / dt;
 8001e9e:	4b54      	ldr	r3, [pc, #336]	; (8001ff0 <update_euler_state+0x574>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001ea8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eac:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <update_euler_state+0x578>)
 8001eae:	ed93 7a00 	vldr	s14, [r3]
 8001eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float new_theta_dot_dot = theta_dot_dot * (1.0 - dot_dot_K) + raw_theta_dot_dot * dot_dot_K;
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <update_euler_state+0x57c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb42 	bl	8000548 <__aeabi_f2d>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <update_euler_state+0x56c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	f04f 0000 	mov.w	r0, #0
 8001eda:	4944      	ldr	r1, [pc, #272]	; (8001fec <update_euler_state+0x570>)
 8001edc:	f7fe f9d4 	bl	8000288 <__aeabi_dsub>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb86 	bl	80005f8 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <update_euler_state+0x56c>)
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	ee17 0a90 	vmov	r0, s15
 8001f06:	f7fe fb1f 	bl	8000548 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe f9bb 	bl	800028c <__adddf3>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fe43 	bl	8000ba8 <__aeabi_d2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
  float raw_psi_dot_dot = (new_psi_dot - psi_dot) / dt;
 8001f26:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <update_euler_state+0x580>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001f30:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <update_euler_state+0x578>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float new_psi_dot_dot = psi_dot_dot * (1.0 - dot_dot_K) + raw_psi_dot_dot * dot_dot_K;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <update_euler_state+0x584>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fafe 	bl	8000548 <__aeabi_f2d>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	460d      	mov	r5, r1
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <update_euler_state+0x56c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe faf7 	bl	8000548 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	4922      	ldr	r1, [pc, #136]	; (8001fec <update_euler_state+0x570>)
 8001f64:	f7fe f990 	bl	8000288 <__aeabi_dsub>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fb42 	bl	80005f8 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4614      	mov	r4, r2
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <update_euler_state+0x56c>)
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	ee17 0a90 	vmov	r0, s15
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe f977 	bl	800028c <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdff 	bl	8000ba8 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c

  phi = new_phi;
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <update_euler_state+0x588>)
 8001fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb2:	6013      	str	r3, [r2, #0]
  phi_dot = new_phi_dot;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <update_euler_state+0x58c>)
 8001fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb8:	6013      	str	r3, [r2, #0]
  phi_dot_dot = new_phi_dot_dot;
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <update_euler_state+0x590>)
 8001fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbe:	6013      	str	r3, [r2, #0]
  theta = new_theta;
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <update_euler_state+0x594>)
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc4:	6013      	str	r3, [r2, #0]
  theta_dot = new_theta_dot;
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <update_euler_state+0x574>)
 8001fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fca:	6013      	str	r3, [r2, #0]
  theta_dot_dot = new_theta_dot_dot;
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <update_euler_state+0x57c>)
 8001fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd0:	6013      	str	r3, [r2, #0]
  psi_dot = new_psi_dot;
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <update_euler_state+0x580>)
 8001fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd6:	6013      	str	r3, [r2, #0]
  psi_dot_dot = new_psi_dot_dot;
 8001fd8:	4a09      	ldr	r2, [pc, #36]	; (8002000 <update_euler_state+0x584>)
 8001fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fdc:	6013      	str	r3, [r2, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	3778      	adds	r7, #120	; 0x78
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fe8:	20000098 	.word	0x20000098
 8001fec:	3ff00000 	.word	0x3ff00000
 8001ff0:	20000370 	.word	0x20000370
 8001ff4:	2000008c 	.word	0x2000008c
 8001ff8:	20000374 	.word	0x20000374
 8001ffc:	20000378 	.word	0x20000378
 8002000:	2000037c 	.word	0x2000037c
 8002004:	20000360 	.word	0x20000360
 8002008:	20000364 	.word	0x20000364
 800200c:	20000368 	.word	0x20000368
 8002010:	2000036c 	.word	0x2000036c

08002014 <start_esc>:
#include "main.h"
#include <stdio.h>
#include "dynamics.h"
#include "control_receive.h"

void start_esc () {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // pwm 1
 8002018:	2108      	movs	r1, #8
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <start_esc+0x28>)
 800201c:	f003 ff7e 	bl	8005f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // pwm 2
 8002020:	210c      	movs	r1, #12
 8002022:	4806      	ldr	r0, [pc, #24]	; (800203c <start_esc+0x28>)
 8002024:	f003 ff7a 	bl	8005f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // pwm 3
 8002028:	210c      	movs	r1, #12
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <start_esc+0x2c>)
 800202c:	f003 ff76 	bl	8005f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // pwm 4
 8002030:	2108      	movs	r1, #8
 8002032:	4803      	ldr	r0, [pc, #12]	; (8002040 <start_esc+0x2c>)
 8002034:	f003 ff72 	bl	8005f1c <HAL_TIM_PWM_Start>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200004c4 	.word	0x200004c4
 8002040:	2000047c 	.word	0x2000047c

08002044 <terminate_esc>:

void terminate_esc () {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002048:	2108      	movs	r1, #8
 800204a:	4808      	ldr	r0, [pc, #32]	; (800206c <terminate_esc+0x28>)
 800204c:	f004 f82e 	bl	80060ac <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002050:	210c      	movs	r1, #12
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <terminate_esc+0x28>)
 8002054:	f004 f82a 	bl	80060ac <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8002058:	210c      	movs	r1, #12
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <terminate_esc+0x2c>)
 800205c:	f004 f826 	bl	80060ac <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002060:	2108      	movs	r1, #8
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <terminate_esc+0x2c>)
 8002064:	f004 f822 	bl	80060ac <HAL_TIM_PWM_Stop>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200004c4 	.word	0x200004c4
 8002070:	2000047c 	.word	0x2000047c

08002074 <update_throttle>:

void update_throttle (int throttle) {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  htim3.Instance->CCR3 = throttle;
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <update_throttle+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4 = throttle;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <update_throttle+0x34>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
  htim2.Instance->CCR4 = throttle;
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <update_throttle+0x38>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
  htim2.Instance->CCR3 = throttle;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <update_throttle+0x38>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	200004c4 	.word	0x200004c4
 80020ac:	2000047c 	.word	0x2000047c

080020b0 <skip_arming_mode>:

void skip_arming_mode () {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  update_throttle(300);
 80020b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020b8:	f7ff ffdc 	bl	8002074 <update_throttle>
  HAL_Delay(100);
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	f002 f8c9 	bl	8004254 <HAL_Delay>
  update_throttle(0);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff ffd6 	bl	8002074 <update_throttle>
  HAL_Delay(3000);
 80020c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020cc:	f002 f8c2 	bl	8004254 <HAL_Delay>
  update_throttle(5250);
 80020d0:	f241 4082 	movw	r0, #5250	; 0x1482
 80020d4:	f7ff ffce 	bl	8002074 <update_throttle>
  HAL_Delay(3000);
 80020d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020dc:	f002 f8ba 	bl	8004254 <HAL_Delay>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <update_output>:

float base_throttle = 5250;
float min_throttle = 5300;
float max_throttle = 10400;

void update_output () {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  update_esc_vector();
 80020e8:	f000 f95a 	bl	80023a0 <update_esc_vector>
  htim3.Instance->CCR3 = (int)MAX(MIN(base_throttle + esc_vector[0], max_throttle), min_throttle);
 80020ec:	4ba6      	ldr	r3, [pc, #664]	; (8002388 <update_output+0x2a4>)
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	4ba6      	ldr	r3, [pc, #664]	; (800238c <update_output+0x2a8>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fc:	4ba4      	ldr	r3, [pc, #656]	; (8002390 <update_output+0x2ac>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d508      	bpl.n	800211e <update_output+0x3a>
 800210c:	4b9e      	ldr	r3, [pc, #632]	; (8002388 <update_output+0x2a4>)
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	4b9e      	ldr	r3, [pc, #632]	; (800238c <update_output+0x2a8>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211c:	e002      	b.n	8002124 <update_output+0x40>
 800211e:	4b9c      	ldr	r3, [pc, #624]	; (8002390 <update_output+0x2ac>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	4b9b      	ldr	r3, [pc, #620]	; (8002394 <update_output+0x2b0>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	dd24      	ble.n	800217e <update_output+0x9a>
 8002134:	4b94      	ldr	r3, [pc, #592]	; (8002388 <update_output+0x2a4>)
 8002136:	ed93 7a00 	vldr	s14, [r3]
 800213a:	4b94      	ldr	r3, [pc, #592]	; (800238c <update_output+0x2a8>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002144:	4b92      	ldr	r3, [pc, #584]	; (8002390 <update_output+0x2ac>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d50c      	bpl.n	800216e <update_output+0x8a>
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <update_output+0x2a4>)
 8002156:	ed93 7a00 	vldr	s14, [r3]
 800215a:	4b8c      	ldr	r3, [pc, #560]	; (800238c <update_output+0x2a8>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002168:	ee17 2a90 	vmov	r2, s15
 800216c:	e00e      	b.n	800218c <update_output+0xa8>
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <update_output+0x2ac>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002178:	ee17 2a90 	vmov	r2, s15
 800217c:	e006      	b.n	800218c <update_output+0xa8>
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <update_output+0x2b0>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002188:	ee17 2a90 	vmov	r2, s15
 800218c:	4b82      	ldr	r3, [pc, #520]	; (8002398 <update_output+0x2b4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4 = (int)MAX(MIN(base_throttle + esc_vector[1], max_throttle), min_throttle);
 8002192:	4b7d      	ldr	r3, [pc, #500]	; (8002388 <update_output+0x2a4>)
 8002194:	ed93 7a01 	vldr	s14, [r3, #4]
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <update_output+0x2a8>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a2:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <update_output+0x2ac>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d508      	bpl.n	80021c4 <update_output+0xe0>
 80021b2:	4b75      	ldr	r3, [pc, #468]	; (8002388 <update_output+0x2a4>)
 80021b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80021b8:	4b74      	ldr	r3, [pc, #464]	; (800238c <update_output+0x2a8>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c2:	e002      	b.n	80021ca <update_output+0xe6>
 80021c4:	4b72      	ldr	r3, [pc, #456]	; (8002390 <update_output+0x2ac>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <update_output+0x2b0>)
 80021cc:	ed93 7a00 	vldr	s14, [r3]
 80021d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	dd24      	ble.n	8002224 <update_output+0x140>
 80021da:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <update_output+0x2a4>)
 80021dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80021e0:	4b6a      	ldr	r3, [pc, #424]	; (800238c <update_output+0x2a8>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ea:	4b69      	ldr	r3, [pc, #420]	; (8002390 <update_output+0x2ac>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d50c      	bpl.n	8002214 <update_output+0x130>
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <update_output+0x2a4>)
 80021fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <update_output+0x2a8>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220e:	ee17 2a90 	vmov	r2, s15
 8002212:	e00e      	b.n	8002232 <update_output+0x14e>
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <update_output+0x2ac>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221e:	ee17 2a90 	vmov	r2, s15
 8002222:	e006      	b.n	8002232 <update_output+0x14e>
 8002224:	4b5b      	ldr	r3, [pc, #364]	; (8002394 <update_output+0x2b0>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222e:	ee17 2a90 	vmov	r2, s15
 8002232:	4b59      	ldr	r3, [pc, #356]	; (8002398 <update_output+0x2b4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  htim2.Instance->CCR4 = (int)MAX(MIN(base_throttle + esc_vector[2], max_throttle), min_throttle);
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <update_output+0x2a4>)
 800223a:	ed93 7a02 	vldr	s14, [r3, #8]
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <update_output+0x2a8>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002248:	4b51      	ldr	r3, [pc, #324]	; (8002390 <update_output+0x2ac>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002256:	d508      	bpl.n	800226a <update_output+0x186>
 8002258:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <update_output+0x2a4>)
 800225a:	ed93 7a02 	vldr	s14, [r3, #8]
 800225e:	4b4b      	ldr	r3, [pc, #300]	; (800238c <update_output+0x2a8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	e002      	b.n	8002270 <update_output+0x18c>
 800226a:	4b49      	ldr	r3, [pc, #292]	; (8002390 <update_output+0x2ac>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	4b48      	ldr	r3, [pc, #288]	; (8002394 <update_output+0x2b0>)
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	dd24      	ble.n	80022ca <update_output+0x1e6>
 8002280:	4b41      	ldr	r3, [pc, #260]	; (8002388 <update_output+0x2a4>)
 8002282:	ed93 7a02 	vldr	s14, [r3, #8]
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <update_output+0x2a8>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002290:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <update_output+0x2ac>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d50c      	bpl.n	80022ba <update_output+0x1d6>
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <update_output+0x2a4>)
 80022a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <update_output+0x2a8>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b4:	ee17 2a90 	vmov	r2, s15
 80022b8:	e00e      	b.n	80022d8 <update_output+0x1f4>
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <update_output+0x2ac>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 2a90 	vmov	r2, s15
 80022c8:	e006      	b.n	80022d8 <update_output+0x1f4>
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <update_output+0x2b0>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d4:	ee17 2a90 	vmov	r2, s15
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <update_output+0x2b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
  htim2.Instance->CCR3 = (int)MAX(MIN(base_throttle + esc_vector[3], max_throttle), min_throttle);
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <update_output+0x2a4>)
 80022e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <update_output+0x2a8>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <update_output+0x2ac>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d508      	bpl.n	8002310 <update_output+0x22c>
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <update_output+0x2a4>)
 8002300:	ed93 7a03 	vldr	s14, [r3, #12]
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <update_output+0x2a8>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230e:	e002      	b.n	8002316 <update_output+0x232>
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <update_output+0x2ac>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <update_output+0x2b0>)
 8002318:	ed93 7a00 	vldr	s14, [r3]
 800231c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	dd24      	ble.n	8002370 <update_output+0x28c>
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <update_output+0x2a4>)
 8002328:	ed93 7a03 	vldr	s14, [r3, #12]
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <update_output+0x2a8>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <update_output+0x2ac>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	d50c      	bpl.n	8002360 <update_output+0x27c>
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <update_output+0x2a4>)
 8002348:	ed93 7a03 	vldr	s14, [r3, #12]
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <update_output+0x2a8>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235a:	ee17 2a90 	vmov	r2, s15
 800235e:	e00e      	b.n	800237e <update_output+0x29a>
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <update_output+0x2ac>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800236a:	ee17 2a90 	vmov	r2, s15
 800236e:	e006      	b.n	800237e <update_output+0x29a>
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <update_output+0x2b0>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237a:	ee17 2a90 	vmov	r2, s15
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <update_output+0x2b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000380 	.word	0x20000380
 800238c:	2000009c 	.word	0x2000009c
 8002390:	200000a4 	.word	0x200000a4
 8002394:	200000a0 	.word	0x200000a0
 8002398:	200004c4 	.word	0x200004c4
 800239c:	2000047c 	.word	0x2000047c

080023a0 <update_esc_vector>:

float esc_vector[4];
void update_esc_vector () {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b098      	sub	sp, #96	; 0x60
 80023a4:	af02      	add	r7, sp, #8
  float eta_dot_dot_ref[3];
  float phi_dot_ref = get_dot_ref_by_pd(
    get_error(command[PHI_COMMAND_IDX] * 0.0005, phi),
 80023a6:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <update_esc_vector+0x218>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8cc 	bl	8000548 <__aeabi_f2d>
 80023b0:	a37d      	add	r3, pc, #500	; (adr r3, 80025a8 <update_esc_vector+0x208>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f91f 	bl	80005f8 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
  float phi_dot_ref = get_dot_ref_by_pd(
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fbf1 	bl	8000ba8 <__aeabi_d2f>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b7c      	ldr	r3, [pc, #496]	; (80025bc <update_esc_vector+0x21c>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	eef0 0a67 	vmov.f32	s1, s15
 80023d2:	ee00 2a10 	vmov	s0, r2
 80023d6:	f7ff faa6 	bl	8001926 <get_error>
 80023da:	eeb0 6a40 	vmov.f32	s12, s0
 80023de:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <update_esc_vector+0x220>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	4b77      	ldr	r3, [pc, #476]	; (80025c4 <update_esc_vector+0x224>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <update_esc_vector+0x228>)
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	eef0 1a66 	vmov.f32	s3, s13
 80023f4:	eeb0 1a47 	vmov.f32	s2, s14
 80023f8:	eef0 0a67 	vmov.f32	s1, s15
 80023fc:	eeb0 0a46 	vmov.f32	s0, s12
 8002400:	f7ff faa5 	bl	800194e <get_dot_ref_by_pd>
 8002404:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    P_phi,
    phi_dot,
    D_phi
  );
  float phi_dot_dot_ref = get_dot_ref_by_pd(
 8002408:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <update_esc_vector+0x224>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eef0 0a67 	vmov.f32	s1, s15
 8002412:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002416:	f7ff fa86 	bl	8001926 <get_error>
 800241a:	eeb0 6a40 	vmov.f32	s12, s0
 800241e:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <update_esc_vector+0x22c>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <update_esc_vector+0x230>)
 8002426:	ed93 7a00 	vldr	s14, [r3]
 800242a:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <update_esc_vector+0x234>)
 800242c:	edd3 6a00 	vldr	s13, [r3]
 8002430:	eef0 1a66 	vmov.f32	s3, s13
 8002434:	eeb0 1a47 	vmov.f32	s2, s14
 8002438:	eef0 0a67 	vmov.f32	s1, s15
 800243c:	eeb0 0a46 	vmov.f32	s0, s12
 8002440:	f7ff fa85 	bl	800194e <get_dot_ref_by_pd>
 8002444:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    P_phi_dot,
    phi_dot_dot,
    D_phi_dot
  );
  float theta_dot_ref = get_dot_ref_by_pd(
    get_error(command[THETA_COMMAND_IDX] * 0.0005, theta),
 8002448:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <update_esc_vector+0x218>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f87b 	bl	8000548 <__aeabi_f2d>
 8002452:	a355      	add	r3, pc, #340	; (adr r3, 80025a8 <update_esc_vector+0x208>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8ce 	bl	80005f8 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
  float theta_dot_ref = get_dot_ref_by_pd(
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fba0 	bl	8000ba8 <__aeabi_d2f>
 8002468:	4602      	mov	r2, r0
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <update_esc_vector+0x238>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eef0 0a67 	vmov.f32	s1, s15
 8002474:	ee00 2a10 	vmov	s0, r2
 8002478:	f7ff fa55 	bl	8001926 <get_error>
 800247c:	eeb0 6a40 	vmov.f32	s12, s0
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <update_esc_vector+0x23c>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	4b56      	ldr	r3, [pc, #344]	; (80025e0 <update_esc_vector+0x240>)
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <update_esc_vector+0x244>)
 800248e:	edd3 6a00 	vldr	s13, [r3]
 8002492:	eef0 1a66 	vmov.f32	s3, s13
 8002496:	eeb0 1a47 	vmov.f32	s2, s14
 800249a:	eef0 0a67 	vmov.f32	s1, s15
 800249e:	eeb0 0a46 	vmov.f32	s0, s12
 80024a2:	f7ff fa54 	bl	800194e <get_dot_ref_by_pd>
 80024a6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    P_theta,
    theta_dot,
    D_theta
  );
  float theta_dot_dot_ref = get_dot_ref_by_pd(
 80024aa:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <update_esc_vector+0x240>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eef0 0a67 	vmov.f32	s1, s15
 80024b4:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80024b8:	f7ff fa35 	bl	8001926 <get_error>
 80024bc:	eeb0 6a40 	vmov.f32	s12, s0
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <update_esc_vector+0x248>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <update_esc_vector+0x24c>)
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <update_esc_vector+0x250>)
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	eef0 1a66 	vmov.f32	s3, s13
 80024d6:	eeb0 1a47 	vmov.f32	s2, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	eeb0 0a46 	vmov.f32	s0, s12
 80024e2:	f7ff fa34 	bl	800194e <get_dot_ref_by_pd>
 80024e6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
    P_theta_dot,
    theta_dot_dot,
    D_theta_dot
  );
  float psi_dot_dot_ref = get_dot_ref_by_pd(
    get_error((command[PSI_DOT_COMMAND_IDX]) * 0.005, psi_dot),
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <update_esc_vector+0x218>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f82a 	bl	8000548 <__aeabi_f2d>
 80024f4:	a32e      	add	r3, pc, #184	; (adr r3, 80025b0 <update_esc_vector+0x210>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f87d 	bl	80005f8 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
  float psi_dot_dot_ref = get_dot_ref_by_pd(
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb4f 	bl	8000ba8 <__aeabi_d2f>
 800250a:	4602      	mov	r2, r0
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <update_esc_vector+0x254>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	eef0 0a67 	vmov.f32	s1, s15
 8002516:	ee00 2a10 	vmov	s0, r2
 800251a:	f7ff fa04 	bl	8001926 <get_error>
 800251e:	eeb0 6a40 	vmov.f32	s12, s0
 8002522:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <update_esc_vector+0x258>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <update_esc_vector+0x25c>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <update_esc_vector+0x260>)
 8002530:	edd3 6a00 	vldr	s13, [r3]
 8002534:	eef0 1a66 	vmov.f32	s3, s13
 8002538:	eeb0 1a47 	vmov.f32	s2, s14
 800253c:	eef0 0a67 	vmov.f32	s1, s15
 8002540:	eeb0 0a46 	vmov.f32	s0, s12
 8002544:	f7ff fa03 	bl	800194e <get_dot_ref_by_pd>
 8002548:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    P_psi_dot,
    psi_dot_dot,
    D_psi_dot
  );
  get_eta_dot_dot_ref(phi_dot_dot_ref, theta_dot_dot_ref, psi_dot_dot_ref, eta_dot_dot_ref);
 800254c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002550:	4618      	mov	r0, r3
 8002552:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 8002556:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800255a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800255e:	f7ff fa16 	bl	800198e <get_eta_dot_dot_ref>
  float force_vector[4];
  float C[3][3];
  get_C(phi, theta, C);
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <update_esc_vector+0x21c>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <update_esc_vector+0x238>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	4618      	mov	r0, r3
 8002572:	eef0 0a47 	vmov.f32	s1, s14
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	f7ff f857 	bl	800162c <get_C>
  get_force_vector(eta_dot_dot_ref, T_inv, I, C, force_vector);
 800257e:	1d3a      	adds	r2, r7, #4
 8002580:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <update_esc_vector+0x264>)
 800258e:	491e      	ldr	r1, [pc, #120]	; (8002608 <update_esc_vector+0x268>)
 8002590:	f7ff fa18 	bl	80019c4 <get_force_vector>
  get_esc_vector(force_vector, esc_vector);
 8002594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002598:	491c      	ldr	r1, [pc, #112]	; (800260c <update_esc_vector+0x26c>)
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fa3c 	bl	8001a18 <get_esc_vector>
}
 80025a0:	bf00      	nop
 80025a2:	3758      	adds	r7, #88	; 0x58
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025ac:	3f40624d 	.word	0x3f40624d
 80025b0:	47ae147b 	.word	0x47ae147b
 80025b4:	3f747ae1 	.word	0x3f747ae1
 80025b8:	200002b8 	.word	0x200002b8
 80025bc:	20000360 	.word	0x20000360
 80025c0:	20000068 	.word	0x20000068
 80025c4:	20000364 	.word	0x20000364
 80025c8:	2000006c 	.word	0x2000006c
 80025cc:	20000070 	.word	0x20000070
 80025d0:	20000368 	.word	0x20000368
 80025d4:	20000074 	.word	0x20000074
 80025d8:	2000036c 	.word	0x2000036c
 80025dc:	20000078 	.word	0x20000078
 80025e0:	20000370 	.word	0x20000370
 80025e4:	2000007c 	.word	0x2000007c
 80025e8:	20000080 	.word	0x20000080
 80025ec:	20000374 	.word	0x20000374
 80025f0:	20000084 	.word	0x20000084
 80025f4:	20000378 	.word	0x20000378
 80025f8:	20000088 	.word	0x20000088
 80025fc:	2000037c 	.word	0x2000037c
 8002600:	2000035c 	.word	0x2000035c
 8002604:	20000004 	.word	0x20000004
 8002608:	20000028 	.word	0x20000028
 800260c:	20000380 	.word	0x20000380

08002610 <process_gain_receive>:
uint8_t gain_rx_buf[100];
int gain_payload_cnt = 0;
uint16_t gain[20] = {0, };
uint16_t gain_crc = 0;

void process_gain_receive (uint8_t data) {
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if (gain_payload_cnt == 0 && data == 0x20) {
 800261a:	4b98      	ldr	r3, [pc, #608]	; (800287c <process_gain_receive+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <process_gain_receive+0x2e>
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b20      	cmp	r3, #32
 8002626:	d10a      	bne.n	800263e <process_gain_receive+0x2e>
    gain_rx_buf[gain_payload_cnt] = data;
 8002628:	4b94      	ldr	r3, [pc, #592]	; (800287c <process_gain_receive+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4994      	ldr	r1, [pc, #592]	; (8002880 <process_gain_receive+0x270>)
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	54ca      	strb	r2, [r1, r3]
    gain_payload_cnt++;
 8002632:	4b92      	ldr	r3, [pc, #584]	; (800287c <process_gain_receive+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	4a90      	ldr	r2, [pc, #576]	; (800287c <process_gain_receive+0x26c>)
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e118      	b.n	8002870 <process_gain_receive+0x260>
  } else if (gain_payload_cnt == 1 && data == 0x40) {
 800263e:	4b8f      	ldr	r3, [pc, #572]	; (800287c <process_gain_receive+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10d      	bne.n	8002662 <process_gain_receive+0x52>
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d10a      	bne.n	8002662 <process_gain_receive+0x52>
    gain_rx_buf[gain_payload_cnt] = data;
 800264c:	4b8b      	ldr	r3, [pc, #556]	; (800287c <process_gain_receive+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	498b      	ldr	r1, [pc, #556]	; (8002880 <process_gain_receive+0x270>)
 8002652:	79fa      	ldrb	r2, [r7, #7]
 8002654:	54ca      	strb	r2, [r1, r3]
    gain_payload_cnt++;
 8002656:	4b89      	ldr	r3, [pc, #548]	; (800287c <process_gain_receive+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	4a87      	ldr	r2, [pc, #540]	; (800287c <process_gain_receive+0x26c>)
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	e106      	b.n	8002870 <process_gain_receive+0x260>
  } else if (gain_payload_cnt >= 2 && gain_payload_cnt < 2 + 2 * NUM_OF_GAINS) {
 8002662:	4b86      	ldr	r3, [pc, #536]	; (800287c <process_gain_receive+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	dd0e      	ble.n	8002688 <process_gain_receive+0x78>
 800266a:	4b84      	ldr	r3, [pc, #528]	; (800287c <process_gain_receive+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b15      	cmp	r3, #21
 8002670:	dc0a      	bgt.n	8002688 <process_gain_receive+0x78>
    gain_rx_buf[gain_payload_cnt] = data;
 8002672:	4b82      	ldr	r3, [pc, #520]	; (800287c <process_gain_receive+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4982      	ldr	r1, [pc, #520]	; (8002880 <process_gain_receive+0x270>)
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	54ca      	strb	r2, [r1, r3]
    gain_payload_cnt++;
 800267c:	4b7f      	ldr	r3, [pc, #508]	; (800287c <process_gain_receive+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	4a7e      	ldr	r2, [pc, #504]	; (800287c <process_gain_receive+0x26c>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e0f3      	b.n	8002870 <process_gain_receive+0x260>
  } else if (gain_payload_cnt == 2 + 2 * NUM_OF_GAINS) {
 8002688:	4b7c      	ldr	r3, [pc, #496]	; (800287c <process_gain_receive+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b16      	cmp	r3, #22
 800268e:	d114      	bne.n	80026ba <process_gain_receive+0xaa>
    gain_crc &= 0xff00;
 8002690:	4b7c      	ldr	r3, [pc, #496]	; (8002884 <process_gain_receive+0x274>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b7a      	ldr	r3, [pc, #488]	; (8002884 <process_gain_receive+0x274>)
 800269c:	801a      	strh	r2, [r3, #0]
    gain_crc |= data;
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b78      	ldr	r3, [pc, #480]	; (8002884 <process_gain_receive+0x274>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <process_gain_receive+0x274>)
 80026ac:	801a      	strh	r2, [r3, #0]
    gain_payload_cnt++;
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <process_gain_receive+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	4a71      	ldr	r2, [pc, #452]	; (800287c <process_gain_receive+0x26c>)
 80026b6:	6013      	str	r3, [r2, #0]
    }
    gain_payload_cnt = 0;
  } else {
    gain_payload_cnt = 0;
  }
}
 80026b8:	e0da      	b.n	8002870 <process_gain_receive+0x260>
  } else if (gain_payload_cnt == 2 + 2 * NUM_OF_GAINS + 1) {
 80026ba:	4b70      	ldr	r3, [pc, #448]	; (800287c <process_gain_receive+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b17      	cmp	r3, #23
 80026c0:	f040 80d2 	bne.w	8002868 <process_gain_receive+0x258>
    uint16_t check_sum = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < (NUM_OF_GAINS + 1) * 2; i++) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e00a      	b.n	80026e4 <process_gain_receive+0xd4>
      check_sum += gain_rx_buf[i];
 80026ce:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <process_gain_receive+0x270>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	8afb      	ldrh	r3, [r7, #22]
 80026da:	4413      	add	r3, r2
 80026dc:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < (NUM_OF_GAINS + 1) * 2; i++) {
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	3301      	adds	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b15      	cmp	r3, #21
 80026e8:	ddf1      	ble.n	80026ce <process_gain_receive+0xbe>
    gain_crc &= 0x00ff;
 80026ea:	4b66      	ldr	r3, [pc, #408]	; (8002884 <process_gain_receive+0x274>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	4b64      	ldr	r3, [pc, #400]	; (8002884 <process_gain_receive+0x274>)
 80026f4:	801a      	strh	r2, [r3, #0]
    gain_crc |= ((uint16_t)data << 8);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <process_gain_receive+0x274>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b21b      	sxth	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b21b      	sxth	r3, r3
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <process_gain_receive+0x274>)
 800270a:	801a      	strh	r2, [r3, #0]
    if (0xffff - check_sum == gain_crc) {
 800270c:	8afb      	ldrh	r3, [r7, #22]
 800270e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002712:	33ff      	adds	r3, #255	; 0xff
 8002714:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <process_gain_receive+0x274>)
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	4293      	cmp	r3, r2
 800271a:	f040 80a1 	bne.w	8002860 <process_gain_receive+0x250>
      for (int i = 0, j = 2; i < NUM_OF_GAINS; i++, j += 2) {
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	2302      	movs	r3, #2
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	e010      	b.n	800274a <process_gain_receive+0x13a>
        gain[i] = *(uint16_t *)(gain_rx_buf + j) & 0xfff;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4a55      	ldr	r2, [pc, #340]	; (8002880 <process_gain_receive+0x270>)
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	b299      	uxth	r1, r3
 8002736:	4a54      	ldr	r2, [pc, #336]	; (8002888 <process_gain_receive+0x278>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (int i = 0, j = 2; i < NUM_OF_GAINS; i++, j += 2) {
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3301      	adds	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3302      	adds	r3, #2
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b09      	cmp	r3, #9
 800274e:	ddeb      	ble.n	8002728 <process_gain_receive+0x118>
      P_phi = MIN(300, gain[P_PHI_IDX]);
 8002750:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <process_gain_receive+0x278>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002758:	bf28      	it	cs
 800275a:	f44f 7396 	movcs.w	r3, #300	; 0x12c
 800275e:	b29b      	uxth	r3, r3
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002768:	4b48      	ldr	r3, [pc, #288]	; (800288c <process_gain_receive+0x27c>)
 800276a:	edc3 7a00 	vstr	s15, [r3]
      D_phi = MIN(100, gain[D_PHI_IDX]);
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <process_gain_receive+0x278>)
 8002770:	885b      	ldrh	r3, [r3, #2]
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	bf28      	it	cs
 8002776:	2364      	movcs	r3, #100	; 0x64
 8002778:	b29b      	uxth	r3, r3
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <process_gain_receive+0x280>)
 8002784:	edc3 7a00 	vstr	s15, [r3]
      P_theta = MIN(300, gain[P_THETA_IDX]);
 8002788:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <process_gain_receive+0x278>)
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002790:	bf28      	it	cs
 8002792:	f44f 7396 	movcs.w	r3, #300	; 0x12c
 8002796:	b29b      	uxth	r3, r3
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a0:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <process_gain_receive+0x284>)
 80027a2:	edc3 7a00 	vstr	s15, [r3]
      D_theta = MIN(100, gain[D_THETA_IDX]);
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <process_gain_receive+0x278>)
 80027a8:	88db      	ldrh	r3, [r3, #6]
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	bf28      	it	cs
 80027ae:	2364      	movcs	r3, #100	; 0x64
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <process_gain_receive+0x288>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
      P_phi_dot = MIN(100, gain[P_PHI_DOT_IDX]);
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <process_gain_receive+0x278>)
 80027c2:	891b      	ldrh	r3, [r3, #8]
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	bf28      	it	cs
 80027c8:	2364      	movcs	r3, #100	; 0x64
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	ee07 3a90 	vmov	s15, r3
 80027d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <process_gain_receive+0x28c>)
 80027d6:	edc3 7a00 	vstr	s15, [r3]
      D_phi_dot = MIN(50, gain[D_PHI_DOT_IDX]);
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <process_gain_receive+0x278>)
 80027dc:	895b      	ldrh	r3, [r3, #10]
 80027de:	2b32      	cmp	r3, #50	; 0x32
 80027e0:	bf28      	it	cs
 80027e2:	2332      	movcs	r3, #50	; 0x32
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ee:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <process_gain_receive+0x290>)
 80027f0:	edc3 7a00 	vstr	s15, [r3]
      P_theta_dot = MIN(100, gain[P_THETA_DOT_IDX]);
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <process_gain_receive+0x278>)
 80027f6:	899b      	ldrh	r3, [r3, #12]
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	bf28      	it	cs
 80027fc:	2364      	movcs	r3, #100	; 0x64
 80027fe:	b29b      	uxth	r3, r3
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002808:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <process_gain_receive+0x294>)
 800280a:	edc3 7a00 	vstr	s15, [r3]
      D_theta_dot = MIN(50, gain[D_THETA_DOT_IDX]);
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <process_gain_receive+0x278>)
 8002810:	89db      	ldrh	r3, [r3, #14]
 8002812:	2b32      	cmp	r3, #50	; 0x32
 8002814:	bf28      	it	cs
 8002816:	2332      	movcs	r3, #50	; 0x32
 8002818:	b29b      	uxth	r3, r3
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002822:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <process_gain_receive+0x298>)
 8002824:	edc3 7a00 	vstr	s15, [r3]
      P_psi_dot = MIN(1000, gain[P_PSI_DOT_IDX]);
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <process_gain_receive+0x278>)
 800282a:	8a1b      	ldrh	r3, [r3, #16]
 800282c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002830:	bf28      	it	cs
 8002832:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8002836:	b29b      	uxth	r3, r3
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <process_gain_receive+0x29c>)
 8002842:	edc3 7a00 	vstr	s15, [r3]
      D_psi_dot = MIN(100, gain[D_PSI_DOT_IDX]);
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <process_gain_receive+0x278>)
 8002848:	8a5b      	ldrh	r3, [r3, #18]
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	bf28      	it	cs
 800284e:	2364      	movcs	r3, #100	; 0x64
 8002850:	b29b      	uxth	r3, r3
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <process_gain_receive+0x2a0>)
 800285c:	edc3 7a00 	vstr	s15, [r3]
    gain_payload_cnt = 0;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <process_gain_receive+0x26c>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	e003      	b.n	8002870 <process_gain_receive+0x260>
    gain_payload_cnt = 0;
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <process_gain_receive+0x26c>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	e7ff      	b.n	8002870 <process_gain_receive+0x260>
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	200003f4 	.word	0x200003f4
 8002880:	20000390 	.word	0x20000390
 8002884:	20000420 	.word	0x20000420
 8002888:	200003f8 	.word	0x200003f8
 800288c:	20000068 	.word	0x20000068
 8002890:	2000006c 	.word	0x2000006c
 8002894:	20000078 	.word	0x20000078
 8002898:	2000007c 	.word	0x2000007c
 800289c:	20000070 	.word	0x20000070
 80028a0:	20000074 	.word	0x20000074
 80028a4:	20000080 	.word	0x20000080
 80028a8:	20000084 	.word	0x20000084
 80028ac:	20000088 	.word	0x20000088
 80028b0:	2000035c 	.word	0x2000035c

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60da      	str	r2, [r3, #12]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	615a      	str	r2, [r3, #20]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40023800 	.word	0x40023800

08002a44 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a50:	4907      	ldr	r1, [pc, #28]	; (8002a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800

08002a74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <loop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int cnt = 0;
void loop () {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  if (euler_state_update_plan) {
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <loop+0x58>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <loop+0x1a>
    read_mpu_sensor();
 8002ab0:	f000 fcfa 	bl	80034a8 <read_mpu_sensor>
    update_euler_state();
 8002ab4:	f7fe ffe2 	bl	8001a7c <update_euler_state>

    euler_state_update_plan = 0;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <loop+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
  }
  if (esc_update_plan) {
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <loop+0x5c>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <loop+0x40>
    if (shutdown) {
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <loop+0x60>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <loop+0x36>
      terminate_esc();
 8002ace:	f7ff fab9 	bl	8002044 <terminate_esc>
      shutdown = 0;
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <loop+0x60>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e001      	b.n	8002ade <loop+0x3a>
    } else {
      update_output();
 8002ada:	f7ff fb03 	bl	80020e4 <update_output>
      fflush(stdout);
      cnt = 0;
    } else {
      cnt++;
    } */
    esc_update_plan = 0;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <loop+0x5c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
  }
  if (debug_values_tx_plan) {
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <loop+0x64>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <loop+0x52>
    process_debug_values_tx();
 8002aec:	f7fe fb42 	bl	8001174 <process_debug_values_tx>
    debug_values_tx_plan = 0;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <loop+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
  }
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000620 	.word	0x20000620
 8002b00:	20000621 	.word	0x20000621
 8002b04:	2000035a 	.word	0x2000035a
 8002b08:	20000622 	.word	0x20000622

08002b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b10:	f001 fb2e 	bl	8004170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b14:	f000 f826 	bl	8002b64 <SystemClock_Config>
  /* HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 100000);
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b18:	f000 fb46 	bl	80031a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002b1c:	f000 f88c 	bl	8002c38 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002b20:	f000 f8c0 	bl	8002ca4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b24:	f000 f922 	bl	8002d6c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b28:	f000 f984 	bl	8002e34 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002b2c:	f000 fa7a 	bl	8003024 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002b30:	f000 fad8 	bl	80030e4 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002b34:	f000 f9d4 	bl	8002ee0 <MX_TIM5_Init>
  MX_TIM13_Init();
 8002b38:	f000 fa28 	bl	8002f8c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  init_uart();
 8002b3c:	f001 fa1e 	bl	8003f7c <init_uart>
  init_mpu();
 8002b40:	f000 fbf8 	bl	8003334 <init_mpu>
  calibrate_mpu();
 8002b44:	f000 fc68 	bl	8003418 <calibrate_mpu>
  start_esc();
 8002b48:	f7ff fa64 	bl	8002014 <start_esc>
  skip_arming_mode();
 8002b4c:	f7ff fab0 	bl	80020b0 <skip_arming_mode>
  // do_calibration();
  start_esc_update_tim();
 8002b50:	f001 f916 	bl	8003d80 <start_esc_update_tim>
  start_sensor_update_tim();
 8002b54:	f001 f91e 	bl	8003d94 <start_sensor_update_tim>
  start_debug_values_tx_tim();
 8002b58:	f001 f926 	bl	8003da8 <start_debug_values_tx_tim>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8002b5c:	f7ff ffa2 	bl	8002aa4 <loop>
 8002b60:	e7fc      	b.n	8002b5c <main+0x50>
	...

08002b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b094      	sub	sp, #80	; 0x50
 8002b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b6a:	f107 0320 	add.w	r3, r7, #32
 8002b6e:	2230      	movs	r2, #48	; 0x30
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fe2e 	bl	80077d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <SystemClock_Config+0xcc>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <SystemClock_Config+0xcc>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <SystemClock_Config+0xcc>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <SystemClock_Config+0xd0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <SystemClock_Config+0xd0>)
 8002bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <SystemClock_Config+0xd0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002bd8:	23a8      	movs	r3, #168	; 0xa8
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002be0:	2304      	movs	r3, #4
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 0320 	add.w	r3, r7, #32
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fe1f 	bl	800482c <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bf4:	f000 fb28 	bl	8003248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 f880 	bl	8004d1c <HAL_RCC_ClockConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c22:	f000 fb11 	bl	8003248 <Error_Handler>
  }
}
 8002c26:	bf00      	nop
 8002c28:	3750      	adds	r7, #80	; 0x50
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000

08002c38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <MX_SPI1_Init+0x68>)
 8002c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c50:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c84:	220a      	movs	r2, #10
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c88:	4804      	ldr	r0, [pc, #16]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c8a:	f002 fa33 	bl	80050f4 <HAL_SPI_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c94:	f000 fad8 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000424 	.word	0x20000424
 8002ca0:	40013000 	.word	0x40013000

08002ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002caa:	f107 0320 	add.w	r3, r7, #32
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ccc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10500;
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002cdc:	f642 1204 	movw	r2, #10500	; 0x2904
 8002ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cee:	481e      	ldr	r0, [pc, #120]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002cf0:	f003 f8c5 	bl	8005e7e <HAL_TIM_PWM_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002cfa:	f000 faa5 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d06:	f107 0320 	add.w	r3, r7, #32
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4816      	ldr	r0, [pc, #88]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002d0e:	f003 ff01 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002d18:	f000 fa96 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d1c:	2360      	movs	r3, #96	; 0x60
 8002d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2208      	movs	r2, #8
 8002d30:	4619      	mov	r1, r3
 8002d32:	480d      	ldr	r0, [pc, #52]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002d34:	f003 fb8e 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002d3e:	f000 fa83 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	220c      	movs	r2, #12
 8002d46:	4619      	mov	r1, r3
 8002d48:	4807      	ldr	r0, [pc, #28]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002d4a:	f003 fb83 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d54:	f000 fa78 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d58:	4803      	ldr	r0, [pc, #12]	; (8002d68 <MX_TIM2_Init+0xc4>)
 8002d5a:	f000 fe93 	bl	8003a84 <HAL_TIM_MspPostInit>

}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000047c 	.word	0x2000047c

08002d6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d72:	f107 0320 	add.w	r3, r7, #32
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	615a      	str	r2, [r3, #20]
 8002d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <MX_TIM3_Init+0xc4>)
 8002d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10500;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002da2:	f642 1204 	movw	r2, #10500	; 0x2904
 8002da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dae:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002db4:	481d      	ldr	r0, [pc, #116]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002db6:	f003 f862 	bl	8005e7e <HAL_TIM_PWM_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002dc0:	f000 fa42 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dcc:	f107 0320 	add.w	r3, r7, #32
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4816      	ldr	r0, [pc, #88]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002dd4:	f003 fe9e 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002dde:	f000 fa33 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de2:	2360      	movs	r3, #96	; 0x60
 8002de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2208      	movs	r2, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002dfa:	f003 fb2b 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002e04:	f000 fa20 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4807      	ldr	r0, [pc, #28]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002e10:	f003 fb20 	bl	8006454 <HAL_TIM_PWM_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e1a:	f000 fa15 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e1e:	4803      	ldr	r0, [pc, #12]	; (8002e2c <MX_TIM3_Init+0xc0>)
 8002e20:	f000 fe30 	bl	8003a84 <HAL_TIM_MspPostInit>

}
 8002e24:	bf00      	nop
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200004c4 	.word	0x200004c4
 8002e30:	40000400 	.word	0x40000400

08002e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3a:	f107 0320 	add.w	r3, r7, #32
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	615a      	str	r2, [r3, #20]
 8002e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <MX_TIM4_Init+0xa8>)
 8002e5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e5e:	2253      	movs	r2, #83	; 0x53
 8002e60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002e7c:	4816      	ldr	r0, [pc, #88]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e7e:	f002 ffaf 	bl	8005de0 <HAL_TIM_OC_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002e88:	f000 f9de 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480f      	ldr	r0, [pc, #60]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002e9c:	f003 fe3a 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002ea6:	f000 f9cf 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <MX_TIM4_Init+0xa4>)
 8002ec2:	f003 fa6b 	bl	800639c <HAL_TIM_OC_ConfigChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002ecc:	f000 f9bc 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	3728      	adds	r7, #40	; 0x28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	2000050c 	.word	0x2000050c
 8002edc:	40000800 	.word	0x40000800

08002ee0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee6:	f107 0320 	add.w	r3, r7, #32
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f04:	4a20      	ldr	r2, [pc, #128]	; (8002f88 <MX_TIM5_Init+0xa8>)
 8002f06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f0a:	2253      	movs	r2, #83	; 0x53
 8002f0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002f28:	4816      	ldr	r0, [pc, #88]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f2a:	f002 ff59 	bl	8005de0 <HAL_TIM_OC_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002f34:	f000 f988 	bl	8003248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f40:	f107 0320 	add.w	r3, r7, #32
 8002f44:	4619      	mov	r1, r3
 8002f46:	480f      	ldr	r0, [pc, #60]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f48:	f003 fde4 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002f52:	f000 f979 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <MX_TIM5_Init+0xa4>)
 8002f6e:	f003 fa15 	bl	800639c <HAL_TIM_OC_ConfigChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002f78:	f000 f966 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000554 	.word	0x20000554
 8002f88:	40000c00 	.word	0x40000c00

08002f8c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	615a      	str	r2, [r3, #20]
 8002fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <MX_TIM13_Init+0x90>)
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <MX_TIM13_Init+0x94>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 839;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_TIM13_Init+0x90>)
 8002fac:	f240 3247 	movw	r2, #839	; 0x347
 8002fb0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <MX_TIM13_Init+0x90>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4999;
 8002fb8:	4b18      	ldr	r3, [pc, #96]	; (800301c <MX_TIM13_Init+0x90>)
 8002fba:	f241 3287 	movw	r2, #4999	; 0x1387
 8002fbe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <MX_TIM13_Init+0x90>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <MX_TIM13_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002fcc:	4813      	ldr	r0, [pc, #76]	; (800301c <MX_TIM13_Init+0x90>)
 8002fce:	f002 fe47 	bl	8005c60 <HAL_TIM_Base_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002fd8:	f000 f936 	bl	8003248 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8002fdc:	480f      	ldr	r0, [pc, #60]	; (800301c <MX_TIM13_Init+0x90>)
 8002fde:	f002 feff 	bl	8005de0 <HAL_TIM_OC_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002fe8:	f000 f92e 	bl	8003248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002fec:	2300      	movs	r3, #0
 8002fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	2200      	movs	r2, #0
 8003000:	4619      	mov	r1, r3
 8003002:	4806      	ldr	r0, [pc, #24]	; (800301c <MX_TIM13_Init+0x90>)
 8003004:	f003 f9ca 	bl	800639c <HAL_TIM_OC_ConfigChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 800300e:	f000 f91b 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003012:	bf00      	nop
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000059c 	.word	0x2000059c
 8003020:	40001c00 	.word	0x40001c00

08003024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	615a      	str	r2, [r3, #20]
 800303c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
 800304c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800304e:	2010      	movs	r0, #16
 8003050:	f7ff fd10 	bl	8002a74 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003054:	2001      	movs	r0, #1
 8003056:	f7ff fcdd 	bl	8002a14 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800305a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800305e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003060:	2302      	movs	r3, #2
 8003062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003070:	2307      	movs	r3, #7
 8003072:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4818      	ldr	r0, [pc, #96]	; (80030dc <MX_USART1_UART_Init+0xb8>)
 800307a:	f003 fee0 	bl	8006e3e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800307e:	f7ff fc19 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8003082:	4603      	mov	r3, r0
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fc69 	bl	8002960 <NVIC_EncodePriority>
 800308e:	4603      	mov	r3, r0
 8003090:	4619      	mov	r1, r3
 8003092:	2025      	movs	r0, #37	; 0x25
 8003094:	f7ff fc3a 	bl	800290c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003098:	2025      	movs	r0, #37	; 0x25
 800309a:	f7ff fc19 	bl	80028d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800309e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030a2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80030b0:	230c      	movs	r3, #12
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80030b8:	2300      	movs	r3, #0
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	4807      	ldr	r0, [pc, #28]	; (80030e0 <MX_USART1_UART_Init+0xbc>)
 80030c4:	f004 face 	bl	8007664 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_USART1_UART_Init+0xbc>)
 80030ca:	f7ff fc8c 	bl	80029e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80030ce:	4804      	ldr	r0, [pc, #16]	; (80030e0 <MX_USART1_UART_Init+0xbc>)
 80030d0:	f7ff fc79 	bl	80029c6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3738      	adds	r7, #56	; 0x38
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40020000 	.word	0x40020000
 80030e0:	40011000 	.word	0x40011000

080030e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	615a      	str	r2, [r3, #20]
 80030fc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
 800310c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800310e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003112:	f7ff fc97 	bl	8002a44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003116:	2002      	movs	r0, #2
 8003118:	f7ff fc7c 	bl	8002a14 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800311c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003122:	2302      	movs	r3, #2
 8003124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003132:	2307      	movs	r3, #7
 8003134:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4819      	ldr	r0, [pc, #100]	; (80031a0 <MX_USART3_UART_Init+0xbc>)
 800313c:	f003 fe7f 	bl	8006e3e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003140:	f7ff fbb8 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8003144:	4603      	mov	r3, r0
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc08 	bl	8002960 <NVIC_EncodePriority>
 8003150:	4603      	mov	r3, r0
 8003152:	4619      	mov	r1, r3
 8003154:	2027      	movs	r0, #39	; 0x27
 8003156:	f7ff fbd9 	bl	800290c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800315a:	2027      	movs	r0, #39	; 0x27
 800315c:	f7ff fbb8 	bl	80028d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003160:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003164:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8003172:	2304      	movs	r3, #4
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <MX_USART3_UART_Init+0xc0>)
 8003186:	f004 fa6d 	bl	8007664 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800318a:	4806      	ldr	r0, [pc, #24]	; (80031a4 <MX_USART3_UART_Init+0xc0>)
 800318c:	f7ff fc2b 	bl	80029e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003190:	4804      	ldr	r0, [pc, #16]	; (80031a4 <MX_USART3_UART_Init+0xc0>)
 8003192:	f7ff fc18 	bl	80029c6 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003196:	bf00      	nop
 8003198:	3738      	adds	r7, #56	; 0x38
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40004800 	.word	0x40004800

080031a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <MX_GPIO_Init+0x98>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <MX_GPIO_Init+0x98>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <MX_GPIO_Init+0x98>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <MX_GPIO_Init+0x98>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <MX_GPIO_Init+0x98>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <MX_GPIO_Init+0x98>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <MX_GPIO_Init+0x98>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <MX_GPIO_Init+0x98>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <MX_GPIO_Init+0x98>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003212:	2200      	movs	r2, #0
 8003214:	2110      	movs	r1, #16
 8003216:	480b      	ldr	r0, [pc, #44]	; (8003244 <MX_GPIO_Init+0x9c>)
 8003218:	f001 faee 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800321c:	2310      	movs	r3, #16
 800321e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003220:	2301      	movs	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003228:	2303      	movs	r3, #3
 800322a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4619      	mov	r1, r3
 8003232:	4804      	ldr	r0, [pc, #16]	; (8003244 <MX_GPIO_Init+0x9c>)
 8003234:	f001 f944 	bl	80044c0 <HAL_GPIO_Init>

}
 8003238:	bf00      	nop
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000

08003248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800324c:	b672      	cpsid	i
}
 800324e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003250:	e7fe      	b.n	8003250 <Error_Handler+0x8>

08003252 <_write>:
 *
 *  Created on: Apr 28, 2023
 *      Author: akswnd98
 */

int _write (int fd, char *buf, int len) {
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  uart_transmit_it(1, buf, len);
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	2001      	movs	r0, #1
 8003264:	f000 fe98 	bl	8003f98 <uart_transmit_it>
  return len;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <read_mpu>:
#include "dynamics.h"
#include "stm32f4xx_hal.h"

#define _USE_MATH_DEFINES

void read_mpu (uint8_t addr, uint8_t *data, uint8_t len) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
 8003280:	4613      	mov	r3, r2
 8003282:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x80 | addr;
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800328a:	b2db      	uxtb	r3, r3
 800328c:	73fb      	strb	r3, [r7, #15]
  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800328e:	bf00      	nop
 8003290:	4810      	ldr	r0, [pc, #64]	; (80032d4 <read_mpu+0x60>)
 8003292:	f002 fba7 	bl	80059e4 <HAL_SPI_GetState>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d1f9      	bne.n	8003290 <read_mpu+0x1c>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800329c:	2200      	movs	r2, #0
 800329e:	2110      	movs	r1, #16
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <read_mpu+0x64>)
 80032a2:	f001 faa9 	bl	80047f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &tmp, 1, 100);
 80032a6:	f107 010f 	add.w	r1, r7, #15
 80032aa:	2364      	movs	r3, #100	; 0x64
 80032ac:	2201      	movs	r2, #1
 80032ae:	4809      	ldr	r0, [pc, #36]	; (80032d4 <read_mpu+0x60>)
 80032b0:	f001 ffa9 	bl	8005206 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, data, len, 100);
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	2364      	movs	r3, #100	; 0x64
 80032ba:	6839      	ldr	r1, [r7, #0]
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <read_mpu+0x60>)
 80032be:	f002 f8de 	bl	800547e <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80032c2:	2201      	movs	r2, #1
 80032c4:	2110      	movs	r1, #16
 80032c6:	4804      	ldr	r0, [pc, #16]	; (80032d8 <read_mpu+0x64>)
 80032c8:	f001 fa96 	bl	80047f8 <HAL_GPIO_WritePin>
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000424 	.word	0x20000424
 80032d8:	40020000 	.word	0x40020000

080032dc <write_mpu>:

void write_mpu (uint8_t addr, uint8_t *data) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80032e8:	bf00      	nop
 80032ea:	4810      	ldr	r0, [pc, #64]	; (800332c <write_mpu+0x50>)
 80032ec:	f002 fb7a 	bl	80059e4 <HAL_SPI_GetState>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d1f9      	bne.n	80032ea <write_mpu+0xe>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2110      	movs	r1, #16
 80032fa:	480d      	ldr	r0, [pc, #52]	; (8003330 <write_mpu+0x54>)
 80032fc:	f001 fa7c 	bl	80047f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8003300:	1df9      	adds	r1, r7, #7
 8003302:	2364      	movs	r3, #100	; 0x64
 8003304:	2201      	movs	r2, #1
 8003306:	4809      	ldr	r0, [pc, #36]	; (800332c <write_mpu+0x50>)
 8003308:	f001 ff7d 	bl	8005206 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, 1, 100);
 800330c:	2364      	movs	r3, #100	; 0x64
 800330e:	2201      	movs	r2, #1
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	4806      	ldr	r0, [pc, #24]	; (800332c <write_mpu+0x50>)
 8003314:	f001 ff77 	bl	8005206 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003318:	2201      	movs	r2, #1
 800331a:	2110      	movs	r1, #16
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <write_mpu+0x54>)
 800331e:	f001 fa6b 	bl	80047f8 <HAL_GPIO_WritePin>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000424 	.word	0x20000424
 8003330:	40020000 	.word	0x40020000

08003334 <init_mpu>:

void init_mpu () {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  int delay_time = 100;
 800333a:	2364      	movs	r3, #100	; 0x64
 800333c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800333e:	2201      	movs	r2, #1
 8003340:	2110      	movs	r1, #16
 8003342:	4834      	ldr	r0, [pc, #208]	; (8003414 <init_mpu+0xe0>)
 8003344:	f001 fa58 	bl	80047f8 <HAL_GPIO_WritePin>
  HAL_Delay(delay_time);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	f000 ff82 	bl	8004254 <HAL_Delay>

  uint8_t tx_val = 0x00;
 8003350:	2300      	movs	r3, #0
 8003352:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_val;

  read_mpu(0x75, &rx_val, 1);
 8003354:	1cbb      	adds	r3, r7, #2
 8003356:	2201      	movs	r2, #1
 8003358:	4619      	mov	r1, r3
 800335a:	2075      	movs	r0, #117	; 0x75
 800335c:	f7ff ff8a 	bl	8003274 <read_mpu>

  tx_val = 0x80;
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x6B, &tx_val);
 8003364:	1cfb      	adds	r3, r7, #3
 8003366:	4619      	mov	r1, r3
 8003368:	206b      	movs	r0, #107	; 0x6b
 800336a:	f7ff ffb7 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ff6f 	bl	8004254 <HAL_Delay>

  tx_val = 0x01;
 8003376:	2301      	movs	r3, #1
 8003378:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x6B, &tx_val);
 800337a:	1cfb      	adds	r3, r7, #3
 800337c:	4619      	mov	r1, r3
 800337e:	206b      	movs	r0, #107	; 0x6b
 8003380:	f7ff ffac 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff64 	bl	8004254 <HAL_Delay>

  tx_val = 0x00;
 800338c:	2300      	movs	r3, #0
 800338e:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x19, &tx_val);
 8003390:	1cfb      	adds	r3, r7, #3
 8003392:	4619      	mov	r1, r3
 8003394:	2019      	movs	r0, #25
 8003396:	f7ff ffa1 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	f000 ff59 	bl	8004254 <HAL_Delay>

  tx_val = 0x05;
 80033a2:	2305      	movs	r3, #5
 80033a4:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x1a, &tx_val);
 80033a6:	1cfb      	adds	r3, r7, #3
 80033a8:	4619      	mov	r1, r3
 80033aa:	201a      	movs	r0, #26
 80033ac:	f7ff ff96 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 ff4e 	bl	8004254 <HAL_Delay>

  tx_val = 0x03;
 80033b8:	2303      	movs	r3, #3
 80033ba:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x1d, &tx_val);
 80033bc:	1cfb      	adds	r3, r7, #3
 80033be:	4619      	mov	r1, r3
 80033c0:	201d      	movs	r0, #29
 80033c2:	f7ff ff8b 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 ff43 	bl	8004254 <HAL_Delay>

  tx_val = 0x10; // +- 1000dps
 80033ce:	2310      	movs	r3, #16
 80033d0:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x6A, &tx_val);
 80033d2:	1cfb      	adds	r3, r7, #3
 80033d4:	4619      	mov	r1, r3
 80033d6:	206a      	movs	r0, #106	; 0x6a
 80033d8:	f7ff ff80 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 ff38 	bl	8004254 <HAL_Delay>

  tx_val = 0x08; // +- 4g
 80033e4:	2308      	movs	r3, #8
 80033e6:	70fb      	strb	r3, [r7, #3]
  write_mpu(0x1B, &tx_val);
 80033e8:	1cfb      	adds	r3, r7, #3
 80033ea:	4619      	mov	r1, r3
 80033ec:	201b      	movs	r0, #27
 80033ee:	f7ff ff75 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff2d 	bl	8004254 <HAL_Delay>

  write_mpu(0x1C, &tx_val);
 80033fa:	1cfb      	adds	r3, r7, #3
 80033fc:	4619      	mov	r1, r3
 80033fe:	201c      	movs	r0, #28
 8003400:	f7ff ff6c 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 ff24 	bl	8004254 <HAL_Delay>
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40020000 	.word	0x40020000

08003418 <calibrate_mpu>:

void calibrate_mpu () {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  int delay_time = 100;
 800341e:	2364      	movs	r3, #100	; 0x64
 8003420:	607b      	str	r3, [r7, #4]

  write_mpu(0x13, ((uint8_t *)&gyro_y_offset) + 1);
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <calibrate_mpu+0x78>)
 8003424:	4619      	mov	r1, r3
 8003426:	2013      	movs	r0, #19
 8003428:	f7ff ff58 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 ff10 	bl	8004254 <HAL_Delay>

  write_mpu(0x14, (uint8_t *)&gyro_y_offset);
 8003434:	4917      	ldr	r1, [pc, #92]	; (8003494 <calibrate_mpu+0x7c>)
 8003436:	2014      	movs	r0, #20
 8003438:	f7ff ff50 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 ff08 	bl	8004254 <HAL_Delay>

  write_mpu(0x15, ((uint8_t *)&gyro_x_offset) + 1);
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <calibrate_mpu+0x80>)
 8003446:	4619      	mov	r1, r3
 8003448:	2015      	movs	r0, #21
 800344a:	f7ff ff47 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 feff 	bl	8004254 <HAL_Delay>

  write_mpu(0x16, (uint8_t *)&gyro_x_offset);
 8003456:	4911      	ldr	r1, [pc, #68]	; (800349c <calibrate_mpu+0x84>)
 8003458:	2016      	movs	r0, #22
 800345a:	f7ff ff3f 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fef7 	bl	8004254 <HAL_Delay>

  write_mpu(0x17, ((uint8_t *)&gyro_z_offset) + 1);
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <calibrate_mpu+0x88>)
 8003468:	4619      	mov	r1, r3
 800346a:	2017      	movs	r0, #23
 800346c:	f7ff ff36 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 feee 	bl	8004254 <HAL_Delay>

  write_mpu(0x18, (uint8_t *)&gyro_z_offset);
 8003478:	490a      	ldr	r1, [pc, #40]	; (80034a4 <calibrate_mpu+0x8c>)
 800347a:	2018      	movs	r0, #24
 800347c:	f7ff ff2e 	bl	80032dc <write_mpu>
  HAL_Delay(delay_time);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fee6 	bl	8004254 <HAL_Delay>
  write_mpu(0x7b, ((uint8_t *)&acc_z_offset) + 1);
  HAL_Delay(delay_time);

  write_mpu(0x7c, (uint8_t *)&acc_z_offset);
  HAL_Delay(delay_time); */
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200000ab 	.word	0x200000ab
 8003494:	200000aa 	.word	0x200000aa
 8003498:	200000a9 	.word	0x200000a9
 800349c:	200000a8 	.word	0x200000a8
 80034a0:	200000ad 	.word	0x200000ad
 80034a4:	200000ac 	.word	0x200000ac

080034a8 <read_mpu_sensor>:
  acc_x_offset = -(int16_t)(((uint16_t)acc_offset[2] << 8) | (uint16_t)acc_offset[3]);
  acc_y_offset = -(int16_t)(((uint16_t)acc_offset[0] << 8) | (uint16_t)acc_offset[1]);
  acc_z_offset = (int16_t)(((uint16_t)acc_offset[4] << 8) | (uint16_t)acc_offset[5]);
}

void read_mpu_sensor () {
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  read_mpu(0x3B, mpu_buf, 14);
 80034ac:	220e      	movs	r2, #14
 80034ae:	49bc      	ldr	r1, [pc, #752]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80034b0:	203b      	movs	r0, #59	; 0x3b
 80034b2:	f7ff fedf 	bl	8003274 <read_mpu>

  raw_acc_x_sensor = -(int16_t)(((uint16_t)mpu_buf[2] << 8) | (uint16_t)mpu_buf[3]);
 80034b6:	4bba      	ldr	r3, [pc, #744]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	b21a      	sxth	r2, r3
 80034be:	4bb8      	ldr	r3, [pc, #736]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80034c0:	78db      	ldrb	r3, [r3, #3]
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	425b      	negs	r3, r3
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b21a      	sxth	r2, r3
 80034d0:	4bb4      	ldr	r3, [pc, #720]	; (80037a4 <read_mpu_sensor+0x2fc>)
 80034d2:	801a      	strh	r2, [r3, #0]
  acc_x_sensor = (float)raw_acc_x_sensor;
 80034d4:	4bb3      	ldr	r3, [pc, #716]	; (80037a4 <read_mpu_sensor+0x2fc>)
 80034d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e2:	4bb1      	ldr	r3, [pc, #708]	; (80037a8 <read_mpu_sensor+0x300>)
 80034e4:	edc3 7a00 	vstr	s15, [r3]
  acc_x_sensor = acc_x_sensor / 32767.0 * 4.0 * g;
 80034e8:	4baf      	ldr	r3, [pc, #700]	; (80037a8 <read_mpu_sensor+0x300>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f82b 	bl	8000548 <__aeabi_f2d>
 80034f2:	a3a7      	add	r3, pc, #668	; (adr r3, 8003790 <read_mpu_sensor+0x2e8>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fd f9a8 	bl	800084c <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	4ba8      	ldr	r3, [pc, #672]	; (80037ac <read_mpu_sensor+0x304>)
 800350a:	f7fd f875 	bl	80005f8 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4614      	mov	r4, r2
 8003514:	461d      	mov	r5, r3
 8003516:	4ba6      	ldr	r3, [pc, #664]	; (80037b0 <read_mpu_sensor+0x308>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd f814 	bl	8000548 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fd f866 	bl	80005f8 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb38 	bl	8000ba8 <__aeabi_d2f>
 8003538:	4603      	mov	r3, r0
 800353a:	4a9b      	ldr	r2, [pc, #620]	; (80037a8 <read_mpu_sensor+0x300>)
 800353c:	6013      	str	r3, [r2, #0]

  raw_acc_y_sensor = -(int16_t)(((uint16_t)mpu_buf[0] << 8) | (uint16_t)mpu_buf[1]);
 800353e:	4b98      	ldr	r3, [pc, #608]	; (80037a0 <read_mpu_sensor+0x2f8>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	b21a      	sxth	r2, r3
 8003546:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <read_mpu_sensor+0x2f8>)
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	b21b      	sxth	r3, r3
 800354c:	4313      	orrs	r3, r2
 800354e:	b21b      	sxth	r3, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	425b      	negs	r3, r3
 8003554:	b29b      	uxth	r3, r3
 8003556:	b21a      	sxth	r2, r3
 8003558:	4b96      	ldr	r3, [pc, #600]	; (80037b4 <read_mpu_sensor+0x30c>)
 800355a:	801a      	strh	r2, [r3, #0]
  acc_y_sensor = (float)raw_acc_y_sensor;
 800355c:	4b95      	ldr	r3, [pc, #596]	; (80037b4 <read_mpu_sensor+0x30c>)
 800355e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356a:	4b93      	ldr	r3, [pc, #588]	; (80037b8 <read_mpu_sensor+0x310>)
 800356c:	edc3 7a00 	vstr	s15, [r3]
  acc_y_sensor = acc_y_sensor / 32767.0 * 4.0 * g;
 8003570:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <read_mpu_sensor+0x310>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc ffe7 	bl	8000548 <__aeabi_f2d>
 800357a:	a385      	add	r3, pc, #532	; (adr r3, 8003790 <read_mpu_sensor+0x2e8>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd f964 	bl	800084c <__aeabi_ddiv>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	4b86      	ldr	r3, [pc, #536]	; (80037ac <read_mpu_sensor+0x304>)
 8003592:	f7fd f831 	bl	80005f8 <__aeabi_dmul>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4614      	mov	r4, r2
 800359c:	461d      	mov	r5, r3
 800359e:	4b84      	ldr	r3, [pc, #528]	; (80037b0 <read_mpu_sensor+0x308>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc ffd0 	bl	8000548 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fd f822 	bl	80005f8 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fd faf4 	bl	8000ba8 <__aeabi_d2f>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <read_mpu_sensor+0x310>)
 80035c4:	6013      	str	r3, [r2, #0]

  raw_acc_z_sensor = (int16_t)(((uint16_t)mpu_buf[4] << 8) | (uint16_t)mpu_buf[5]);
 80035c6:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80035d0:	795b      	ldrb	r3, [r3, #5]
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	4b78      	ldr	r3, [pc, #480]	; (80037bc <read_mpu_sensor+0x314>)
 80035da:	801a      	strh	r2, [r3, #0]
  acc_z_sensor = (float)raw_acc_z_sensor;
 80035dc:	4b77      	ldr	r3, [pc, #476]	; (80037bc <read_mpu_sensor+0x314>)
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ea:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <read_mpu_sensor+0x318>)
 80035ec:	edc3 7a00 	vstr	s15, [r3]
  acc_z_sensor = acc_z_sensor / 32767.0 * 4.0 * g;
 80035f0:	4b73      	ldr	r3, [pc, #460]	; (80037c0 <read_mpu_sensor+0x318>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffa7 	bl	8000548 <__aeabi_f2d>
 80035fa:	a365      	add	r3, pc, #404	; (adr r3, 8003790 <read_mpu_sensor+0x2e8>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fd f924 	bl	800084c <__aeabi_ddiv>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	4b66      	ldr	r3, [pc, #408]	; (80037ac <read_mpu_sensor+0x304>)
 8003612:	f7fc fff1 	bl	80005f8 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4614      	mov	r4, r2
 800361c:	461d      	mov	r5, r3
 800361e:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <read_mpu_sensor+0x308>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ff90 	bl	8000548 <__aeabi_f2d>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4620      	mov	r0, r4
 800362e:	4629      	mov	r1, r5
 8003630:	f7fc ffe2 	bl	80005f8 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	f7fd fab4 	bl	8000ba8 <__aeabi_d2f>
 8003640:	4603      	mov	r3, r0
 8003642:	4a5f      	ldr	r2, [pc, #380]	; (80037c0 <read_mpu_sensor+0x318>)
 8003644:	6013      	str	r3, [r2, #0]

  raw_gyro_x_sensor = (int16_t)(((uint16_t)mpu_buf[10] << 8) | (uint16_t)mpu_buf[11]);
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <read_mpu_sensor+0x2f8>)
 8003648:	7a9b      	ldrb	r3, [r3, #10]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	b21a      	sxth	r2, r3
 800364e:	4b54      	ldr	r3, [pc, #336]	; (80037a0 <read_mpu_sensor+0x2f8>)
 8003650:	7adb      	ldrb	r3, [r3, #11]
 8003652:	b21b      	sxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b21a      	sxth	r2, r3
 8003658:	4b5a      	ldr	r3, [pc, #360]	; (80037c4 <read_mpu_sensor+0x31c>)
 800365a:	801a      	strh	r2, [r3, #0]
  gyro_x_sensor = (float)raw_gyro_x_sensor;
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <read_mpu_sensor+0x31c>)
 800365e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <read_mpu_sensor+0x320>)
 800366c:	edc3 7a00 	vstr	s15, [r3]
  gyro_x_sensor = gyro_x_sensor / 32767.0 * 1000.0 * M_PI / 180.0;
 8003670:	4b55      	ldr	r3, [pc, #340]	; (80037c8 <read_mpu_sensor+0x320>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc ff67 	bl	8000548 <__aeabi_f2d>
 800367a:	a345      	add	r3, pc, #276	; (adr r3, 8003790 <read_mpu_sensor+0x2e8>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fd f8e4 	bl	800084c <__aeabi_ddiv>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	4b4e      	ldr	r3, [pc, #312]	; (80037cc <read_mpu_sensor+0x324>)
 8003692:	f7fc ffb1 	bl	80005f8 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	a33e      	add	r3, pc, #248	; (adr r3, 8003798 <read_mpu_sensor+0x2f0>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f7fc ffa8 	bl	80005f8 <__aeabi_dmul>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <read_mpu_sensor+0x328>)
 80036b6:	f7fd f8c9 	bl	800084c <__aeabi_ddiv>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f7fd fa71 	bl	8000ba8 <__aeabi_d2f>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4a3f      	ldr	r2, [pc, #252]	; (80037c8 <read_mpu_sensor+0x320>)
 80036ca:	6013      	str	r3, [r2, #0]

  raw_gyro_y_sensor = (int16_t)(((uint16_t)mpu_buf[8] << 8) | (uint16_t)mpu_buf[9]);
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80036ce:	7a1b      	ldrb	r3, [r3, #8]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	b21a      	sxth	r2, r3
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <read_mpu_sensor+0x2f8>)
 80036d6:	7a5b      	ldrb	r3, [r3, #9]
 80036d8:	b21b      	sxth	r3, r3
 80036da:	4313      	orrs	r3, r2
 80036dc:	b21a      	sxth	r2, r3
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <read_mpu_sensor+0x32c>)
 80036e0:	801a      	strh	r2, [r3, #0]
  gyro_y_sensor = (float)raw_gyro_y_sensor;
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <read_mpu_sensor+0x32c>)
 80036e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <read_mpu_sensor+0x330>)
 80036f2:	edc3 7a00 	vstr	s15, [r3]
  gyro_y_sensor = gyro_y_sensor / 32767.0 * 1000.0 * M_PI / 180.0;
 80036f6:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <read_mpu_sensor+0x330>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff24 	bl	8000548 <__aeabi_f2d>
 8003700:	a323      	add	r3, pc, #140	; (adr r3, 8003790 <read_mpu_sensor+0x2e8>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fd f8a1 	bl	800084c <__aeabi_ddiv>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <read_mpu_sensor+0x324>)
 8003718:	f7fc ff6e 	bl	80005f8 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	a31c      	add	r3, pc, #112	; (adr r3, 8003798 <read_mpu_sensor+0x2f0>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fc ff65 	bl	80005f8 <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <read_mpu_sensor+0x328>)
 800373c:	f7fd f886 	bl	800084c <__aeabi_ddiv>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	f7fd fa2e 	bl	8000ba8 <__aeabi_d2f>
 800374c:	4603      	mov	r3, r0
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <read_mpu_sensor+0x330>)
 8003750:	6013      	str	r3, [r2, #0]

  raw_gyro_z_sensor = -(int16_t)(((uint16_t)mpu_buf[12] << 8) | (uint16_t)mpu_buf[13]);
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <read_mpu_sensor+0x2f8>)
 8003754:	7b1b      	ldrb	r3, [r3, #12]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	b21a      	sxth	r2, r3
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <read_mpu_sensor+0x2f8>)
 800375c:	7b5b      	ldrb	r3, [r3, #13]
 800375e:	b21b      	sxth	r3, r3
 8003760:	4313      	orrs	r3, r2
 8003762:	b21b      	sxth	r3, r3
 8003764:	b29b      	uxth	r3, r3
 8003766:	425b      	negs	r3, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	b21a      	sxth	r2, r3
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <read_mpu_sensor+0x334>)
 800376e:	801a      	strh	r2, [r3, #0]
  gyro_z_sensor = (float)raw_gyro_z_sensor;
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <read_mpu_sensor+0x334>)
 8003772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <read_mpu_sensor+0x338>)
 8003780:	edc3 7a00 	vstr	s15, [r3]
  gyro_z_sensor = gyro_z_sensor / 32767.0 * 1000.0 * M_PI / 180.0;
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <read_mpu_sensor+0x338>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	e02b      	b.n	80037e4 <read_mpu_sensor+0x33c>
 800378c:	f3af 8000 	nop.w
 8003790:	00000000 	.word	0x00000000
 8003794:	40dfffc0 	.word	0x40dfffc0
 8003798:	54442d18 	.word	0x54442d18
 800379c:	400921fb 	.word	0x400921fb
 80037a0:	200005e4 	.word	0x200005e4
 80037a4:	200005f2 	.word	0x200005f2
 80037a8:	20000600 	.word	0x20000600
 80037ac:	40100000 	.word	0x40100000
 80037b0:	20000000 	.word	0x20000000
 80037b4:	200005f4 	.word	0x200005f4
 80037b8:	20000604 	.word	0x20000604
 80037bc:	200005f6 	.word	0x200005f6
 80037c0:	20000608 	.word	0x20000608
 80037c4:	200005f8 	.word	0x200005f8
 80037c8:	2000060c 	.word	0x2000060c
 80037cc:	408f4000 	.word	0x408f4000
 80037d0:	40668000 	.word	0x40668000
 80037d4:	200005fa 	.word	0x200005fa
 80037d8:	20000610 	.word	0x20000610
 80037dc:	200005fc 	.word	0x200005fc
 80037e0:	20000614 	.word	0x20000614
 80037e4:	f7fc feb0 	bl	8000548 <__aeabi_f2d>
 80037e8:	a31a      	add	r3, pc, #104	; (adr r3, 8003854 <read_mpu_sensor+0x3ac>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f7fd f82d 	bl	800084c <__aeabi_ddiv>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <read_mpu_sensor+0x3a0>)
 8003800:	f7fc fefa 	bl	80005f8 <__aeabi_dmul>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	a30c      	add	r3, pc, #48	; (adr r3, 8003840 <read_mpu_sensor+0x398>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fef1 	bl	80005f8 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <read_mpu_sensor+0x3a4>)
 8003824:	f7fd f812 	bl	800084c <__aeabi_ddiv>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	f7fd f9ba 	bl	8000ba8 <__aeabi_d2f>
 8003834:	4603      	mov	r3, r0
 8003836:	4a06      	ldr	r2, [pc, #24]	; (8003850 <read_mpu_sensor+0x3a8>)
 8003838:	6013      	str	r3, [r2, #0]
}
 800383a:	bf00      	nop
 800383c:	bdb0      	pop	{r4, r5, r7, pc}
 800383e:	bf00      	nop
 8003840:	54442d18 	.word	0x54442d18
 8003844:	400921fb 	.word	0x400921fb
 8003848:	408f4000 	.word	0x408f4000
 800384c:	40668000 	.word	0x40668000
 8003850:	20000614 	.word	0x20000614
 8003854:	00000000 	.word	0x00000000
 8003858:	40dfffc0 	.word	0x40dfffc0

0800385c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_MspInit+0x4c>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <HAL_MspInit+0x4c>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <HAL_MspInit+0x4c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_MspInit+0x4c>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <HAL_MspInit+0x4c>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_MspInit+0x4c>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800

080038ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_SPI_MspInit+0x84>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d12b      	bne.n	8003926 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_SPI_MspInit+0x88>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_SPI_MspInit+0x88>)
 80038d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_SPI_MspInit+0x88>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_SPI_MspInit+0x88>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_SPI_MspInit+0x88>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_SPI_MspInit+0x88>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003906:	23e0      	movs	r3, #224	; 0xe0
 8003908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003916:	2305      	movs	r3, #5
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <HAL_SPI_MspInit+0x8c>)
 8003922:	f000 fdcd 	bl	80044c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003926:	bf00      	nop
 8003928:	3728      	adds	r7, #40	; 0x28
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40013000 	.word	0x40013000
 8003934:	40023800 	.word	0x40023800
 8003938:	40020000 	.word	0x40020000

0800393c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d10e      	bne.n	800396c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_TIM_PWM_MspInit+0x64>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_TIM_PWM_MspInit+0x64>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_TIM_PWM_MspInit+0x64>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800396a:	e012      	b.n	8003992 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <HAL_TIM_PWM_MspInit+0x68>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_TIM_PWM_MspInit+0x64>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_TIM_PWM_MspInit+0x64>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_TIM_PWM_MspInit+0x64>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40000400 	.word	0x40000400

080039a8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_TIM_OC_MspInit+0x80>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d116      	bne.n	80039e8 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_TIM_OC_MspInit+0x84>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_TIM_OC_MspInit+0x84>)
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <HAL_TIM_OC_MspInit+0x84>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	201e      	movs	r0, #30
 80039dc:	f000 fd39 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039e0:	201e      	movs	r0, #30
 80039e2:	f000 fd52 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80039e6:	e01a      	b.n	8003a1e <HAL_TIM_OC_MspInit+0x76>
  else if(htim_oc->Instance==TIM5)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <HAL_TIM_OC_MspInit+0x88>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d115      	bne.n	8003a1e <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <HAL_TIM_OC_MspInit+0x84>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <HAL_TIM_OC_MspInit+0x84>)
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_TIM_OC_MspInit+0x84>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2100      	movs	r1, #0
 8003a12:	2032      	movs	r0, #50	; 0x32
 8003a14:	f000 fd1d 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a18:	2032      	movs	r0, #50	; 0x32
 8003a1a:	f000 fd36 	bl	800448a <HAL_NVIC_EnableIRQ>
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40000c00 	.word	0x40000c00

08003a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_TIM_Base_MspInit+0x48>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d115      	bne.n	8003a72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_TIM_Base_MspInit+0x4c>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <HAL_TIM_Base_MspInit+0x4c>)
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	6413      	str	r3, [r2, #64]	; 0x40
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_TIM_Base_MspInit+0x4c>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	202c      	movs	r0, #44	; 0x2c
 8003a68:	f000 fcf3 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003a6c:	202c      	movs	r0, #44	; 0x2c
 8003a6e:	f000 fd0c 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40001c00 	.word	0x40001c00
 8003a80:	40023800 	.word	0x40023800

08003a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d11e      	bne.n	8003ae4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <HAL_TIM_MspPostInit+0xb0>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <HAL_TIM_MspPostInit+0xb0>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <HAL_TIM_MspPostInit+0xb0>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	4816      	ldr	r0, [pc, #88]	; (8003b38 <HAL_TIM_MspPostInit+0xb4>)
 8003ade:	f000 fcef 	bl	80044c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ae2:	e022      	b.n	8003b2a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIM_MspPostInit+0xb8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d11d      	bne.n	8003b2a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_TIM_MspPostInit+0xb0>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <HAL_TIM_MspPostInit+0xb0>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_TIM_MspPostInit+0xb0>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	4806      	ldr	r0, [pc, #24]	; (8003b40 <HAL_TIM_MspPostInit+0xbc>)
 8003b26:	f000 fccb 	bl	80044c0 <HAL_GPIO_Init>
}
 8003b2a:	bf00      	nop
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40020400 	.word	0x40020400

08003b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <NMI_Handler+0x4>

08003b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4e:	e7fe      	b.n	8003b4e <HardFault_Handler+0x4>

08003b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b54:	e7fe      	b.n	8003b54 <MemManage_Handler+0x4>

08003b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <BusFault_Handler+0x4>

08003b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b60:	e7fe      	b.n	8003b60 <UsageFault_Handler+0x4>

08003b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  tick_cnt++;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <SysTick_Handler+0x18>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <SysTick_Handler+0x18>)
 8003b98:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b9a:	f000 fb3b 	bl	8004214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000061c 	.word	0x2000061c

08003ba8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <TIM4_IRQHandler+0x10>)
 8003bae:	f002 faed 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000050c 	.word	0x2000050c

08003bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  handle_uart_tx_it(1);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f000 fa27 	bl	8004014 <handle_uart_tx_it>
  handle_uart1_rx_it();
 8003bc6:	f000 fa79 	bl	80040bc <handle_uart1_rx_it>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  handle_uart_tx_it(3);
 8003bd2:	2003      	movs	r0, #3
 8003bd4:	f000 fa1e 	bl	8004014 <handle_uart_tx_it>
  handle_uart3_rx_it();
 8003bd8:	f000 fa88 	bl	80040ec <handle_uart3_rx_it>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003be6:	f002 fad1 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000059c 	.word	0x2000059c

08003bf4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <TIM5_IRQHandler+0x10>)
 8003bfa:	f002 fac7 	bl	800618c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000554 	.word	0x20000554

08003c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_kill>:

int _kill(int pid, int sig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c22:	f003 fd9f 	bl	8007764 <__errno>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2216      	movs	r2, #22
 8003c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_exit>:

void _exit (int status)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffe7 	bl	8003c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c4a:	e7fe      	b.n	8003c4a <_exit+0x12>

08003c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	e00a      	b.n	8003c74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c5e:	f3af 8000 	nop.w
 8003c62:	4601      	mov	r1, r0
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	60ba      	str	r2, [r7, #8]
 8003c6a:	b2ca      	uxtb	r2, r1
 8003c6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	3301      	adds	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	dbf0      	blt.n	8003c5e <_read+0x12>
  }

  return len;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cae:	605a      	str	r2, [r3, #4]
  return 0;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <_isatty>:

int _isatty(int file)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cc6:	2301      	movs	r3, #1
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <_sbrk+0x5c>)
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <_sbrk+0x60>)
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <_sbrk+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <_sbrk+0x64>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <_sbrk+0x68>)
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d207      	bcs.n	8003d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d20:	f003 fd20 	bl	8007764 <__errno>
 8003d24:	4603      	mov	r3, r0
 8003d26:	220c      	movs	r2, #12
 8003d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e009      	b.n	8003d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <_sbrk+0x64>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <_sbrk+0x64>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <_sbrk+0x64>)
 8003d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20020000 	.word	0x20020000
 8003d50:	00000400 	.word	0x00000400
 8003d54:	20000618 	.word	0x20000618
 8003d58:	200015e8 	.word	0x200015e8

08003d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <SystemInit+0x20>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <SystemInit+0x20>)
 8003d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <start_esc_update_tim>:
 */

#include "main.h"
#include "timer.h"

void start_esc_update_tim () {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim4);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <start_esc_update_tim+0x10>)
 8003d86:	f001 ffbb 	bl	8005d00 <HAL_TIM_Base_Start_IT>
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000050c 	.word	0x2000050c

08003d94 <start_sensor_update_tim>:

void start_sensor_update_tim () {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim5);
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <start_sensor_update_tim+0x10>)
 8003d9a:	f001 ffb1 	bl	8005d00 <HAL_TIM_Base_Start_IT>
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000554 	.word	0x20000554

08003da8 <start_debug_values_tx_tim>:

void start_debug_values_tx_tim () {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim13);
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <start_debug_values_tx_tim+0x10>)
 8003dae:	f001 ffa7 	bl	8005d00 <HAL_TIM_Base_Start_IT>
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000059c 	.word	0x2000059c

08003dbc <HAL_TIM_PeriodElapsedCallback>:

uint8_t euler_state_update_plan = 0;
uint8_t esc_update_plan = 0;
uint8_t debug_values_tx_plan = 0;
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim4.Instance) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d103      	bne.n	8003dd8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    esc_update_plan = 1;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
  } else if (htim->Instance == htim5.Instance) {
    euler_state_update_plan = 1;
  } else if (htim->Instance == htim13.Instance) {
    debug_values_tx_plan = 1;
  }
}
 8003dd6:	e012      	b.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x42>
  } else if (htim->Instance == htim5.Instance) {
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d103      	bne.n	8003dec <HAL_TIM_PeriodElapsedCallback+0x30>
    euler_state_update_plan = 1;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
}
 8003dea:	e008      	b.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x42>
  } else if (htim->Instance == htim13.Instance) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d102      	bne.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x42>
    debug_values_tx_plan = 1;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	2000050c 	.word	0x2000050c
 8003e10:	20000621 	.word	0x20000621
 8003e14:	20000554 	.word	0x20000554
 8003e18:	20000620 	.word	0x20000620
 8003e1c:	2000059c 	.word	0x2000059c
 8003e20:	20000622 	.word	0x20000622

08003e24 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	330c      	adds	r3, #12
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	61ba      	str	r2, [r7, #24]
 8003e96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e7      	bne.n	8003e78 <LL_USART_EnableIT_RXNE+0x8>
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b089      	sub	sp, #36	; 0x24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	61ba      	str	r2, [r7, #24]
 8003edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e7      	bne.n	8003ebe <LL_USART_EnableIT_TXE+0x8>
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	3724      	adds	r7, #36	; 0x24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	330c      	adds	r3, #12
 8003f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	61ba      	str	r2, [r7, #24]
 8003f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e7      	bne.n	8003f04 <LL_USART_DisableIT_TXE+0x8>
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b2db      	uxtb	r3, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <init_uart>:
uint8_t uart_lock[4] = {0, };
uint8_t cur_transmit_cnt[4] = {0, };
uint8_t cur_transmit_len[4] = {0, };
uint8_t uart_transmit_buf[4][1000];

void init_uart () {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  LL_USART_EnableIT_RXNE(USART1);
 8003f80:	4803      	ldr	r0, [pc, #12]	; (8003f90 <init_uart+0x14>)
 8003f82:	f7ff ff75 	bl	8003e70 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8003f86:	4803      	ldr	r0, [pc, #12]	; (8003f94 <init_uart+0x18>)
 8003f88:	f7ff ff72 	bl	8003e70 <LL_USART_EnableIT_RXNE>
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40011000 	.word	0x40011000
 8003f94:	40004800 	.word	0x40004800

08003f98 <uart_transmit_it>:

void uart_transmit_it (int uart_num, uint8_t *buf, int len) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  if (!uart_lock[uart_num]) {
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <uart_transmit_it+0x68>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d123      	bne.n	8003ff8 <uart_transmit_it+0x60>
    uart_lock[uart_num] = 1;
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <uart_transmit_it+0x68>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
    memcpy(uart_transmit_buf[uart_num], buf, len);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <uart_transmit_it+0x6c>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f003 fbf3 	bl	80077b8 <memcpy>
    cur_transmit_cnt[uart_num] = 0;
 8003fd2:	4a0d      	ldr	r2, [pc, #52]	; (8004008 <uart_transmit_it+0x70>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
    cur_transmit_len[uart_num] = len;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	b2d9      	uxtb	r1, r3
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	; (800400c <uart_transmit_it+0x74>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	701a      	strb	r2, [r3, #0]
    LL_USART_EnableIT_TXE(uart_typedefs[uart_num]);
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <uart_transmit_it+0x78>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff5f 	bl	8003eb6 <LL_USART_EnableIT_TXE>
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000624 	.word	0x20000624
 8004004:	20000630 	.word	0x20000630
 8004008:	20000628 	.word	0x20000628
 800400c:	2000062c 	.word	0x2000062c
 8004010:	200000b4 	.word	0x200000b4

08004014 <handle_uart_tx_it>:

void handle_uart_tx_it (int uart_num) {
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_TXE(uart_typedefs[uart_num])) {
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <handle_uart_tx_it+0x94>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff10 	bl	8003e4a <LL_USART_IsActiveFlag_TXE>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d036      	beq.n	800409e <handle_uart_tx_it+0x8a>
    LL_USART_TransmitData8(uart_typedefs[uart_num], uart_transmit_buf[uart_num][cur_transmit_cnt[uart_num]]);
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <handle_uart_tx_it+0x94>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004038:	491c      	ldr	r1, [pc, #112]	; (80040ac <handle_uart_tx_it+0x98>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	440b      	add	r3, r1
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	461c      	mov	r4, r3
 8004042:	491b      	ldr	r1, [pc, #108]	; (80040b0 <handle_uart_tx_it+0x9c>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800404a:	fb00 f303 	mul.w	r3, r0, r3
 800404e:	440b      	add	r3, r1
 8004050:	4423      	add	r3, r4
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7ff ff80 	bl	8003f5c <LL_USART_TransmitData8>
    if (++cur_transmit_cnt[uart_num] >= cur_transmit_len[uart_num]) {
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <handle_uart_tx_it+0x98>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	b2d9      	uxtb	r1, r3
 8004068:	4a10      	ldr	r2, [pc, #64]	; (80040ac <handle_uart_tx_it+0x98>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	460a      	mov	r2, r1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <handle_uart_tx_it+0x98>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	490e      	ldr	r1, [pc, #56]	; (80040b4 <handle_uart_tx_it+0xa0>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	440b      	add	r3, r1
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d30b      	bcc.n	800409e <handle_uart_tx_it+0x8a>
      LL_USART_DisableIT_TXE(uart_typedefs[uart_num]);
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <handle_uart_tx_it+0x94>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff34 	bl	8003efc <LL_USART_DisableIT_TXE>
      uart_lock[uart_num] = 0;
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <handle_uart_tx_it+0xa4>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200000b4 	.word	0x200000b4
 80040ac:	20000628 	.word	0x20000628
 80040b0:	20000630 	.word	0x20000630
 80040b4:	2000062c 	.word	0x2000062c
 80040b8:	20000624 	.word	0x20000624

080040bc <handle_uart1_rx_it>:

void handle_uart1_rx_it () {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80040c2:	4809      	ldr	r0, [pc, #36]	; (80040e8 <handle_uart1_rx_it+0x2c>)
 80040c4:	f7ff feae 	bl	8003e24 <LL_USART_IsActiveFlag_RXNE>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <handle_uart1_rx_it+0x24>
    uint8_t rx_data = LL_USART_ReceiveData8(USART1);
 80040ce:	4806      	ldr	r0, [pc, #24]	; (80040e8 <handle_uart1_rx_it+0x2c>)
 80040d0:	f7ff ff37 	bl	8003f42 <LL_USART_ReceiveData8>
 80040d4:	4603      	mov	r3, r0
 80040d6:	71fb      	strb	r3, [r7, #7]
    process_gain_receive(rx_data);
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fa98 	bl	8002610 <process_gain_receive>
  }
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40011000 	.word	0x40011000

080040ec <handle_uart3_rx_it>:

void handle_uart3_rx_it () {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  if (LL_USART_IsActiveFlag_RXNE(USART3)) {
 80040f2:	4809      	ldr	r0, [pc, #36]	; (8004118 <handle_uart3_rx_it+0x2c>)
 80040f4:	f7ff fe96 	bl	8003e24 <LL_USART_IsActiveFlag_RXNE>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <handle_uart3_rx_it+0x24>
    uint8_t rx_data = LL_USART_ReceiveData8(USART3);
 80040fe:	4806      	ldr	r0, [pc, #24]	; (8004118 <handle_uart3_rx_it+0x2c>)
 8004100:	f7ff ff1f 	bl	8003f42 <LL_USART_ReceiveData8>
 8004104:	4603      	mov	r3, r0
 8004106:	71fb      	strb	r3, [r7, #7]
    process_control_receive(rx_data);
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc ff1e 	bl	8000f4c <process_control_receive>
  }
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40004800 	.word	0x40004800

0800411c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800411c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004120:	480d      	ldr	r0, [pc, #52]	; (8004158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004122:	490e      	ldr	r1, [pc, #56]	; (800415c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004128:	e002      	b.n	8004130 <LoopCopyDataInit>

0800412a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800412c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800412e:	3304      	adds	r3, #4

08004130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004134:	d3f9      	bcc.n	800412a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004138:	4c0b      	ldr	r4, [pc, #44]	; (8004168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800413c:	e001      	b.n	8004142 <LoopFillZerobss>

0800413e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800413e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004140:	3204      	adds	r2, #4

08004142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004144:	d3fb      	bcc.n	800413e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004146:	f7ff fe09 	bl	8003d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800414a:	f003 fb11 	bl	8007770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800414e:	f7fe fcdd 	bl	8002b0c <main>
  bx  lr    
 8004152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800415c:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8004160:	0800c2f0 	.word	0x0800c2f0
  ldr r2, =_sbss
 8004164:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8004168:	200015e4 	.word	0x200015e4

0800416c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800416c:	e7fe      	b.n	800416c <ADC_IRQHandler>
	...

08004170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_Init+0x40>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <HAL_Init+0x40>)
 800417a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800417e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_Init+0x40>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_Init+0x40>)
 8004186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800418a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800418c:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <HAL_Init+0x40>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <HAL_Init+0x40>)
 8004192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004198:	2003      	movs	r0, #3
 800419a:	f000 f94f 	bl	800443c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800419e:	2000      	movs	r0, #0
 80041a0:	f000 f808 	bl	80041b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a4:	f7ff fb5a 	bl	800385c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023c00 	.word	0x40023c00

080041b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_InitTick+0x54>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_InitTick+0x58>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f967 	bl	80044a6 <HAL_SYSTICK_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00e      	b.n	8004200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d80a      	bhi.n	80041fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e8:	2200      	movs	r2, #0
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	f000 f92f 	bl	8004452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f4:	4a06      	ldr	r2, [pc, #24]	; (8004210 <HAL_InitTick+0x5c>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200000b0 	.word	0x200000b0
 800420c:	200000c8 	.word	0x200000c8
 8004210:	200000c4 	.word	0x200000c4

08004214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_IncTick+0x20>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_IncTick+0x24>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4413      	add	r3, r2
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_IncTick+0x24>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200000c8 	.word	0x200000c8
 8004238:	200015d0 	.word	0x200015d0

0800423c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return uwTick;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_GetTick+0x14>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	200015d0 	.word	0x200015d0

08004254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7ff ffee 	bl	800423c <HAL_GetTick>
 8004260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d005      	beq.n	800427a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_Delay+0x44>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800427a:	bf00      	nop
 800427c:	f7ff ffde 	bl	800423c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	429a      	cmp	r2, r3
 800428a:	d8f7      	bhi.n	800427c <HAL_Delay+0x28>
  {
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200000c8 	.word	0x200000c8

0800429c <__NVIC_SetPriorityGrouping>:
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <__NVIC_SetPriorityGrouping+0x44>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <__NVIC_SetPriorityGrouping+0x44>)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	60d3      	str	r3, [r2, #12]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_GetPriorityGrouping>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <__NVIC_GetPriorityGrouping+0x18>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 0307 	and.w	r3, r3, #7
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <__NVIC_EnableIRQ>:
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	2b00      	cmp	r3, #0
 8004310:	db0b      	blt.n	800432a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	4907      	ldr	r1, [pc, #28]	; (8004338 <__NVIC_EnableIRQ+0x38>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2001      	movs	r0, #1
 8004322:	fa00 f202 	lsl.w	r2, r0, r2
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	e000e100 	.word	0xe000e100

0800433c <__NVIC_SetPriority>:
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db0a      	blt.n	8004366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	490c      	ldr	r1, [pc, #48]	; (8004388 <__NVIC_SetPriority+0x4c>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	440b      	add	r3, r1
 8004360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004364:	e00a      	b.n	800437c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4908      	ldr	r1, [pc, #32]	; (800438c <__NVIC_SetPriority+0x50>)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3b04      	subs	r3, #4
 8004374:	0112      	lsls	r2, r2, #4
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	440b      	add	r3, r1
 800437a:	761a      	strb	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	e000e100 	.word	0xe000e100
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <NVIC_EncodePriority>:
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f1c3 0307 	rsb	r3, r3, #7
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf28      	it	cs
 80043ae:	2304      	movcs	r3, #4
 80043b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d902      	bls.n	80043c0 <NVIC_EncodePriority+0x30>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3b03      	subs	r3, #3
 80043be:	e000      	b.n	80043c2 <NVIC_EncodePriority+0x32>
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43da      	mvns	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	401a      	ands	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d8:	f04f 31ff 	mov.w	r1, #4294967295
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43d9      	mvns	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e8:	4313      	orrs	r3, r2
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004408:	d301      	bcc.n	800440e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440a:	2301      	movs	r3, #1
 800440c:	e00f      	b.n	800442e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <SysTick_Config+0x40>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004416:	210f      	movs	r1, #15
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	f7ff ff8e 	bl	800433c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <SysTick_Config+0x40>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <SysTick_Config+0x40>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e010 	.word	0xe000e010

0800443c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff29 	bl	800429c <__NVIC_SetPriorityGrouping>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004464:	f7ff ff3e 	bl	80042e4 <__NVIC_GetPriorityGrouping>
 8004468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f7ff ff8e 	bl	8004390 <NVIC_EncodePriority>
 8004474:	4602      	mov	r2, r0
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff5d 	bl	800433c <__NVIC_SetPriority>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff31 	bl	8004300 <__NVIC_EnableIRQ>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ffa2 	bl	80043f8 <SysTick_Config>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e16b      	b.n	80047b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044dc:	2201      	movs	r2, #1
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	f040 815a 	bne.w	80047ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d005      	beq.n	8004512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450e:	2b02      	cmp	r3, #2
 8004510:	d130      	bne.n	8004574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 0201 	and.w	r2, r3, #1
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d017      	beq.n	80045b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	2203      	movs	r2, #3
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d123      	bne.n	8004604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	08da      	lsrs	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3208      	adds	r2, #8
 80045c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	220f      	movs	r2, #15
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	08da      	lsrs	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3208      	adds	r2, #8
 80045fe:	69b9      	ldr	r1, [r7, #24]
 8004600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0203 	and.w	r2, r3, #3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b4 	beq.w	80047ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b60      	ldr	r3, [pc, #384]	; (80047cc <HAL_GPIO_Init+0x30c>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	4a5f      	ldr	r2, [pc, #380]	; (80047cc <HAL_GPIO_Init+0x30c>)
 8004650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004654:	6453      	str	r3, [r2, #68]	; 0x44
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_GPIO_Init+0x30c>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004662:	4a5b      	ldr	r2, [pc, #364]	; (80047d0 <HAL_GPIO_Init+0x310>)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	3302      	adds	r3, #2
 800466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	220f      	movs	r2, #15
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_GPIO_Init+0x314>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d02b      	beq.n	80046e6 <HAL_GPIO_Init+0x226>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_GPIO_Init+0x318>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_Init+0x222>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a50      	ldr	r2, [pc, #320]	; (80047dc <HAL_GPIO_Init+0x31c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_Init+0x21e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4f      	ldr	r2, [pc, #316]	; (80047e0 <HAL_GPIO_Init+0x320>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_Init+0x21a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4e      	ldr	r2, [pc, #312]	; (80047e4 <HAL_GPIO_Init+0x324>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0x216>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4d      	ldr	r2, [pc, #308]	; (80047e8 <HAL_GPIO_Init+0x328>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_Init+0x212>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4c      	ldr	r2, [pc, #304]	; (80047ec <HAL_GPIO_Init+0x32c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x20e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_GPIO_Init+0x330>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_Init+0x20a>
 80046c6:	2307      	movs	r3, #7
 80046c8:	e00e      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046ca:	2308      	movs	r3, #8
 80046cc:	e00c      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046ce:	2306      	movs	r3, #6
 80046d0:	e00a      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046d2:	2305      	movs	r3, #5
 80046d4:	e008      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046d6:	2304      	movs	r3, #4
 80046d8:	e006      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046da:	2303      	movs	r3, #3
 80046dc:	e004      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046de:	2302      	movs	r3, #2
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046e6:	2300      	movs	r3, #0
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	f002 0203 	and.w	r2, r2, #3
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	4093      	lsls	r3, r2
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f8:	4935      	ldr	r1, [pc, #212]	; (80047d0 <HAL_GPIO_Init+0x310>)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3302      	adds	r3, #2
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800472a:	4a32      	ldr	r2, [pc, #200]	; (80047f4 <HAL_GPIO_Init+0x334>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004730:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_GPIO_Init+0x334>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a8:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <HAL_GPIO_Init+0x334>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	f67f ae90 	bls.w	80044dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40020400 	.word	0x40020400
 80047dc:	40020800 	.word	0x40020800
 80047e0:	40020c00 	.word	0x40020c00
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40021400 	.word	0x40021400
 80047ec:	40021800 	.word	0x40021800
 80047f0:	40021c00 	.word	0x40021c00
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
 8004804:	4613      	mov	r3, r2
 8004806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004808:	787b      	ldrb	r3, [r7, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004814:	e003      	b.n	800481e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e267      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d075      	beq.n	8004936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484a:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b04      	cmp	r3, #4
 8004854:	d00c      	beq.n	8004870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004856:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800485e:	2b08      	cmp	r3, #8
 8004860:	d112      	bne.n	8004888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004862:	4b82      	ldr	r3, [pc, #520]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486e:	d10b      	bne.n	8004888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004870:	4b7e      	ldr	r3, [pc, #504]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05b      	beq.n	8004934 <HAL_RCC_OscConfig+0x108>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d157      	bne.n	8004934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e242      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d106      	bne.n	80048a0 <HAL_RCC_OscConfig+0x74>
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a75      	ldr	r2, [pc, #468]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e01d      	b.n	80048dc <HAL_RCC_OscConfig+0xb0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x98>
 80048aa:	4b70      	ldr	r3, [pc, #448]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6f      	ldr	r2, [pc, #444]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6c      	ldr	r2, [pc, #432]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e00b      	b.n	80048dc <HAL_RCC_OscConfig+0xb0>
 80048c4:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a68      	ldr	r2, [pc, #416]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b66      	ldr	r3, [pc, #408]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a65      	ldr	r2, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80048d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d013      	beq.n	800490c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7ff fcaa 	bl	800423c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ec:	f7ff fca6 	bl	800423c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e207      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0xc0>
 800490a:	e014      	b.n	8004936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7ff fc96 	bl	800423c <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004914:	f7ff fc92 	bl	800423c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e1f3      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	4b51      	ldr	r3, [pc, #324]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0xe8>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d063      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494e:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004956:	2b08      	cmp	r3, #8
 8004958:	d11c      	bne.n	8004994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495a:	4b44      	ldr	r3, [pc, #272]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x152>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e1c7      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4937      	ldr	r1, [pc, #220]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	e03a      	b.n	8004a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499c:	4b34      	ldr	r3, [pc, #208]	; (8004a70 <HAL_RCC_OscConfig+0x244>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7ff fc4b 	bl	800423c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049aa:	f7ff fc47 	bl	800423c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1a8      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c8:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4925      	ldr	r1, [pc, #148]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	e015      	b.n	8004a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <HAL_RCC_OscConfig+0x244>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7ff fc2a 	bl	800423c <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ec:	f7ff fc26 	bl	800423c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e187      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d036      	beq.n	8004a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_RCC_OscConfig+0x248>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7ff fc0a 	bl	800423c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7ff fc06 	bl	800423c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e167      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_OscConfig+0x240>)
 8004a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x200>
 8004a4a:	e01b      	b.n	8004a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_RCC_OscConfig+0x248>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a52:	f7ff fbf3 	bl	800423c <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	e00e      	b.n	8004a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7ff fbef 	bl	800423c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d907      	bls.n	8004a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e150      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	42470000 	.word	0x42470000
 8004a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ea      	bne.n	8004a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8097 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a96:	4b81      	ldr	r3, [pc, #516]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	4b7d      	ldr	r3, [pc, #500]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	4a7c      	ldr	r2, [pc, #496]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab2:	4b7a      	ldr	r3, [pc, #488]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b77      	ldr	r3, [pc, #476]	; (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d118      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ace:	4b74      	ldr	r3, [pc, #464]	; (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a73      	ldr	r2, [pc, #460]	; (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ada:	f7ff fbaf 	bl	800423c <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae2:	f7ff fbab 	bl	800423c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e10c      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <HAL_RCC_OscConfig+0x474>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x2ea>
 8004b08:	4b64      	ldr	r3, [pc, #400]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a63      	ldr	r2, [pc, #396]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
 8004b14:	e01c      	b.n	8004b50 <HAL_RCC_OscConfig+0x324>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x30c>
 8004b1e:	4b5f      	ldr	r3, [pc, #380]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a5e      	ldr	r2, [pc, #376]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b24:	f043 0304 	orr.w	r3, r3, #4
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	4b5c      	ldr	r3, [pc, #368]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4a5b      	ldr	r2, [pc, #364]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6713      	str	r3, [r2, #112]	; 0x70
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0x324>
 8004b38:	4b58      	ldr	r3, [pc, #352]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a57      	ldr	r2, [pc, #348]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
 8004b44:	4b55      	ldr	r3, [pc, #340]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a54      	ldr	r2, [pc, #336]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f023 0304 	bic.w	r3, r3, #4
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7ff fb70 	bl	800423c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7ff fb6c 	bl	800423c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0cb      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	4b49      	ldr	r3, [pc, #292]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ee      	beq.n	8004b60 <HAL_RCC_OscConfig+0x334>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b84:	f7ff fb5a 	bl	800423c <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7ff fb56 	bl	800423c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0b5      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ee      	bne.n	8004b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	4a38      	ldr	r2, [pc, #224]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80a1 	beq.w	8004d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bca:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d05c      	beq.n	8004c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d141      	bne.n	8004c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <HAL_RCC_OscConfig+0x478>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7ff fb2a 	bl	800423c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7ff fb26 	bl	800423c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e087      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	491b      	ldr	r1, [pc, #108]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCC_OscConfig+0x478>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7ff faff 	bl	800423c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c42:	f7ff fafb 	bl	800423c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e05c      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x416>
 8004c60:	e054      	b.n	8004d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <HAL_RCC_OscConfig+0x478>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7ff fae8 	bl	800423c <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c70:	f7ff fae4 	bl	800423c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e045      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCC_OscConfig+0x470>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x444>
 8004c8e:	e03d      	b.n	8004d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e038      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <HAL_RCC_OscConfig+0x4ec>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d121      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d11a      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d111      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800

08004d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0cc      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d30:	4b68      	ldr	r3, [pc, #416]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90c      	bls.n	8004d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b65      	ldr	r3, [pc, #404]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b63      	ldr	r3, [pc, #396]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0b8      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d70:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a58      	ldr	r2, [pc, #352]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d88:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a52      	ldr	r2, [pc, #328]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	494d      	ldr	r1, [pc, #308]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d044      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d119      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e06f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e067      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfa:	4b37      	ldr	r3, [pc, #220]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4934      	ldr	r1, [pc, #208]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7ff fa16 	bl	800423c <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e14:	f7ff fa12 	bl	800423c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e04f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 020c 	and.w	r2, r3, #12
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d1eb      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d20c      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e032      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4916      	ldr	r1, [pc, #88]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	490e      	ldr	r1, [pc, #56]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ea2:	f000 f821 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	490a      	ldr	r1, [pc, #40]	; (8004edc <HAL_RCC_ClockConfig+0x1c0>)
 8004eb4:	5ccb      	ldrb	r3, [r1, r3]
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f976 	bl	80041b4 <HAL_InitTick>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023c00 	.word	0x40023c00
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	0800bcd0 	.word	0x0800bcd0
 8004ee0:	200000b0 	.word	0x200000b0
 8004ee4:	200000c4 	.word	0x200000c4

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b094      	sub	sp, #80	; 0x50
 8004eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef8:	2300      	movs	r3, #0
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f00:	4b79      	ldr	r3, [pc, #484]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x40>
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	f200 80e1 	bhi.w	80050d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x34>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1a:	e0db      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f1c:	4b73      	ldr	r3, [pc, #460]	; (80050ec <HAL_RCC_GetSysClockFreq+0x204>)
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f20:	e0db      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f22:	4b73      	ldr	r3, [pc, #460]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f26:	e0d8      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f28:	4b6f      	ldr	r3, [pc, #444]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f32:	4b6d      	ldr	r3, [pc, #436]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d063      	beq.n	8005006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3e:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	2200      	movs	r2, #0
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f50:	633b      	str	r3, [r7, #48]	; 0x30
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
 8004f56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	f04f 0000 	mov.w	r0, #0
 8004f62:	f04f 0100 	mov.w	r1, #0
 8004f66:	0159      	lsls	r1, r3, #5
 8004f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f6c:	0150      	lsls	r0, r2, #5
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4621      	mov	r1, r4
 8004f74:	1a51      	subs	r1, r2, r1
 8004f76:	6139      	str	r1, [r7, #16]
 8004f78:	4629      	mov	r1, r5
 8004f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	018b      	lsls	r3, r1, #6
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f96:	4651      	mov	r1, sl
 8004f98:	018a      	lsls	r2, r1, #6
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	eb63 0901 	sbc.w	r9, r3, r1
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fba:	4690      	mov	r8, r2
 8004fbc:	4699      	mov	r9, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	eb18 0303 	adds.w	r3, r8, r3
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	eb49 0303 	adc.w	r3, r9, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	024b      	lsls	r3, r1, #9
 8004fde:	4621      	mov	r1, r4
 8004fe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	024a      	lsls	r2, r1, #9
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fee:	2200      	movs	r2, #0
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ff8:	f7fb fe26 	bl	8000c48 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4613      	mov	r3, r2
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005004:	e058      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005006:	4b38      	ldr	r3, [pc, #224]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	099b      	lsrs	r3, r3, #6
 800500c:	2200      	movs	r2, #0
 800500e:	4618      	mov	r0, r3
 8005010:	4611      	mov	r1, r2
 8005012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
 800501c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	f04f 0000 	mov.w	r0, #0
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	0159      	lsls	r1, r3, #5
 800502e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005032:	0150      	lsls	r0, r2, #5
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4641      	mov	r1, r8
 800503a:	ebb2 0a01 	subs.w	sl, r2, r1
 800503e:	4649      	mov	r1, r9
 8005040:	eb63 0b01 	sbc.w	fp, r3, r1
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005058:	ebb2 040a 	subs.w	r4, r2, sl
 800505c:	eb63 050b 	sbc.w	r5, r3, fp
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	00eb      	lsls	r3, r5, #3
 800506a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506e:	00e2      	lsls	r2, r4, #3
 8005070:	4614      	mov	r4, r2
 8005072:	461d      	mov	r5, r3
 8005074:	4643      	mov	r3, r8
 8005076:	18e3      	adds	r3, r4, r3
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	464b      	mov	r3, r9
 800507c:	eb45 0303 	adc.w	r3, r5, r3
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800508e:	4629      	mov	r1, r5
 8005090:	028b      	lsls	r3, r1, #10
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005098:	4621      	mov	r1, r4
 800509a:	028a      	lsls	r2, r1, #10
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	2200      	movs	r2, #0
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	61fa      	str	r2, [r7, #28]
 80050a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ac:	f7fb fdcc 	bl	8000c48 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	3301      	adds	r3, #1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050d2:	e002      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetSysClockFreq+0x204>)
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3750      	adds	r7, #80	; 0x50
 80050e0:	46bd      	mov	sp, r7
 80050e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e07b      	b.n	80051fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005116:	d009      	beq.n	800512c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	61da      	str	r2, [r3, #28]
 800511e:	e005      	b.n	800512c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fe fbb0 	bl	80038ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005162:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	ea42 0103 	orr.w	r1, r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	f003 0104 	and.w	r1, r3, #4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0210 	and.w	r2, r3, #16
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_SPI_Transmit+0x22>
 8005224:	2302      	movs	r3, #2
 8005226:	e126      	b.n	8005476 <HAL_SPI_Transmit+0x270>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005230:	f7ff f804 	bl	800423c <HAL_GetTick>
 8005234:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d002      	beq.n	800524c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800524a:	e10b      	b.n	8005464 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_SPI_Transmit+0x52>
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800525c:	e102      	b.n	8005464 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2203      	movs	r2, #3
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d10f      	bne.n	80052c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d007      	beq.n	80052e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ec:	d14b      	bne.n	8005386 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_SPI_Transmit+0xf6>
 80052f6:	8afb      	ldrh	r3, [r7, #22]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d13e      	bne.n	800537a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	881a      	ldrh	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	1c9a      	adds	r2, r3, #2
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005320:	e02b      	b.n	800537a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d112      	bne.n	8005356 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	881a      	ldrh	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	1c9a      	adds	r2, r3, #2
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	86da      	strh	r2, [r3, #54]	; 0x36
 8005354:	e011      	b.n	800537a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005356:	f7fe ff71 	bl	800423c <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d803      	bhi.n	800536e <HAL_SPI_Transmit+0x168>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d102      	bne.n	8005374 <HAL_SPI_Transmit+0x16e>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005378:	e074      	b.n	8005464 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ce      	bne.n	8005322 <HAL_SPI_Transmit+0x11c>
 8005384:	e04c      	b.n	8005420 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_SPI_Transmit+0x18e>
 800538e:	8afb      	ldrh	r3, [r7, #22]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d140      	bne.n	8005416 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053ba:	e02c      	b.n	8005416 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d113      	bne.n	80053f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	7812      	ldrb	r2, [r2, #0]
 80053d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f0:	e011      	b.n	8005416 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f2:	f7fe ff23 	bl	800423c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d803      	bhi.n	800540a <HAL_SPI_Transmit+0x204>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d102      	bne.n	8005410 <HAL_SPI_Transmit+0x20a>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005414:	e026      	b.n	8005464 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1cd      	bne.n	80053bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fbd9 	bl	8005bdc <SPI_EndRxTxTransaction>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e000      	b.n	8005464 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005474:	7ffb      	ldrb	r3, [r7, #31]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b088      	sub	sp, #32
 8005482:	af02      	add	r7, sp, #8
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549a:	d112      	bne.n	80054c2 <HAL_SPI_Receive+0x44>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10e      	bne.n	80054c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2204      	movs	r2, #4
 80054a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f8f1 	bl	80056a0 <HAL_SPI_TransmitReceive>
 80054be:	4603      	mov	r3, r0
 80054c0:	e0ea      	b.n	8005698 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_SPI_Receive+0x52>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0e3      	b.n	8005698 <HAL_SPI_Receive+0x21a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d8:	f7fe feb0 	bl	800423c <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d002      	beq.n	80054f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
 80054ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054ee:	e0ca      	b.n	8005686 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_SPI_Receive+0x7e>
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005500:	e0c1      	b.n	8005686 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2204      	movs	r2, #4
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	88fa      	ldrh	r2, [r7, #6]
 800551a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005548:	d10f      	bne.n	800556a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d007      	beq.n	8005588 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005586:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d162      	bne.n	8005656 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005590:	e02e      	b.n	80055f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d115      	bne.n	80055cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f103 020c 	add.w	r2, r3, #12
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ca:	e011      	b.n	80055f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055cc:	f7fe fe36 	bl	800423c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d803      	bhi.n	80055e4 <HAL_SPI_Receive+0x166>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Receive+0x16c>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055ee:	e04a      	b.n	8005686 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1cb      	bne.n	8005592 <HAL_SPI_Receive+0x114>
 80055fa:	e031      	b.n	8005660 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d113      	bne.n	8005632 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	b292      	uxth	r2, r2
 8005616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005630:	e011      	b.n	8005656 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005632:	f7fe fe03 	bl	800423c <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d803      	bhi.n	800564a <HAL_SPI_Receive+0x1cc>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d102      	bne.n	8005650 <HAL_SPI_Receive+0x1d2>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005654:	e017      	b.n	8005686 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cd      	bne.n	80055fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fa53 	bl	8005b10 <SPI_EndRxTransaction>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
 8005682:	e000      	b.n	8005686 <HAL_SPI_Receive+0x208>
  }

error :
 8005684:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	; 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056ae:	2301      	movs	r3, #1
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x26>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e18a      	b.n	80059dc <HAL_SPI_TransmitReceive+0x33c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ce:	f7fe fdb5 	bl	800423c <HAL_GetTick>
 80056d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d00f      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x70>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f6:	d107      	bne.n	8005708 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <HAL_SPI_TransmitReceive+0x68>
 8005700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005704:	2b04      	cmp	r3, #4
 8005706:	d003      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005708:	2302      	movs	r3, #2
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800570e:	e15b      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x82>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x82>
 800571c:	887b      	ldrh	r3, [r7, #2]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005728:	e14e      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b04      	cmp	r3, #4
 8005734:	d003      	beq.n	800573e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2205      	movs	r2, #5
 800573a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	887a      	ldrh	r2, [r7, #2]
 800574e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	887a      	ldrh	r2, [r7, #2]
 8005754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	887a      	ldrh	r2, [r7, #2]
 8005766:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d007      	beq.n	8005792 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579a:	d178      	bne.n	800588e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_TransmitReceive+0x10a>
 80057a4:	8b7b      	ldrh	r3, [r7, #26]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d166      	bne.n	8005878 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	1c9a      	adds	r2, r3, #2
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ce:	e053      	b.n	8005878 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d11b      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x176>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d016      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x176>
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d113      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d119      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x1b8>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	b292      	uxth	r2, r2
 800583a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005854:	2301      	movs	r3, #1
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005858:	f7fe fcf0 	bl	800423c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005864:	429a      	cmp	r2, r3
 8005866:	d807      	bhi.n	8005878 <HAL_SPI_TransmitReceive+0x1d8>
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d003      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005876:	e0a7      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1a6      	bne.n	80057d0 <HAL_SPI_TransmitReceive+0x130>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1a1      	bne.n	80057d0 <HAL_SPI_TransmitReceive+0x130>
 800588c:	e07c      	b.n	8005988 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_TransmitReceive+0x1fc>
 8005896:	8b7b      	ldrh	r3, [r7, #26]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d16b      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c2:	e057      	b.n	8005974 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d11c      	bne.n	800590c <HAL_SPI_TransmitReceive+0x26c>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d017      	beq.n	800590c <HAL_SPI_TransmitReceive+0x26c>
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d114      	bne.n	800590c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d119      	bne.n	800594e <HAL_SPI_TransmitReceive+0x2ae>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d014      	beq.n	800594e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800594a:	2301      	movs	r3, #1
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800594e:	f7fe fc75 	bl	800423c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_TransmitReceive+0x2c6>
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_TransmitReceive+0x2cc>
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005972:	e029      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1a2      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x224>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d19d      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f925 	bl	8005bdc <SPI_EndRxTxTransaction>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059a4:	e010      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	e000      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3730      	adds	r7, #48	; 0x30
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f2:	b2db      	uxtb	r3, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a10:	f7fe fc14 	bl	800423c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a20:	f7fe fc0c 	bl	800423c <HAL_GetTick>
 8005a24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	015b      	lsls	r3, r3, #5
 8005a2c:	0d1b      	lsrs	r3, r3, #20
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a36:	e054      	b.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d050      	beq.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a40:	f7fe fbfc 	bl	800423c <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d902      	bls.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d13d      	bne.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6e:	d111      	bne.n	8005a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a78:	d004      	beq.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d107      	bne.n	8005a94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9c:	d10f      	bne.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e017      	b.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d19b      	bne.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	200000b0 	.word	0x200000b0

08005b10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b24:	d111      	bne.n	8005b4a <SPI_EndRxTransaction+0x3a>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2e:	d004      	beq.n	8005b3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b38:	d107      	bne.n	8005b4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b52:	d12a      	bne.n	8005baa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5c:	d012      	beq.n	8005b84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff ff49 	bl	8005a00 <SPI_WaitFlagStateUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02d      	beq.n	8005bd0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e026      	b.n	8005bd2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff ff36 	bl	8005a00 <SPI_WaitFlagStateUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01a      	beq.n	8005bd0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f043 0220 	orr.w	r2, r3, #32
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e013      	b.n	8005bd2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff ff23 	bl	8005a00 <SPI_WaitFlagStateUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e000      	b.n	8005bd2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <SPI_EndRxTxTransaction+0x7c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <SPI_EndRxTxTransaction+0x80>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	0d5b      	lsrs	r3, r3, #21
 8005bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c06:	d112      	bne.n	8005c2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fef4 	bl	8005a00 <SPI_WaitFlagStateUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e00f      	b.n	8005c4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d0f2      	beq.n	8005c2e <SPI_EndRxTxTransaction+0x52>
 8005c48:	e000      	b.n	8005c4c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c4a:	bf00      	nop
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200000b0 	.word	0x200000b0
 8005c5c:	165e9f81 	.word	0x165e9f81

08005c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e041      	b.n	8005cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fd fed4 	bl	8003a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f000 fcc2 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d001      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e04e      	b.n	8005db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a23      	ldr	r2, [pc, #140]	; (8005dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d022      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d42:	d01d      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d018      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00e      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x80>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d111      	bne.n	8005da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b06      	cmp	r3, #6
 8005d90:	d010      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	e007      	b.n	8005db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40001800 	.word	0x40001800

08005de0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e041      	b.n	8005e76 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fd fdce 	bl	80039a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f000 fc02 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e041      	b.n	8005f14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fd fd49 	bl	800393c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f000 fbb3 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x24>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e022      	b.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d109      	bne.n	8005f5a <HAL_TIM_PWM_Start+0x3e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e015      	b.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d109      	bne.n	8005f74 <HAL_TIM_PWM_Start+0x58>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e008      	b.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07c      	b.n	8006088 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Start+0x82>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9c:	e013      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xaa>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Start+0x92>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fac:	e00b      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xaa>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Start+0xa2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbc:	e003      	b.n	8005fc6 <HAL_TIM_PWM_Start+0xaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fd7a 	bl	8006ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <HAL_TIM_PWM_Start+0x174>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIM_PWM_Start+0xcc>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2c      	ldr	r2, [pc, #176]	; (8006094 <HAL_TIM_PWM_Start+0x178>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d101      	bne.n	8005fec <HAL_TIM_PWM_Start+0xd0>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <HAL_TIM_PWM_Start+0xd2>
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a22      	ldr	r2, [pc, #136]	; (8006090 <HAL_TIM_PWM_Start+0x174>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d01d      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <HAL_TIM_PWM_Start+0x17c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1d      	ldr	r2, [pc, #116]	; (800609c <HAL_TIM_PWM_Start+0x180>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <HAL_TIM_PWM_Start+0x184>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a16      	ldr	r2, [pc, #88]	; (8006094 <HAL_TIM_PWM_Start+0x178>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_TIM_PWM_Start+0x188>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIM_PWM_Start+0x136>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <HAL_TIM_PWM_Start+0x18c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b06      	cmp	r3, #6
 8006062:	d010      	beq.n	8006086 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	e007      	b.n	8006086 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40010000 	.word	0x40010000
 8006094:	40010400 	.word	0x40010400
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40001800 	.word	0x40001800

080060ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fd02 	bl	8006ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2e      	ldr	r2, [pc, #184]	; (8006184 <HAL_TIM_PWM_Stop+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_PWM_Stop+0x2c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2d      	ldr	r2, [pc, #180]	; (8006188 <HAL_TIM_PWM_Stop+0xdc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_PWM_Stop+0x30>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_TIM_PWM_Stop+0x32>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10f      	bne.n	8006112 <HAL_TIM_PWM_Stop+0x66>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	f240 4344 	movw	r3, #1092	; 0x444
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <HAL_TIM_PWM_Stop+0x66>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	f241 1311 	movw	r3, #4369	; 0x1111
 800611c:	4013      	ands	r3, r2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <HAL_TIM_PWM_Stop+0x96>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6a1a      	ldr	r2, [r3, #32]
 8006128:	f240 4344 	movw	r3, #1092	; 0x444
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d107      	bne.n	8006142 <HAL_TIM_PWM_Stop+0x96>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0201 	bic.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_TIM_PWM_Stop+0xa6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006150:	e013      	b.n	800617a <HAL_TIM_PWM_Stop+0xce>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d104      	bne.n	8006162 <HAL_TIM_PWM_Stop+0xb6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006160:	e00b      	b.n	800617a <HAL_TIM_PWM_Stop+0xce>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d104      	bne.n	8006172 <HAL_TIM_PWM_Stop+0xc6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006170:	e003      	b.n	800617a <HAL_TIM_PWM_Stop+0xce>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400

0800618c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0202 	mvn.w	r2, #2
 80061b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fa0c 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9fe 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fa0f 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0204 	mvn.w	r2, #4
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f9e2 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9d4 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f9e5 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b08      	cmp	r3, #8
 8006248:	d122      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d11b      	bne.n	8006290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0208 	mvn.w	r2, #8
 8006260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2204      	movs	r2, #4
 8006266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9b8 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 800627c:	e005      	b.n	800628a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9aa 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f9bb 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d122      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d11b      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2208      	movs	r2, #8
 80062ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f98e 	bl	80065ec <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f980 	bl	80065d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f991 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0201 	mvn.w	r2, #1
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fd fd56 	bl	8003dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fc72 	bl	8006c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d10e      	bne.n	8006368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d107      	bne.n	8006368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f956 	bl	8006614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b20      	cmp	r3, #32
 8006374:	d10e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b20      	cmp	r3, #32
 8006382:	d107      	bne.n	8006394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0220 	mvn.w	r2, #32
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fc3c 	bl	8006c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e048      	b.n	800644c <HAL_TIM_OC_ConfigChannel+0xb0>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	d839      	bhi.n	800643c <HAL_TIM_OC_ConfigChannel+0xa0>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	08006405 	.word	0x08006405
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	0800643d 	.word	0x0800643d
 80063e0:	08006413 	.word	0x08006413
 80063e4:	0800643d 	.word	0x0800643d
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	08006421 	.word	0x08006421
 80063f4:	0800643d 	.word	0x0800643d
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	0800642f 	.word	0x0800642f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f9ac 	bl	8006768 <TIM_OC1_SetConfig>
      break;
 8006410:	e017      	b.n	8006442 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fa15 	bl	8006848 <TIM_OC2_SetConfig>
      break;
 800641e:	e010      	b.n	8006442 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fa84 	bl	8006934 <TIM_OC3_SetConfig>
      break;
 800642c:	e009      	b.n	8006442 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 faf1 	bl	8006a1c <TIM_OC4_SetConfig>
      break;
 800643a:	e002      	b.n	8006442 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800646e:	2302      	movs	r3, #2
 8006470:	e0ae      	b.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b0c      	cmp	r3, #12
 800647e:	f200 809f 	bhi.w	80065c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064bd 	.word	0x080064bd
 800648c:	080065c1 	.word	0x080065c1
 8006490:	080065c1 	.word	0x080065c1
 8006494:	080065c1 	.word	0x080065c1
 8006498:	080064fd 	.word	0x080064fd
 800649c:	080065c1 	.word	0x080065c1
 80064a0:	080065c1 	.word	0x080065c1
 80064a4:	080065c1 	.word	0x080065c1
 80064a8:	0800653f 	.word	0x0800653f
 80064ac:	080065c1 	.word	0x080065c1
 80064b0:	080065c1 	.word	0x080065c1
 80064b4:	080065c1 	.word	0x080065c1
 80064b8:	0800657f 	.word	0x0800657f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f950 	bl	8006768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0208 	orr.w	r2, r2, #8
 80064d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6999      	ldr	r1, [r3, #24]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	619a      	str	r2, [r3, #24]
      break;
 80064fa:	e064      	b.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f9a0 	bl	8006848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6999      	ldr	r1, [r3, #24]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	619a      	str	r2, [r3, #24]
      break;
 800653c:	e043      	b.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f9f5 	bl	8006934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0208 	orr.w	r2, r2, #8
 8006558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0204 	bic.w	r2, r2, #4
 8006568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	61da      	str	r2, [r3, #28]
      break;
 800657c:	e023      	b.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fa49 	bl	8006a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	021a      	lsls	r2, r3, #8
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	61da      	str	r2, [r3, #28]
      break;
 80065be:	e002      	b.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]
      break;
 80065c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a40      	ldr	r2, [pc, #256]	; (800673c <TIM_Base_SetConfig+0x114>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d00f      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a3d      	ldr	r2, [pc, #244]	; (8006740 <TIM_Base_SetConfig+0x118>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00b      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a3c      	ldr	r2, [pc, #240]	; (8006744 <TIM_Base_SetConfig+0x11c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3b      	ldr	r2, [pc, #236]	; (8006748 <TIM_Base_SetConfig+0x120>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3a      	ldr	r2, [pc, #232]	; (800674c <TIM_Base_SetConfig+0x124>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2f      	ldr	r2, [pc, #188]	; (800673c <TIM_Base_SetConfig+0x114>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d02b      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006688:	d027      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a2c      	ldr	r2, [pc, #176]	; (8006740 <TIM_Base_SetConfig+0x118>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d023      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a2b      	ldr	r2, [pc, #172]	; (8006744 <TIM_Base_SetConfig+0x11c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01f      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2a      	ldr	r2, [pc, #168]	; (8006748 <TIM_Base_SetConfig+0x120>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01b      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a29      	ldr	r2, [pc, #164]	; (800674c <TIM_Base_SetConfig+0x124>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d017      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a28      	ldr	r2, [pc, #160]	; (8006750 <TIM_Base_SetConfig+0x128>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a27      	ldr	r2, [pc, #156]	; (8006754 <TIM_Base_SetConfig+0x12c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00f      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a26      	ldr	r2, [pc, #152]	; (8006758 <TIM_Base_SetConfig+0x130>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00b      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a25      	ldr	r2, [pc, #148]	; (800675c <TIM_Base_SetConfig+0x134>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d007      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a24      	ldr	r2, [pc, #144]	; (8006760 <TIM_Base_SetConfig+0x138>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a23      	ldr	r2, [pc, #140]	; (8006764 <TIM_Base_SetConfig+0x13c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d108      	bne.n	80066ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a0a      	ldr	r2, [pc, #40]	; (800673c <TIM_Base_SetConfig+0x114>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0xf8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a0c      	ldr	r2, [pc, #48]	; (800674c <TIM_Base_SetConfig+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d103      	bne.n	8006728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	615a      	str	r2, [r3, #20]
}
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40010000 	.word	0x40010000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40010400 	.word	0x40010400
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800
 800675c:	40001800 	.word	0x40001800
 8006760:	40001c00 	.word	0x40001c00
 8006764:	40002000 	.word	0x40002000

08006768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0201 	bic.w	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 0302 	bic.w	r3, r3, #2
 80067b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a20      	ldr	r2, [pc, #128]	; (8006840 <TIM_OC1_SetConfig+0xd8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC1_SetConfig+0x64>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1f      	ldr	r2, [pc, #124]	; (8006844 <TIM_OC1_SetConfig+0xdc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d10c      	bne.n	80067e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0308 	bic.w	r3, r3, #8
 80067d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a15      	ldr	r2, [pc, #84]	; (8006840 <TIM_OC1_SetConfig+0xd8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_OC1_SetConfig+0x8e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a14      	ldr	r2, [pc, #80]	; (8006844 <TIM_OC1_SetConfig+0xdc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d111      	bne.n	800681a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400

08006848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f023 0210 	bic.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0320 	bic.w	r3, r3, #32
 8006892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a22      	ldr	r2, [pc, #136]	; (800692c <TIM_OC2_SetConfig+0xe4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC2_SetConfig+0x68>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a21      	ldr	r2, [pc, #132]	; (8006930 <TIM_OC2_SetConfig+0xe8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10d      	bne.n	80068cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <TIM_OC2_SetConfig+0xe4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC2_SetConfig+0x94>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a16      	ldr	r2, [pc, #88]	; (8006930 <TIM_OC2_SetConfig+0xe8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d113      	bne.n	8006904 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400

08006934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0303 	bic.w	r3, r3, #3
 800696a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800697c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <TIM_OC3_SetConfig+0xe0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0x66>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a20      	ldr	r2, [pc, #128]	; (8006a18 <TIM_OC3_SetConfig+0xe4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10d      	bne.n	80069b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <TIM_OC3_SetConfig+0xe0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_OC3_SetConfig+0x92>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <TIM_OC3_SetConfig+0xe4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d113      	bne.n	80069ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40010400 	.word	0x40010400

08006a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <TIM_OC4_SetConfig+0xa4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_OC4_SetConfig+0x68>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <TIM_OC4_SetConfig+0xa8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d109      	bne.n	8006a98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	2201      	movs	r2, #1
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	401a      	ands	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	431a      	orrs	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
}
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e05a      	b.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d022      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d01d      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d018      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00e      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d009      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	40010400 	.word	0x40010400
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40001800 	.word	0x40001800

08006c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	; 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	fa93 f3a3 	rbit	r3, r3
 8006c4e:	613b      	str	r3, [r7, #16]
  return result;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	fab3 f383 	clz	r3, r3
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	2103      	movs	r1, #3
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	fa93 f3a3 	rbit	r3, r3
 8006c6e:	61bb      	str	r3, [r7, #24]
  return result;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	fab3 f383 	clz	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	431a      	orrs	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	601a      	str	r2, [r3, #0]
}
 8006c86:	bf00      	nop
 8006c88:	3724      	adds	r7, #36	; 0x24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	401a      	ands	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b089      	sub	sp, #36	; 0x24
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	fa93 f3a3 	rbit	r3, r3
 8006cdc:	613b      	str	r3, [r7, #16]
  return result;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	fab3 f383 	clz	r3, r3
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	2103      	movs	r1, #3
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	43db      	mvns	r3, r3
 8006cf0:	401a      	ands	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	fa93 f3a3 	rbit	r3, r3
 8006cfc:	61bb      	str	r3, [r7, #24]
  return result;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	fab3 f383 	clz	r3, r3
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006d14:	bf00      	nop
 8006d16:	3724      	adds	r7, #36	; 0x24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	fa93 f3a3 	rbit	r3, r3
 8006d3a:	613b      	str	r3, [r7, #16]
  return result;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	fab3 f383 	clz	r3, r3
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	2103      	movs	r1, #3
 8006d48:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	401a      	ands	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	fa93 f3a3 	rbit	r3, r3
 8006d5a:	61bb      	str	r3, [r7, #24]
  return result;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	fab3 f383 	clz	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	60da      	str	r2, [r3, #12]
}
 8006d72:	bf00      	nop
 8006d74:	3724      	adds	r7, #36	; 0x24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b089      	sub	sp, #36	; 0x24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	fa93 f3a3 	rbit	r3, r3
 8006d98:	613b      	str	r3, [r7, #16]
  return result;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	fab3 f383 	clz	r3, r3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	210f      	movs	r1, #15
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	43db      	mvns	r3, r3
 8006dac:	401a      	ands	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	fa93 f3a3 	rbit	r3, r3
 8006db8:	61bb      	str	r3, [r7, #24]
  return result;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	fab3 f383 	clz	r3, r3
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006dd0:	bf00      	nop
 8006dd2:	3724      	adds	r7, #36	; 0x24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b089      	sub	sp, #36	; 0x24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	fa93 f3a3 	rbit	r3, r3
 8006df8:	613b      	str	r3, [r7, #16]
  return result;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	fab3 f383 	clz	r3, r3
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	210f      	movs	r1, #15
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	401a      	ands	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	fa93 f3a3 	rbit	r3, r3
 8006e1a:	61bb      	str	r3, [r7, #24]
  return result;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	fab3 f383 	clz	r3, r3
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006e32:	bf00      	nop
 8006e34:	3724      	adds	r7, #36	; 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b088      	sub	sp, #32
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	fa93 f3a3 	rbit	r3, r3
 8006e5c:	613b      	str	r3, [r7, #16]
  return result;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	fab3 f383 	clz	r3, r3
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006e68:	e050      	b.n	8006f0c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	2101      	movs	r1, #1
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	4013      	ands	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d042      	beq.n	8006f06 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d003      	beq.n	8006e90 <LL_GPIO_Init+0x52>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d10d      	bne.n	8006eac <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	461a      	mov	r2, r3
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff12 	bl	8006cc2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	69b9      	ldr	r1, [r7, #24]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fef3 	bl	8006c92 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff ff33 	bl	8006d20 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d11a      	bne.n	8006ef8 <LL_GPIO_Init+0xba>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	fa93 f3a3 	rbit	r3, r3
 8006ecc:	60bb      	str	r3, [r7, #8]
  return result;
 8006ece:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006ed0:	fab3 f383 	clz	r3, r3
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b07      	cmp	r3, #7
 8006ed8:	d807      	bhi.n	8006eea <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	69b9      	ldr	r1, [r7, #24]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ff4b 	bl	8006d7e <LL_GPIO_SetAFPin_0_7>
 8006ee8:	e006      	b.n	8006ef8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	69b9      	ldr	r1, [r7, #24]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ff72 	bl	8006ddc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	461a      	mov	r2, r3
 8006efe:	69b9      	ldr	r1, [r7, #24]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff fe97 	bl	8006c34 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1a7      	bne.n	8006e6a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <LL_RCC_GetSysClkSource+0x18>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800

08006f40 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006f44:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <LL_RCC_GetAHBPrescaler+0x18>)
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800

08006f5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006f60:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40023800 	.word	0x40023800

08006f78 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40023800 	.word	0x40023800

08006f94 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <LL_RCC_PLL_GetMainSource+0x18>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40023800 	.word	0x40023800

08006fb0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <LL_RCC_PLL_GetN+0x18>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	099b      	lsrs	r3, r3, #6
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40023800 	.word	0x40023800

08006fcc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <LL_RCC_PLL_GetP+0x18>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800

08006fe8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <LL_RCC_PLL_GetDivider+0x18>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40023800 	.word	0x40023800

08007004 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800700c:	f000 f820 	bl	8007050 <RCC_GetSystemClockFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f840 	bl	80070a0 <RCC_GetHCLKClockFreq>
 8007020:	4602      	mov	r2, r0
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f84e 	bl	80070cc <RCC_GetPCLK1ClockFreq>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f85a 	bl	80070f4 <RCC_GetPCLK2ClockFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800705a:	f7ff ff63 	bl	8006f24 <LL_RCC_GetSysClkSource>
 800705e:	4603      	mov	r3, r0
 8007060:	2b08      	cmp	r3, #8
 8007062:	d00c      	beq.n	800707e <RCC_GetSystemClockFreq+0x2e>
 8007064:	2b08      	cmp	r3, #8
 8007066:	d80f      	bhi.n	8007088 <RCC_GetSystemClockFreq+0x38>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <RCC_GetSystemClockFreq+0x22>
 800706c:	2b04      	cmp	r3, #4
 800706e:	d003      	beq.n	8007078 <RCC_GetSystemClockFreq+0x28>
 8007070:	e00a      	b.n	8007088 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <RCC_GetSystemClockFreq+0x48>)
 8007074:	607b      	str	r3, [r7, #4]
      break;
 8007076:	e00a      	b.n	800708e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007078:	4b08      	ldr	r3, [pc, #32]	; (800709c <RCC_GetSystemClockFreq+0x4c>)
 800707a:	607b      	str	r3, [r7, #4]
      break;
 800707c:	e007      	b.n	800708e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800707e:	2008      	movs	r0, #8
 8007080:	f000 f84c 	bl	800711c <RCC_PLL_GetFreqDomain_SYS>
 8007084:	6078      	str	r0, [r7, #4]
      break;
 8007086:	e002      	b.n	800708e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <RCC_GetSystemClockFreq+0x48>)
 800708a:	607b      	str	r3, [r7, #4]
      break;
 800708c:	bf00      	nop
  }

  return frequency;
 800708e:	687b      	ldr	r3, [r7, #4]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	00f42400 	.word	0x00f42400
 800709c:	007a1200 	.word	0x007a1200

080070a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80070a8:	f7ff ff4a 	bl	8006f40 <LL_RCC_GetAHBPrescaler>
 80070ac:	4603      	mov	r3, r0
 80070ae:	091b      	lsrs	r3, r3, #4
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <RCC_GetHCLKClockFreq+0x28>)
 80070b6:	5cd3      	ldrb	r3, [r2, r3]
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	40d3      	lsrs	r3, r2
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	0800bcd0 	.word	0x0800bcd0

080070cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80070d4:	f7ff ff42 	bl	8006f5c <LL_RCC_GetAPB1Prescaler>
 80070d8:	4603      	mov	r3, r0
 80070da:	0a9b      	lsrs	r3, r3, #10
 80070dc:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80070de:	5cd3      	ldrb	r3, [r2, r3]
 80070e0:	461a      	mov	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	40d3      	lsrs	r3, r2
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	0800bce0 	.word	0x0800bce0

080070f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80070fc:	f7ff ff3c 	bl	8006f78 <LL_RCC_GetAPB2Prescaler>
 8007100:	4603      	mov	r3, r0
 8007102:	0b5b      	lsrs	r3, r3, #13
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <RCC_GetPCLK2ClockFreq+0x24>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	461a      	mov	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	40d3      	lsrs	r3, r2
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	0800bce0 	.word	0x0800bce0

0800711c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007130:	f7ff ff30 	bl	8006f94 <LL_RCC_PLL_GetMainSource>
 8007134:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007142:	d003      	beq.n	800714c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007144:	e005      	b.n	8007152 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007148:	617b      	str	r3, [r7, #20]
      break;
 800714a:	e005      	b.n	8007158 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800714c:	4b11      	ldr	r3, [pc, #68]	; (8007194 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800714e:	617b      	str	r3, [r7, #20]
      break;
 8007150:	e002      	b.n	8007158 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007154:	617b      	str	r3, [r7, #20]
      break;
 8007156:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b08      	cmp	r3, #8
 800715c:	d113      	bne.n	8007186 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800715e:	f7ff ff43 	bl	8006fe8 <LL_RCC_PLL_GetDivider>
 8007162:	4602      	mov	r2, r0
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	fbb3 f4f2 	udiv	r4, r3, r2
 800716a:	f7ff ff21 	bl	8006fb0 <LL_RCC_PLL_GetN>
 800716e:	4603      	mov	r3, r0
 8007170:	fb03 f404 	mul.w	r4, r3, r4
 8007174:	f7ff ff2a 	bl	8006fcc <LL_RCC_PLL_GetP>
 8007178:	4603      	mov	r3, r0
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	3301      	adds	r3, #1
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	fbb4 f3f3 	udiv	r3, r4, r3
 8007184:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007186:	693b      	ldr	r3, [r7, #16]
}
 8007188:	4618      	mov	r0, r3
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	bd90      	pop	{r4, r7, pc}
 8007190:	00f42400 	.word	0x00f42400
 8007194:	007a1200 	.word	0x007a1200

08007198 <LL_USART_IsEnabled>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <LL_USART_SetStopBitsLength>:
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	611a      	str	r2, [r3, #16]
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <LL_USART_SetHWFlowCtrl>:
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	615a      	str	r2, [r3, #20]
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <LL_USART_SetBaudRate>:
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b0c0      	sub	sp, #256	; 0x100
 8007212:	af00      	add	r7, sp, #0
 8007214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007218:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800721c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007220:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800722c:	f040 810c 	bne.w	8007448 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007234:	2200      	movs	r2, #0
 8007236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800723a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800723e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	1891      	adds	r1, r2, r2
 8007248:	6639      	str	r1, [r7, #96]	; 0x60
 800724a:	415b      	adcs	r3, r3
 800724c:	667b      	str	r3, [r7, #100]	; 0x64
 800724e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007252:	4621      	mov	r1, r4
 8007254:	eb12 0801 	adds.w	r8, r2, r1
 8007258:	4629      	mov	r1, r5
 800725a:	eb43 0901 	adc.w	r9, r3, r1
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800726a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800726e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007272:	4690      	mov	r8, r2
 8007274:	4699      	mov	r9, r3
 8007276:	4623      	mov	r3, r4
 8007278:	eb18 0303 	adds.w	r3, r8, r3
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007280:	462b      	mov	r3, r5
 8007282:	eb49 0303 	adc.w	r3, r9, r3
 8007286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800728a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800728e:	2200      	movs	r2, #0
 8007290:	469a      	mov	sl, r3
 8007292:	4693      	mov	fp, r2
 8007294:	eb1a 030a 	adds.w	r3, sl, sl
 8007298:	65bb      	str	r3, [r7, #88]	; 0x58
 800729a:	eb4b 030b 	adc.w	r3, fp, fp
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072a8:	f7f9 fcce 	bl	8000c48 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4b64      	ldr	r3, [pc, #400]	; (8007444 <LL_USART_SetBaudRate+0x238>)
 80072b2:	fba3 2302 	umull	r2, r3, r3, r2
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	b29c      	uxth	r4, r3
 80072be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072c8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072cc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	1891      	adds	r1, r2, r2
 80072d6:	6539      	str	r1, [r7, #80]	; 0x50
 80072d8:	415b      	adcs	r3, r3
 80072da:	657b      	str	r3, [r7, #84]	; 0x54
 80072dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072e0:	4641      	mov	r1, r8
 80072e2:	1851      	adds	r1, r2, r1
 80072e4:	64b9      	str	r1, [r7, #72]	; 0x48
 80072e6:	4649      	mov	r1, r9
 80072e8:	414b      	adcs	r3, r1
 80072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80072f8:	4659      	mov	r1, fp
 80072fa:	00cb      	lsls	r3, r1, #3
 80072fc:	4651      	mov	r1, sl
 80072fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007302:	4651      	mov	r1, sl
 8007304:	00ca      	lsls	r2, r1, #3
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	4603      	mov	r3, r0
 800730c:	4642      	mov	r2, r8
 800730e:	189b      	adds	r3, r3, r2
 8007310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007314:	464b      	mov	r3, r9
 8007316:	460a      	mov	r2, r1
 8007318:	eb42 0303 	adc.w	r3, r2, r3
 800731c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007324:	2200      	movs	r2, #0
 8007326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800732a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800732e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007332:	460b      	mov	r3, r1
 8007334:	18db      	adds	r3, r3, r3
 8007336:	643b      	str	r3, [r7, #64]	; 0x40
 8007338:	4613      	mov	r3, r2
 800733a:	eb42 0303 	adc.w	r3, r2, r3
 800733e:	647b      	str	r3, [r7, #68]	; 0x44
 8007340:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007344:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007348:	f7f9 fc7e 	bl	8000c48 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4611      	mov	r1, r2
 8007352:	4b3c      	ldr	r3, [pc, #240]	; (8007444 <LL_USART_SetBaudRate+0x238>)
 8007354:	fba3 2301 	umull	r2, r3, r3, r1
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	2264      	movs	r2, #100	; 0x64
 800735c:	fb02 f303 	mul.w	r3, r2, r3
 8007360:	1acb      	subs	r3, r1, r3
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007368:	4b36      	ldr	r3, [pc, #216]	; (8007444 <LL_USART_SetBaudRate+0x238>)
 800736a:	fba3 2302 	umull	r2, r3, r3, r2
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	b29b      	uxth	r3, r3
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	b29b      	uxth	r3, r3
 8007376:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800737a:	b29b      	uxth	r3, r3
 800737c:	4423      	add	r3, r4
 800737e:	b29c      	uxth	r4, r3
 8007380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007384:	2200      	movs	r2, #0
 8007386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800738a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800738e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8007392:	4642      	mov	r2, r8
 8007394:	464b      	mov	r3, r9
 8007396:	1891      	adds	r1, r2, r2
 8007398:	63b9      	str	r1, [r7, #56]	; 0x38
 800739a:	415b      	adcs	r3, r3
 800739c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073a2:	4641      	mov	r1, r8
 80073a4:	1851      	adds	r1, r2, r1
 80073a6:	6339      	str	r1, [r7, #48]	; 0x30
 80073a8:	4649      	mov	r1, r9
 80073aa:	414b      	adcs	r3, r1
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
 80073ae:	f04f 0200 	mov.w	r2, #0
 80073b2:	f04f 0300 	mov.w	r3, #0
 80073b6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073ba:	4659      	mov	r1, fp
 80073bc:	00cb      	lsls	r3, r1, #3
 80073be:	4651      	mov	r1, sl
 80073c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073c4:	4651      	mov	r1, sl
 80073c6:	00ca      	lsls	r2, r1, #3
 80073c8:	4610      	mov	r0, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	4603      	mov	r3, r0
 80073ce:	4642      	mov	r2, r8
 80073d0:	189b      	adds	r3, r3, r2
 80073d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073d6:	464b      	mov	r3, r9
 80073d8:	460a      	mov	r2, r1
 80073da:	eb42 0303 	adc.w	r3, r2, r3
 80073de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073ec:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80073f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80073f4:	460b      	mov	r3, r1
 80073f6:	18db      	adds	r3, r3, r3
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fa:	4613      	mov	r3, r2
 80073fc:	eb42 0303 	adc.w	r3, r2, r3
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007406:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800740a:	f7f9 fc1d 	bl	8000c48 <__aeabi_uldivmod>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <LL_USART_SetBaudRate+0x238>)
 8007414:	fba3 1302 	umull	r1, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	2164      	movs	r1, #100	; 0x64
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	3332      	adds	r3, #50	; 0x32
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <LL_USART_SetBaudRate+0x238>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	b29b      	uxth	r3, r3
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	b29b      	uxth	r3, r3
 8007436:	4423      	add	r3, r4
 8007438:	b29b      	uxth	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007440:	609a      	str	r2, [r3, #8]
}
 8007442:	e107      	b.n	8007654 <LL_USART_SetBaudRate+0x448>
 8007444:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007448:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800744c:	2200      	movs	r2, #0
 800744e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007452:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007456:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800745a:	4642      	mov	r2, r8
 800745c:	464b      	mov	r3, r9
 800745e:	1891      	adds	r1, r2, r2
 8007460:	6239      	str	r1, [r7, #32]
 8007462:	415b      	adcs	r3, r3
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
 8007466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800746a:	4641      	mov	r1, r8
 800746c:	1854      	adds	r4, r2, r1
 800746e:	4649      	mov	r1, r9
 8007470:	eb43 0501 	adc.w	r5, r3, r1
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	00eb      	lsls	r3, r5, #3
 800747e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007482:	00e2      	lsls	r2, r4, #3
 8007484:	4614      	mov	r4, r2
 8007486:	461d      	mov	r5, r3
 8007488:	4643      	mov	r3, r8
 800748a:	18e3      	adds	r3, r4, r3
 800748c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007490:	464b      	mov	r3, r9
 8007492:	eb45 0303 	adc.w	r3, r5, r3
 8007496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800749a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80074b4:	4629      	mov	r1, r5
 80074b6:	008b      	lsls	r3, r1, #2
 80074b8:	4621      	mov	r1, r4
 80074ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074be:	4621      	mov	r1, r4
 80074c0:	008a      	lsls	r2, r1, #2
 80074c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80074c6:	f7f9 fbbf 	bl	8000c48 <__aeabi_uldivmod>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4b64      	ldr	r3, [pc, #400]	; (8007660 <LL_USART_SetBaudRate+0x454>)
 80074d0:	fba3 2302 	umull	r2, r3, r3, r2
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	b29c      	uxth	r4, r3
 80074dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ea:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80074ee:	4642      	mov	r2, r8
 80074f0:	464b      	mov	r3, r9
 80074f2:	1891      	adds	r1, r2, r2
 80074f4:	61b9      	str	r1, [r7, #24]
 80074f6:	415b      	adcs	r3, r3
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074fe:	4641      	mov	r1, r8
 8007500:	1851      	adds	r1, r2, r1
 8007502:	6139      	str	r1, [r7, #16]
 8007504:	4649      	mov	r1, r9
 8007506:	414b      	adcs	r3, r1
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007516:	4659      	mov	r1, fp
 8007518:	00cb      	lsls	r3, r1, #3
 800751a:	4651      	mov	r1, sl
 800751c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007520:	4651      	mov	r1, sl
 8007522:	00ca      	lsls	r2, r1, #3
 8007524:	4610      	mov	r0, r2
 8007526:	4619      	mov	r1, r3
 8007528:	4603      	mov	r3, r0
 800752a:	4642      	mov	r2, r8
 800752c:	189b      	adds	r3, r3, r2
 800752e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007532:	464b      	mov	r3, r9
 8007534:	460a      	mov	r2, r1
 8007536:	eb42 0303 	adc.w	r3, r2, r3
 800753a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800753e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007548:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8007558:	4649      	mov	r1, r9
 800755a:	008b      	lsls	r3, r1, #2
 800755c:	4641      	mov	r1, r8
 800755e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007562:	4641      	mov	r1, r8
 8007564:	008a      	lsls	r2, r1, #2
 8007566:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800756a:	f7f9 fb6d 	bl	8000c48 <__aeabi_uldivmod>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4b3b      	ldr	r3, [pc, #236]	; (8007660 <LL_USART_SetBaudRate+0x454>)
 8007574:	fba3 1302 	umull	r1, r3, r3, r2
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	2164      	movs	r1, #100	; 0x64
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	3332      	adds	r3, #50	; 0x32
 8007586:	4a36      	ldr	r2, [pc, #216]	; (8007660 <LL_USART_SetBaudRate+0x454>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	b29b      	uxth	r3, r3
 8007590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007594:	b29b      	uxth	r3, r3
 8007596:	4423      	add	r3, r4
 8007598:	b29c      	uxth	r4, r3
 800759a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800759e:	2200      	movs	r2, #0
 80075a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	1891      	adds	r1, r2, r2
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	415b      	adcs	r3, r3
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b8:	4641      	mov	r1, r8
 80075ba:	1851      	adds	r1, r2, r1
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	4649      	mov	r1, r9
 80075c0:	414b      	adcs	r3, r1
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075d0:	4659      	mov	r1, fp
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	4651      	mov	r1, sl
 80075d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075da:	4651      	mov	r1, sl
 80075dc:	00ca      	lsls	r2, r1, #3
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4642      	mov	r2, r8
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
 80075ea:	464b      	mov	r3, r9
 80075ec:	460a      	mov	r2, r1
 80075ee:	eb42 0303 	adc.w	r3, r2, r3
 80075f2:	677b      	str	r3, [r7, #116]	; 0x74
 80075f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075f8:	2200      	movs	r2, #0
 80075fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80075fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800760a:	4649      	mov	r1, r9
 800760c:	008b      	lsls	r3, r1, #2
 800760e:	4641      	mov	r1, r8
 8007610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007614:	4641      	mov	r1, r8
 8007616:	008a      	lsls	r2, r1, #2
 8007618:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800761c:	f7f9 fb14 	bl	8000c48 <__aeabi_uldivmod>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <LL_USART_SetBaudRate+0x454>)
 8007626:	fba3 1302 	umull	r1, r3, r3, r2
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	2164      	movs	r1, #100	; 0x64
 800762e:	fb01 f303 	mul.w	r3, r1, r3
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	3332      	adds	r3, #50	; 0x32
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <LL_USART_SetBaudRate+0x454>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	b29b      	uxth	r3, r3
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	b29b      	uxth	r3, r3
 8007648:	4423      	add	r3, r4
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007652:	609a      	str	r2, [r3, #8]
}
 8007654:	bf00      	nop
 8007656:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800765a:	46bd      	mov	sp, r7
 800765c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007660:	51eb851f 	.word	0x51eb851f

08007664 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fd8e 	bl	8007198 <LL_USART_IsEnabled>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d15e      	bne.n	8007740 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800768a:	f023 030c 	bic.w	r3, r3, #12
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	6851      	ldr	r1, [r2, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	68d2      	ldr	r2, [r2, #12]
 8007696:	4311      	orrs	r1, r2
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	6912      	ldr	r2, [r2, #16]
 800769c:	4311      	orrs	r1, r2
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	6992      	ldr	r2, [r2, #24]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fd85 	bl	80071c0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff fd92 	bl	80071e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80076c2:	f107 0308 	add.w	r3, r7, #8
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fc9c 	bl	8007004 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a1f      	ldr	r2, [pc, #124]	; (800774c <LL_USART_Init+0xe8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d102      	bne.n	80076da <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	61bb      	str	r3, [r7, #24]
 80076d8:	e021      	b.n	800771e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <LL_USART_Init+0xec>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d102      	bne.n	80076e8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	e01a      	b.n	800771e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <LL_USART_Init+0xf0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d102      	bne.n	80076f6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e013      	b.n	800771e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a17      	ldr	r2, [pc, #92]	; (8007758 <LL_USART_Init+0xf4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d102      	bne.n	8007704 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e00c      	b.n	800771e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a15      	ldr	r2, [pc, #84]	; (800775c <LL_USART_Init+0xf8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d102      	bne.n	8007712 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	61bb      	str	r3, [r7, #24]
 8007710:	e005      	b.n	800771e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a12      	ldr	r2, [pc, #72]	; (8007760 <LL_USART_Init+0xfc>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d101      	bne.n	800771e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00d      	beq.n	8007740 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800772c:	2300      	movs	r3, #0
 800772e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69b9      	ldr	r1, [r7, #24]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fd66 	bl	800720c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007740:	7ffb      	ldrb	r3, [r7, #31]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40011000 	.word	0x40011000
 8007750:	40004400 	.word	0x40004400
 8007754:	40004800 	.word	0x40004800
 8007758:	40011400 	.word	0x40011400
 800775c:	40004c00 	.word	0x40004c00
 8007760:	40005000 	.word	0x40005000

08007764 <__errno>:
 8007764:	4b01      	ldr	r3, [pc, #4]	; (800776c <__errno+0x8>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	200000cc 	.word	0x200000cc

08007770 <__libc_init_array>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	4d0d      	ldr	r5, [pc, #52]	; (80077a8 <__libc_init_array+0x38>)
 8007774:	4c0d      	ldr	r4, [pc, #52]	; (80077ac <__libc_init_array+0x3c>)
 8007776:	1b64      	subs	r4, r4, r5
 8007778:	10a4      	asrs	r4, r4, #2
 800777a:	2600      	movs	r6, #0
 800777c:	42a6      	cmp	r6, r4
 800777e:	d109      	bne.n	8007794 <__libc_init_array+0x24>
 8007780:	4d0b      	ldr	r5, [pc, #44]	; (80077b0 <__libc_init_array+0x40>)
 8007782:	4c0c      	ldr	r4, [pc, #48]	; (80077b4 <__libc_init_array+0x44>)
 8007784:	f004 fa96 	bl	800bcb4 <_init>
 8007788:	1b64      	subs	r4, r4, r5
 800778a:	10a4      	asrs	r4, r4, #2
 800778c:	2600      	movs	r6, #0
 800778e:	42a6      	cmp	r6, r4
 8007790:	d105      	bne.n	800779e <__libc_init_array+0x2e>
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	f855 3b04 	ldr.w	r3, [r5], #4
 8007798:	4798      	blx	r3
 800779a:	3601      	adds	r6, #1
 800779c:	e7ee      	b.n	800777c <__libc_init_array+0xc>
 800779e:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a2:	4798      	blx	r3
 80077a4:	3601      	adds	r6, #1
 80077a6:	e7f2      	b.n	800778e <__libc_init_array+0x1e>
 80077a8:	0800c2e8 	.word	0x0800c2e8
 80077ac:	0800c2e8 	.word	0x0800c2e8
 80077b0:	0800c2e8 	.word	0x0800c2e8
 80077b4:	0800c2ec 	.word	0x0800c2ec

080077b8 <memcpy>:
 80077b8:	440a      	add	r2, r1
 80077ba:	4291      	cmp	r1, r2
 80077bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c0:	d100      	bne.n	80077c4 <memcpy+0xc>
 80077c2:	4770      	bx	lr
 80077c4:	b510      	push	{r4, lr}
 80077c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ce:	4291      	cmp	r1, r2
 80077d0:	d1f9      	bne.n	80077c6 <memcpy+0xe>
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <memset>:
 80077d4:	4402      	add	r2, r0
 80077d6:	4603      	mov	r3, r0
 80077d8:	4293      	cmp	r3, r2
 80077da:	d100      	bne.n	80077de <memset+0xa>
 80077dc:	4770      	bx	lr
 80077de:	f803 1b01 	strb.w	r1, [r3], #1
 80077e2:	e7f9      	b.n	80077d8 <memset+0x4>

080077e4 <__cvt>:
 80077e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	ec55 4b10 	vmov	r4, r5, d0
 80077ec:	2d00      	cmp	r5, #0
 80077ee:	460e      	mov	r6, r1
 80077f0:	4619      	mov	r1, r3
 80077f2:	462b      	mov	r3, r5
 80077f4:	bfbb      	ittet	lt
 80077f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077fa:	461d      	movlt	r5, r3
 80077fc:	2300      	movge	r3, #0
 80077fe:	232d      	movlt	r3, #45	; 0x2d
 8007800:	700b      	strb	r3, [r1, #0]
 8007802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007804:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007808:	4691      	mov	r9, r2
 800780a:	f023 0820 	bic.w	r8, r3, #32
 800780e:	bfbc      	itt	lt
 8007810:	4622      	movlt	r2, r4
 8007812:	4614      	movlt	r4, r2
 8007814:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007818:	d005      	beq.n	8007826 <__cvt+0x42>
 800781a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800781e:	d100      	bne.n	8007822 <__cvt+0x3e>
 8007820:	3601      	adds	r6, #1
 8007822:	2102      	movs	r1, #2
 8007824:	e000      	b.n	8007828 <__cvt+0x44>
 8007826:	2103      	movs	r1, #3
 8007828:	ab03      	add	r3, sp, #12
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	ab02      	add	r3, sp, #8
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	ec45 4b10 	vmov	d0, r4, r5
 8007834:	4653      	mov	r3, sl
 8007836:	4632      	mov	r2, r6
 8007838:	f000 fd8a 	bl	8008350 <_dtoa_r>
 800783c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007840:	4607      	mov	r7, r0
 8007842:	d102      	bne.n	800784a <__cvt+0x66>
 8007844:	f019 0f01 	tst.w	r9, #1
 8007848:	d022      	beq.n	8007890 <__cvt+0xac>
 800784a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800784e:	eb07 0906 	add.w	r9, r7, r6
 8007852:	d110      	bne.n	8007876 <__cvt+0x92>
 8007854:	783b      	ldrb	r3, [r7, #0]
 8007856:	2b30      	cmp	r3, #48	; 0x30
 8007858:	d10a      	bne.n	8007870 <__cvt+0x8c>
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f9 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8007866:	b918      	cbnz	r0, 8007870 <__cvt+0x8c>
 8007868:	f1c6 0601 	rsb	r6, r6, #1
 800786c:	f8ca 6000 	str.w	r6, [sl]
 8007870:	f8da 3000 	ldr.w	r3, [sl]
 8007874:	4499      	add	r9, r3
 8007876:	2200      	movs	r2, #0
 8007878:	2300      	movs	r3, #0
 800787a:	4620      	mov	r0, r4
 800787c:	4629      	mov	r1, r5
 800787e:	f7f9 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8007882:	b108      	cbz	r0, 8007888 <__cvt+0xa4>
 8007884:	f8cd 900c 	str.w	r9, [sp, #12]
 8007888:	2230      	movs	r2, #48	; 0x30
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	454b      	cmp	r3, r9
 800788e:	d307      	bcc.n	80078a0 <__cvt+0xbc>
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007894:	1bdb      	subs	r3, r3, r7
 8007896:	4638      	mov	r0, r7
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	b004      	add	sp, #16
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	1c59      	adds	r1, r3, #1
 80078a2:	9103      	str	r1, [sp, #12]
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e7f0      	b.n	800788a <__cvt+0xa6>

080078a8 <__exponent>:
 80078a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078aa:	4603      	mov	r3, r0
 80078ac:	2900      	cmp	r1, #0
 80078ae:	bfb8      	it	lt
 80078b0:	4249      	neglt	r1, r1
 80078b2:	f803 2b02 	strb.w	r2, [r3], #2
 80078b6:	bfb4      	ite	lt
 80078b8:	222d      	movlt	r2, #45	; 0x2d
 80078ba:	222b      	movge	r2, #43	; 0x2b
 80078bc:	2909      	cmp	r1, #9
 80078be:	7042      	strb	r2, [r0, #1]
 80078c0:	dd2a      	ble.n	8007918 <__exponent+0x70>
 80078c2:	f10d 0407 	add.w	r4, sp, #7
 80078c6:	46a4      	mov	ip, r4
 80078c8:	270a      	movs	r7, #10
 80078ca:	46a6      	mov	lr, r4
 80078cc:	460a      	mov	r2, r1
 80078ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80078d2:	fb07 1516 	mls	r5, r7, r6, r1
 80078d6:	3530      	adds	r5, #48	; 0x30
 80078d8:	2a63      	cmp	r2, #99	; 0x63
 80078da:	f104 34ff 	add.w	r4, r4, #4294967295
 80078de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078e2:	4631      	mov	r1, r6
 80078e4:	dcf1      	bgt.n	80078ca <__exponent+0x22>
 80078e6:	3130      	adds	r1, #48	; 0x30
 80078e8:	f1ae 0502 	sub.w	r5, lr, #2
 80078ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078f0:	1c44      	adds	r4, r0, #1
 80078f2:	4629      	mov	r1, r5
 80078f4:	4561      	cmp	r1, ip
 80078f6:	d30a      	bcc.n	800790e <__exponent+0x66>
 80078f8:	f10d 0209 	add.w	r2, sp, #9
 80078fc:	eba2 020e 	sub.w	r2, r2, lr
 8007900:	4565      	cmp	r5, ip
 8007902:	bf88      	it	hi
 8007904:	2200      	movhi	r2, #0
 8007906:	4413      	add	r3, r2
 8007908:	1a18      	subs	r0, r3, r0
 800790a:	b003      	add	sp, #12
 800790c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007912:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007916:	e7ed      	b.n	80078f4 <__exponent+0x4c>
 8007918:	2330      	movs	r3, #48	; 0x30
 800791a:	3130      	adds	r1, #48	; 0x30
 800791c:	7083      	strb	r3, [r0, #2]
 800791e:	70c1      	strb	r1, [r0, #3]
 8007920:	1d03      	adds	r3, r0, #4
 8007922:	e7f1      	b.n	8007908 <__exponent+0x60>

08007924 <_printf_float>:
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	ed2d 8b02 	vpush	{d8}
 800792c:	b08d      	sub	sp, #52	; 0x34
 800792e:	460c      	mov	r4, r1
 8007930:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007934:	4616      	mov	r6, r2
 8007936:	461f      	mov	r7, r3
 8007938:	4605      	mov	r5, r0
 800793a:	f001 fcaf 	bl	800929c <_localeconv_r>
 800793e:	f8d0 a000 	ldr.w	sl, [r0]
 8007942:	4650      	mov	r0, sl
 8007944:	f7f8 fc44 	bl	80001d0 <strlen>
 8007948:	2300      	movs	r3, #0
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	f8d8 3000 	ldr.w	r3, [r8]
 8007954:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007958:	3307      	adds	r3, #7
 800795a:	f023 0307 	bic.w	r3, r3, #7
 800795e:	f103 0208 	add.w	r2, r3, #8
 8007962:	f8c8 2000 	str.w	r2, [r8]
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800796e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007976:	9307      	str	r3, [sp, #28]
 8007978:	f8cd 8018 	str.w	r8, [sp, #24]
 800797c:	ee08 0a10 	vmov	s16, r0
 8007980:	4b9f      	ldr	r3, [pc, #636]	; (8007c00 <_printf_float+0x2dc>)
 8007982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007986:	f04f 32ff 	mov.w	r2, #4294967295
 800798a:	f7f9 f8cf 	bl	8000b2c <__aeabi_dcmpun>
 800798e:	bb88      	cbnz	r0, 80079f4 <_printf_float+0xd0>
 8007990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007994:	4b9a      	ldr	r3, [pc, #616]	; (8007c00 <_printf_float+0x2dc>)
 8007996:	f04f 32ff 	mov.w	r2, #4294967295
 800799a:	f7f9 f8a9 	bl	8000af0 <__aeabi_dcmple>
 800799e:	bb48      	cbnz	r0, 80079f4 <_printf_float+0xd0>
 80079a0:	2200      	movs	r2, #0
 80079a2:	2300      	movs	r3, #0
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f9 f898 	bl	8000adc <__aeabi_dcmplt>
 80079ac:	b110      	cbz	r0, 80079b4 <_printf_float+0x90>
 80079ae:	232d      	movs	r3, #45	; 0x2d
 80079b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b4:	4b93      	ldr	r3, [pc, #588]	; (8007c04 <_printf_float+0x2e0>)
 80079b6:	4894      	ldr	r0, [pc, #592]	; (8007c08 <_printf_float+0x2e4>)
 80079b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079bc:	bf94      	ite	ls
 80079be:	4698      	movls	r8, r3
 80079c0:	4680      	movhi	r8, r0
 80079c2:	2303      	movs	r3, #3
 80079c4:	6123      	str	r3, [r4, #16]
 80079c6:	9b05      	ldr	r3, [sp, #20]
 80079c8:	f023 0204 	bic.w	r2, r3, #4
 80079cc:	6022      	str	r2, [r4, #0]
 80079ce:	f04f 0900 	mov.w	r9, #0
 80079d2:	9700      	str	r7, [sp, #0]
 80079d4:	4633      	mov	r3, r6
 80079d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f9d8 	bl	8007d90 <_printf_common>
 80079e0:	3001      	adds	r0, #1
 80079e2:	f040 8090 	bne.w	8007b06 <_printf_float+0x1e2>
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ea:	b00d      	add	sp, #52	; 0x34
 80079ec:	ecbd 8b02 	vpop	{d8}
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	4649      	mov	r1, r9
 80079fc:	f7f9 f896 	bl	8000b2c <__aeabi_dcmpun>
 8007a00:	b140      	cbz	r0, 8007a14 <_printf_float+0xf0>
 8007a02:	464b      	mov	r3, r9
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfbc      	itt	lt
 8007a08:	232d      	movlt	r3, #45	; 0x2d
 8007a0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a0e:	487f      	ldr	r0, [pc, #508]	; (8007c0c <_printf_float+0x2e8>)
 8007a10:	4b7f      	ldr	r3, [pc, #508]	; (8007c10 <_printf_float+0x2ec>)
 8007a12:	e7d1      	b.n	80079b8 <_printf_float+0x94>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a1a:	9206      	str	r2, [sp, #24]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	d13f      	bne.n	8007aa0 <_printf_float+0x17c>
 8007a20:	2306      	movs	r3, #6
 8007a22:	6063      	str	r3, [r4, #4]
 8007a24:	9b05      	ldr	r3, [sp, #20]
 8007a26:	6861      	ldr	r1, [r4, #4]
 8007a28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	ab0a      	add	r3, sp, #40	; 0x28
 8007a32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a36:	ab09      	add	r3, sp, #36	; 0x24
 8007a38:	ec49 8b10 	vmov	d0, r8, r9
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	6022      	str	r2, [r4, #0]
 8007a40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a44:	4628      	mov	r0, r5
 8007a46:	f7ff fecd 	bl	80077e4 <__cvt>
 8007a4a:	9b06      	ldr	r3, [sp, #24]
 8007a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a4e:	2b47      	cmp	r3, #71	; 0x47
 8007a50:	4680      	mov	r8, r0
 8007a52:	d108      	bne.n	8007a66 <_printf_float+0x142>
 8007a54:	1cc8      	adds	r0, r1, #3
 8007a56:	db02      	blt.n	8007a5e <_printf_float+0x13a>
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	dd41      	ble.n	8007ae2 <_printf_float+0x1be>
 8007a5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a62:	fa5f fb8b 	uxtb.w	fp, fp
 8007a66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a6a:	d820      	bhi.n	8007aae <_printf_float+0x18a>
 8007a6c:	3901      	subs	r1, #1
 8007a6e:	465a      	mov	r2, fp
 8007a70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a74:	9109      	str	r1, [sp, #36]	; 0x24
 8007a76:	f7ff ff17 	bl	80078a8 <__exponent>
 8007a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a7c:	1813      	adds	r3, r2, r0
 8007a7e:	2a01      	cmp	r2, #1
 8007a80:	4681      	mov	r9, r0
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	dc02      	bgt.n	8007a8c <_printf_float+0x168>
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	07d2      	lsls	r2, r2, #31
 8007a8a:	d501      	bpl.n	8007a90 <_printf_float+0x16c>
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	6123      	str	r3, [r4, #16]
 8007a90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d09c      	beq.n	80079d2 <_printf_float+0xae>
 8007a98:	232d      	movs	r3, #45	; 0x2d
 8007a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9e:	e798      	b.n	80079d2 <_printf_float+0xae>
 8007aa0:	9a06      	ldr	r2, [sp, #24]
 8007aa2:	2a47      	cmp	r2, #71	; 0x47
 8007aa4:	d1be      	bne.n	8007a24 <_printf_float+0x100>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1bc      	bne.n	8007a24 <_printf_float+0x100>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e7b9      	b.n	8007a22 <_printf_float+0xfe>
 8007aae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ab2:	d118      	bne.n	8007ae6 <_printf_float+0x1c2>
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	6863      	ldr	r3, [r4, #4]
 8007ab8:	dd0b      	ble.n	8007ad2 <_printf_float+0x1ae>
 8007aba:	6121      	str	r1, [r4, #16]
 8007abc:	b913      	cbnz	r3, 8007ac4 <_printf_float+0x1a0>
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	07d0      	lsls	r0, r2, #31
 8007ac2:	d502      	bpl.n	8007aca <_printf_float+0x1a6>
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	440b      	add	r3, r1
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	65a1      	str	r1, [r4, #88]	; 0x58
 8007acc:	f04f 0900 	mov.w	r9, #0
 8007ad0:	e7de      	b.n	8007a90 <_printf_float+0x16c>
 8007ad2:	b913      	cbnz	r3, 8007ada <_printf_float+0x1b6>
 8007ad4:	6822      	ldr	r2, [r4, #0]
 8007ad6:	07d2      	lsls	r2, r2, #31
 8007ad8:	d501      	bpl.n	8007ade <_printf_float+0x1ba>
 8007ada:	3302      	adds	r3, #2
 8007adc:	e7f4      	b.n	8007ac8 <_printf_float+0x1a4>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e7f2      	b.n	8007ac8 <_printf_float+0x1a4>
 8007ae2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	db05      	blt.n	8007af8 <_printf_float+0x1d4>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	6121      	str	r1, [r4, #16]
 8007af0:	07d8      	lsls	r0, r3, #31
 8007af2:	d5ea      	bpl.n	8007aca <_printf_float+0x1a6>
 8007af4:	1c4b      	adds	r3, r1, #1
 8007af6:	e7e7      	b.n	8007ac8 <_printf_float+0x1a4>
 8007af8:	2900      	cmp	r1, #0
 8007afa:	bfd4      	ite	le
 8007afc:	f1c1 0202 	rsble	r2, r1, #2
 8007b00:	2201      	movgt	r2, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	e7e0      	b.n	8007ac8 <_printf_float+0x1a4>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	055a      	lsls	r2, r3, #21
 8007b0a:	d407      	bmi.n	8007b1c <_printf_float+0x1f8>
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	4642      	mov	r2, r8
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	d12c      	bne.n	8007b74 <_printf_float+0x250>
 8007b1a:	e764      	b.n	80079e6 <_printf_float+0xc2>
 8007b1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b20:	f240 80e0 	bls.w	8007ce4 <_printf_float+0x3c0>
 8007b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f7f8 ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d034      	beq.n	8007b9e <_printf_float+0x27a>
 8007b34:	4a37      	ldr	r2, [pc, #220]	; (8007c14 <_printf_float+0x2f0>)
 8007b36:	2301      	movs	r3, #1
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f af51 	beq.w	80079e6 <_printf_float+0xc2>
 8007b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	db02      	blt.n	8007b52 <_printf_float+0x22e>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	07d8      	lsls	r0, r3, #31
 8007b50:	d510      	bpl.n	8007b74 <_printf_float+0x250>
 8007b52:	ee18 3a10 	vmov	r3, s16
 8007b56:	4652      	mov	r2, sl
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b8      	blx	r7
 8007b5e:	3001      	adds	r0, #1
 8007b60:	f43f af41 	beq.w	80079e6 <_printf_float+0xc2>
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	f104 091a 	add.w	r9, r4, #26
 8007b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	4543      	cmp	r3, r8
 8007b72:	dc09      	bgt.n	8007b88 <_printf_float+0x264>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	f100 8105 	bmi.w	8007d86 <_printf_float+0x462>
 8007b7c:	68e0      	ldr	r0, [r4, #12]
 8007b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b80:	4298      	cmp	r0, r3
 8007b82:	bfb8      	it	lt
 8007b84:	4618      	movlt	r0, r3
 8007b86:	e730      	b.n	80079ea <_printf_float+0xc6>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	464a      	mov	r2, r9
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f af27 	beq.w	80079e6 <_printf_float+0xc2>
 8007b98:	f108 0801 	add.w	r8, r8, #1
 8007b9c:	e7e6      	b.n	8007b6c <_printf_float+0x248>
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	dc39      	bgt.n	8007c18 <_printf_float+0x2f4>
 8007ba4:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <_printf_float+0x2f0>)
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f43f af19 	beq.w	80079e6 <_printf_float+0xc2>
 8007bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d102      	bne.n	8007bc2 <_printf_float+0x29e>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	07d9      	lsls	r1, r3, #31
 8007bc0:	d5d8      	bpl.n	8007b74 <_printf_float+0x250>
 8007bc2:	ee18 3a10 	vmov	r3, s16
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b8      	blx	r7
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f43f af09 	beq.w	80079e6 <_printf_float+0xc2>
 8007bd4:	f04f 0900 	mov.w	r9, #0
 8007bd8:	f104 0a1a 	add.w	sl, r4, #26
 8007bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bde:	425b      	negs	r3, r3
 8007be0:	454b      	cmp	r3, r9
 8007be2:	dc01      	bgt.n	8007be8 <_printf_float+0x2c4>
 8007be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be6:	e792      	b.n	8007b0e <_printf_float+0x1ea>
 8007be8:	2301      	movs	r3, #1
 8007bea:	4652      	mov	r2, sl
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f aef7 	beq.w	80079e6 <_printf_float+0xc2>
 8007bf8:	f109 0901 	add.w	r9, r9, #1
 8007bfc:	e7ee      	b.n	8007bdc <_printf_float+0x2b8>
 8007bfe:	bf00      	nop
 8007c00:	7fefffff 	.word	0x7fefffff
 8007c04:	0800bcec 	.word	0x0800bcec
 8007c08:	0800bcf0 	.word	0x0800bcf0
 8007c0c:	0800bcf8 	.word	0x0800bcf8
 8007c10:	0800bcf4 	.word	0x0800bcf4
 8007c14:	0800bcfc 	.word	0x0800bcfc
 8007c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	bfa8      	it	ge
 8007c20:	461a      	movge	r2, r3
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	4691      	mov	r9, r2
 8007c26:	dc37      	bgt.n	8007c98 <_printf_float+0x374>
 8007c28:	f04f 0b00 	mov.w	fp, #0
 8007c2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c30:	f104 021a 	add.w	r2, r4, #26
 8007c34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c36:	9305      	str	r3, [sp, #20]
 8007c38:	eba3 0309 	sub.w	r3, r3, r9
 8007c3c:	455b      	cmp	r3, fp
 8007c3e:	dc33      	bgt.n	8007ca8 <_printf_float+0x384>
 8007c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c44:	429a      	cmp	r2, r3
 8007c46:	db3b      	blt.n	8007cc0 <_printf_float+0x39c>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	07da      	lsls	r2, r3, #31
 8007c4c:	d438      	bmi.n	8007cc0 <_printf_float+0x39c>
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	9a05      	ldr	r2, [sp, #20]
 8007c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c54:	1a9a      	subs	r2, r3, r2
 8007c56:	eba3 0901 	sub.w	r9, r3, r1
 8007c5a:	4591      	cmp	r9, r2
 8007c5c:	bfa8      	it	ge
 8007c5e:	4691      	movge	r9, r2
 8007c60:	f1b9 0f00 	cmp.w	r9, #0
 8007c64:	dc35      	bgt.n	8007cd2 <_printf_float+0x3ae>
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c6e:	f104 0a1a 	add.w	sl, r4, #26
 8007c72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	eba3 0309 	sub.w	r3, r3, r9
 8007c7c:	4543      	cmp	r3, r8
 8007c7e:	f77f af79 	ble.w	8007b74 <_printf_float+0x250>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4652      	mov	r2, sl
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f43f aeaa 	beq.w	80079e6 <_printf_float+0xc2>
 8007c92:	f108 0801 	add.w	r8, r8, #1
 8007c96:	e7ec      	b.n	8007c72 <_printf_float+0x34e>
 8007c98:	4613      	mov	r3, r2
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d1c0      	bne.n	8007c28 <_printf_float+0x304>
 8007ca6:	e69e      	b.n	80079e6 <_printf_float+0xc2>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	9205      	str	r2, [sp, #20]
 8007cb0:	47b8      	blx	r7
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f43f ae97 	beq.w	80079e6 <_printf_float+0xc2>
 8007cb8:	9a05      	ldr	r2, [sp, #20]
 8007cba:	f10b 0b01 	add.w	fp, fp, #1
 8007cbe:	e7b9      	b.n	8007c34 <_printf_float+0x310>
 8007cc0:	ee18 3a10 	vmov	r3, s16
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d1be      	bne.n	8007c4e <_printf_float+0x32a>
 8007cd0:	e689      	b.n	80079e6 <_printf_float+0xc2>
 8007cd2:	9a05      	ldr	r2, [sp, #20]
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	4442      	add	r2, r8
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d1c1      	bne.n	8007c66 <_printf_float+0x342>
 8007ce2:	e680      	b.n	80079e6 <_printf_float+0xc2>
 8007ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce6:	2a01      	cmp	r2, #1
 8007ce8:	dc01      	bgt.n	8007cee <_printf_float+0x3ca>
 8007cea:	07db      	lsls	r3, r3, #31
 8007cec:	d538      	bpl.n	8007d60 <_printf_float+0x43c>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f ae74 	beq.w	80079e6 <_printf_float+0xc2>
 8007cfe:	ee18 3a10 	vmov	r3, s16
 8007d02:	4652      	mov	r2, sl
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f43f ae6b 	beq.w	80079e6 <_printf_float+0xc2>
 8007d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d14:	2200      	movs	r2, #0
 8007d16:	2300      	movs	r3, #0
 8007d18:	f7f8 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d1c:	b9d8      	cbnz	r0, 8007d56 <_printf_float+0x432>
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d20:	f108 0201 	add.w	r2, r8, #1
 8007d24:	3b01      	subs	r3, #1
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d10e      	bne.n	8007d4e <_printf_float+0x42a>
 8007d30:	e659      	b.n	80079e6 <_printf_float+0xc2>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4652      	mov	r2, sl
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f43f ae52 	beq.w	80079e6 <_printf_float+0xc2>
 8007d42:	f108 0801 	add.w	r8, r8, #1
 8007d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	4543      	cmp	r3, r8
 8007d4c:	dcf1      	bgt.n	8007d32 <_printf_float+0x40e>
 8007d4e:	464b      	mov	r3, r9
 8007d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d54:	e6dc      	b.n	8007b10 <_printf_float+0x1ec>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	f104 0a1a 	add.w	sl, r4, #26
 8007d5e:	e7f2      	b.n	8007d46 <_printf_float+0x422>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4642      	mov	r2, r8
 8007d64:	e7df      	b.n	8007d26 <_printf_float+0x402>
 8007d66:	2301      	movs	r3, #1
 8007d68:	464a      	mov	r2, r9
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f ae38 	beq.w	80079e6 <_printf_float+0xc2>
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	68e3      	ldr	r3, [r4, #12]
 8007d7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d7e:	1a5b      	subs	r3, r3, r1
 8007d80:	4543      	cmp	r3, r8
 8007d82:	dcf0      	bgt.n	8007d66 <_printf_float+0x442>
 8007d84:	e6fa      	b.n	8007b7c <_printf_float+0x258>
 8007d86:	f04f 0800 	mov.w	r8, #0
 8007d8a:	f104 0919 	add.w	r9, r4, #25
 8007d8e:	e7f4      	b.n	8007d7a <_printf_float+0x456>

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4616      	mov	r6, r2
 8007d96:	4699      	mov	r9, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfb8      	it	lt
 8007da4:	4613      	movlt	r3, r2
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dac:	4607      	mov	r7, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b10a      	cbz	r2, 8007db6 <_printf_common+0x26>
 8007db2:	3301      	adds	r3, #1
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	0699      	lsls	r1, r3, #26
 8007dba:	bf42      	ittt	mi
 8007dbc:	6833      	ldrmi	r3, [r6, #0]
 8007dbe:	3302      	addmi	r3, #2
 8007dc0:	6033      	strmi	r3, [r6, #0]
 8007dc2:	6825      	ldr	r5, [r4, #0]
 8007dc4:	f015 0506 	ands.w	r5, r5, #6
 8007dc8:	d106      	bne.n	8007dd8 <_printf_common+0x48>
 8007dca:	f104 0a19 	add.w	sl, r4, #25
 8007dce:	68e3      	ldr	r3, [r4, #12]
 8007dd0:	6832      	ldr	r2, [r6, #0]
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dc26      	bgt.n	8007e26 <_printf_common+0x96>
 8007dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ddc:	1e13      	subs	r3, r2, #0
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	bf18      	it	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	0692      	lsls	r2, r2, #26
 8007de6:	d42b      	bmi.n	8007e40 <_printf_common+0xb0>
 8007de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dec:	4649      	mov	r1, r9
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c0      	blx	r8
 8007df2:	3001      	adds	r0, #1
 8007df4:	d01e      	beq.n	8007e34 <_printf_common+0xa4>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	68e5      	ldr	r5, [r4, #12]
 8007dfa:	6832      	ldr	r2, [r6, #0]
 8007dfc:	f003 0306 	and.w	r3, r3, #6
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	bf08      	it	eq
 8007e04:	1aad      	subeq	r5, r5, r2
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	6922      	ldr	r2, [r4, #16]
 8007e0a:	bf0c      	ite	eq
 8007e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e10:	2500      	movne	r5, #0
 8007e12:	4293      	cmp	r3, r2
 8007e14:	bfc4      	itt	gt
 8007e16:	1a9b      	subgt	r3, r3, r2
 8007e18:	18ed      	addgt	r5, r5, r3
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	341a      	adds	r4, #26
 8007e1e:	42b5      	cmp	r5, r6
 8007e20:	d11a      	bne.n	8007e58 <_printf_common+0xc8>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e008      	b.n	8007e38 <_printf_common+0xa8>
 8007e26:	2301      	movs	r3, #1
 8007e28:	4652      	mov	r2, sl
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	47c0      	blx	r8
 8007e30:	3001      	adds	r0, #1
 8007e32:	d103      	bne.n	8007e3c <_printf_common+0xac>
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3c:	3501      	adds	r5, #1
 8007e3e:	e7c6      	b.n	8007dce <_printf_common+0x3e>
 8007e40:	18e1      	adds	r1, r4, r3
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	2030      	movs	r0, #48	; 0x30
 8007e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e4a:	4422      	add	r2, r4
 8007e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e54:	3302      	adds	r3, #2
 8007e56:	e7c7      	b.n	8007de8 <_printf_common+0x58>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	4638      	mov	r0, r7
 8007e60:	47c0      	blx	r8
 8007e62:	3001      	adds	r0, #1
 8007e64:	d0e6      	beq.n	8007e34 <_printf_common+0xa4>
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7d9      	b.n	8007e1e <_printf_common+0x8e>
	...

08007e6c <_printf_i>:
 8007e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	7e0f      	ldrb	r7, [r1, #24]
 8007e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e74:	2f78      	cmp	r7, #120	; 0x78
 8007e76:	4691      	mov	r9, r2
 8007e78:	4680      	mov	r8, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e82:	d807      	bhi.n	8007e94 <_printf_i+0x28>
 8007e84:	2f62      	cmp	r7, #98	; 0x62
 8007e86:	d80a      	bhi.n	8007e9e <_printf_i+0x32>
 8007e88:	2f00      	cmp	r7, #0
 8007e8a:	f000 80d8 	beq.w	800803e <_printf_i+0x1d2>
 8007e8e:	2f58      	cmp	r7, #88	; 0x58
 8007e90:	f000 80a3 	beq.w	8007fda <_printf_i+0x16e>
 8007e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e9c:	e03a      	b.n	8007f14 <_printf_i+0xa8>
 8007e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ea2:	2b15      	cmp	r3, #21
 8007ea4:	d8f6      	bhi.n	8007e94 <_printf_i+0x28>
 8007ea6:	a101      	add	r1, pc, #4	; (adr r1, 8007eac <_printf_i+0x40>)
 8007ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eac:	08007f05 	.word	0x08007f05
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007e95 	.word	0x08007e95
 8007eb8:	08007e95 	.word	0x08007e95
 8007ebc:	08007e95 	.word	0x08007e95
 8007ec0:	08007e95 	.word	0x08007e95
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007e95 	.word	0x08007e95
 8007ecc:	08007e95 	.word	0x08007e95
 8007ed0:	08007e95 	.word	0x08007e95
 8007ed4:	08007e95 	.word	0x08007e95
 8007ed8:	08008025 	.word	0x08008025
 8007edc:	08007f49 	.word	0x08007f49
 8007ee0:	08008007 	.word	0x08008007
 8007ee4:	08007e95 	.word	0x08007e95
 8007ee8:	08007e95 	.word	0x08007e95
 8007eec:	08008047 	.word	0x08008047
 8007ef0:	08007e95 	.word	0x08007e95
 8007ef4:	08007f49 	.word	0x08007f49
 8007ef8:	08007e95 	.word	0x08007e95
 8007efc:	08007e95 	.word	0x08007e95
 8007f00:	0800800f 	.word	0x0800800f
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	602a      	str	r2, [r5, #0]
 8007f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f14:	2301      	movs	r3, #1
 8007f16:	e0a3      	b.n	8008060 <_printf_i+0x1f4>
 8007f18:	6820      	ldr	r0, [r4, #0]
 8007f1a:	6829      	ldr	r1, [r5, #0]
 8007f1c:	0606      	lsls	r6, r0, #24
 8007f1e:	f101 0304 	add.w	r3, r1, #4
 8007f22:	d50a      	bpl.n	8007f3a <_printf_i+0xce>
 8007f24:	680e      	ldr	r6, [r1, #0]
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	da03      	bge.n	8007f34 <_printf_i+0xc8>
 8007f2c:	232d      	movs	r3, #45	; 0x2d
 8007f2e:	4276      	negs	r6, r6
 8007f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f34:	485e      	ldr	r0, [pc, #376]	; (80080b0 <_printf_i+0x244>)
 8007f36:	230a      	movs	r3, #10
 8007f38:	e019      	b.n	8007f6e <_printf_i+0x102>
 8007f3a:	680e      	ldr	r6, [r1, #0]
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f42:	bf18      	it	ne
 8007f44:	b236      	sxthne	r6, r6
 8007f46:	e7ef      	b.n	8007f28 <_printf_i+0xbc>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	6820      	ldr	r0, [r4, #0]
 8007f4c:	1d19      	adds	r1, r3, #4
 8007f4e:	6029      	str	r1, [r5, #0]
 8007f50:	0601      	lsls	r1, r0, #24
 8007f52:	d501      	bpl.n	8007f58 <_printf_i+0xec>
 8007f54:	681e      	ldr	r6, [r3, #0]
 8007f56:	e002      	b.n	8007f5e <_printf_i+0xf2>
 8007f58:	0646      	lsls	r6, r0, #25
 8007f5a:	d5fb      	bpl.n	8007f54 <_printf_i+0xe8>
 8007f5c:	881e      	ldrh	r6, [r3, #0]
 8007f5e:	4854      	ldr	r0, [pc, #336]	; (80080b0 <_printf_i+0x244>)
 8007f60:	2f6f      	cmp	r7, #111	; 0x6f
 8007f62:	bf0c      	ite	eq
 8007f64:	2308      	moveq	r3, #8
 8007f66:	230a      	movne	r3, #10
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f6e:	6865      	ldr	r5, [r4, #4]
 8007f70:	60a5      	str	r5, [r4, #8]
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	bfa2      	ittt	ge
 8007f76:	6821      	ldrge	r1, [r4, #0]
 8007f78:	f021 0104 	bicge.w	r1, r1, #4
 8007f7c:	6021      	strge	r1, [r4, #0]
 8007f7e:	b90e      	cbnz	r6, 8007f84 <_printf_i+0x118>
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	d04d      	beq.n	8008020 <_printf_i+0x1b4>
 8007f84:	4615      	mov	r5, r2
 8007f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f8e:	5dc7      	ldrb	r7, [r0, r7]
 8007f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f94:	4637      	mov	r7, r6
 8007f96:	42bb      	cmp	r3, r7
 8007f98:	460e      	mov	r6, r1
 8007f9a:	d9f4      	bls.n	8007f86 <_printf_i+0x11a>
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d10b      	bne.n	8007fb8 <_printf_i+0x14c>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	07de      	lsls	r6, r3, #31
 8007fa4:	d508      	bpl.n	8007fb8 <_printf_i+0x14c>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	6861      	ldr	r1, [r4, #4]
 8007faa:	4299      	cmp	r1, r3
 8007fac:	bfde      	ittt	le
 8007fae:	2330      	movle	r3, #48	; 0x30
 8007fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fb8:	1b52      	subs	r2, r2, r5
 8007fba:	6122      	str	r2, [r4, #16]
 8007fbc:	f8cd a000 	str.w	sl, [sp]
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	aa03      	add	r2, sp, #12
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f7ff fee2 	bl	8007d90 <_printf_common>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d14c      	bne.n	800806a <_printf_i+0x1fe>
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	b004      	add	sp, #16
 8007fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fda:	4835      	ldr	r0, [pc, #212]	; (80080b0 <_printf_i+0x244>)
 8007fdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fe0:	6829      	ldr	r1, [r5, #0]
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fe8:	6029      	str	r1, [r5, #0]
 8007fea:	061d      	lsls	r5, r3, #24
 8007fec:	d514      	bpl.n	8008018 <_printf_i+0x1ac>
 8007fee:	07df      	lsls	r7, r3, #31
 8007ff0:	bf44      	itt	mi
 8007ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ff6:	6023      	strmi	r3, [r4, #0]
 8007ff8:	b91e      	cbnz	r6, 8008002 <_printf_i+0x196>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	f023 0320 	bic.w	r3, r3, #32
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	2310      	movs	r3, #16
 8008004:	e7b0      	b.n	8007f68 <_printf_i+0xfc>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	f043 0320 	orr.w	r3, r3, #32
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	2378      	movs	r3, #120	; 0x78
 8008010:	4828      	ldr	r0, [pc, #160]	; (80080b4 <_printf_i+0x248>)
 8008012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008016:	e7e3      	b.n	8007fe0 <_printf_i+0x174>
 8008018:	0659      	lsls	r1, r3, #25
 800801a:	bf48      	it	mi
 800801c:	b2b6      	uxthmi	r6, r6
 800801e:	e7e6      	b.n	8007fee <_printf_i+0x182>
 8008020:	4615      	mov	r5, r2
 8008022:	e7bb      	b.n	8007f9c <_printf_i+0x130>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	6826      	ldr	r6, [r4, #0]
 8008028:	6961      	ldr	r1, [r4, #20]
 800802a:	1d18      	adds	r0, r3, #4
 800802c:	6028      	str	r0, [r5, #0]
 800802e:	0635      	lsls	r5, r6, #24
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	d501      	bpl.n	8008038 <_printf_i+0x1cc>
 8008034:	6019      	str	r1, [r3, #0]
 8008036:	e002      	b.n	800803e <_printf_i+0x1d2>
 8008038:	0670      	lsls	r0, r6, #25
 800803a:	d5fb      	bpl.n	8008034 <_printf_i+0x1c8>
 800803c:	8019      	strh	r1, [r3, #0]
 800803e:	2300      	movs	r3, #0
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	4615      	mov	r5, r2
 8008044:	e7ba      	b.n	8007fbc <_printf_i+0x150>
 8008046:	682b      	ldr	r3, [r5, #0]
 8008048:	1d1a      	adds	r2, r3, #4
 800804a:	602a      	str	r2, [r5, #0]
 800804c:	681d      	ldr	r5, [r3, #0]
 800804e:	6862      	ldr	r2, [r4, #4]
 8008050:	2100      	movs	r1, #0
 8008052:	4628      	mov	r0, r5
 8008054:	f7f8 f8c4 	bl	80001e0 <memchr>
 8008058:	b108      	cbz	r0, 800805e <_printf_i+0x1f2>
 800805a:	1b40      	subs	r0, r0, r5
 800805c:	6060      	str	r0, [r4, #4]
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	2300      	movs	r3, #0
 8008064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008068:	e7a8      	b.n	8007fbc <_printf_i+0x150>
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	462a      	mov	r2, r5
 800806e:	4649      	mov	r1, r9
 8008070:	4640      	mov	r0, r8
 8008072:	47d0      	blx	sl
 8008074:	3001      	adds	r0, #1
 8008076:	d0ab      	beq.n	8007fd0 <_printf_i+0x164>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	079b      	lsls	r3, r3, #30
 800807c:	d413      	bmi.n	80080a6 <_printf_i+0x23a>
 800807e:	68e0      	ldr	r0, [r4, #12]
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	4298      	cmp	r0, r3
 8008084:	bfb8      	it	lt
 8008086:	4618      	movlt	r0, r3
 8008088:	e7a4      	b.n	8007fd4 <_printf_i+0x168>
 800808a:	2301      	movs	r3, #1
 800808c:	4632      	mov	r2, r6
 800808e:	4649      	mov	r1, r9
 8008090:	4640      	mov	r0, r8
 8008092:	47d0      	blx	sl
 8008094:	3001      	adds	r0, #1
 8008096:	d09b      	beq.n	8007fd0 <_printf_i+0x164>
 8008098:	3501      	adds	r5, #1
 800809a:	68e3      	ldr	r3, [r4, #12]
 800809c:	9903      	ldr	r1, [sp, #12]
 800809e:	1a5b      	subs	r3, r3, r1
 80080a0:	42ab      	cmp	r3, r5
 80080a2:	dcf2      	bgt.n	800808a <_printf_i+0x21e>
 80080a4:	e7eb      	b.n	800807e <_printf_i+0x212>
 80080a6:	2500      	movs	r5, #0
 80080a8:	f104 0619 	add.w	r6, r4, #25
 80080ac:	e7f5      	b.n	800809a <_printf_i+0x22e>
 80080ae:	bf00      	nop
 80080b0:	0800bcfe 	.word	0x0800bcfe
 80080b4:	0800bd0f 	.word	0x0800bd0f

080080b8 <__swbuf_r>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	460e      	mov	r6, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	4605      	mov	r5, r0
 80080c0:	b118      	cbz	r0, 80080ca <__swbuf_r+0x12>
 80080c2:	6983      	ldr	r3, [r0, #24]
 80080c4:	b90b      	cbnz	r3, 80080ca <__swbuf_r+0x12>
 80080c6:	f001 f84b 	bl	8009160 <__sinit>
 80080ca:	4b21      	ldr	r3, [pc, #132]	; (8008150 <__swbuf_r+0x98>)
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d12b      	bne.n	8008128 <__swbuf_r+0x70>
 80080d0:	686c      	ldr	r4, [r5, #4]
 80080d2:	69a3      	ldr	r3, [r4, #24]
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	071a      	lsls	r2, r3, #28
 80080da:	d52f      	bpl.n	800813c <__swbuf_r+0x84>
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b36b      	cbz	r3, 800813c <__swbuf_r+0x84>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	6820      	ldr	r0, [r4, #0]
 80080e4:	1ac0      	subs	r0, r0, r3
 80080e6:	6963      	ldr	r3, [r4, #20]
 80080e8:	b2f6      	uxtb	r6, r6
 80080ea:	4283      	cmp	r3, r0
 80080ec:	4637      	mov	r7, r6
 80080ee:	dc04      	bgt.n	80080fa <__swbuf_r+0x42>
 80080f0:	4621      	mov	r1, r4
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 ffa0 	bl	8009038 <_fflush_r>
 80080f8:	bb30      	cbnz	r0, 8008148 <__swbuf_r+0x90>
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	6022      	str	r2, [r4, #0]
 8008106:	701e      	strb	r6, [r3, #0]
 8008108:	6963      	ldr	r3, [r4, #20]
 800810a:	3001      	adds	r0, #1
 800810c:	4283      	cmp	r3, r0
 800810e:	d004      	beq.n	800811a <__swbuf_r+0x62>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	07db      	lsls	r3, r3, #31
 8008114:	d506      	bpl.n	8008124 <__swbuf_r+0x6c>
 8008116:	2e0a      	cmp	r6, #10
 8008118:	d104      	bne.n	8008124 <__swbuf_r+0x6c>
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f000 ff8b 	bl	8009038 <_fflush_r>
 8008122:	b988      	cbnz	r0, 8008148 <__swbuf_r+0x90>
 8008124:	4638      	mov	r0, r7
 8008126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <__swbuf_r+0x9c>)
 800812a:	429c      	cmp	r4, r3
 800812c:	d101      	bne.n	8008132 <__swbuf_r+0x7a>
 800812e:	68ac      	ldr	r4, [r5, #8]
 8008130:	e7cf      	b.n	80080d2 <__swbuf_r+0x1a>
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <__swbuf_r+0xa0>)
 8008134:	429c      	cmp	r4, r3
 8008136:	bf08      	it	eq
 8008138:	68ec      	ldreq	r4, [r5, #12]
 800813a:	e7ca      	b.n	80080d2 <__swbuf_r+0x1a>
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f80c 	bl	800815c <__swsetup_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	d0cb      	beq.n	80080e0 <__swbuf_r+0x28>
 8008148:	f04f 37ff 	mov.w	r7, #4294967295
 800814c:	e7ea      	b.n	8008124 <__swbuf_r+0x6c>
 800814e:	bf00      	nop
 8008150:	0800bdd0 	.word	0x0800bdd0
 8008154:	0800bdf0 	.word	0x0800bdf0
 8008158:	0800bdb0 	.word	0x0800bdb0

0800815c <__swsetup_r>:
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <__swsetup_r+0xcc>)
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	4606      	mov	r6, r0
 8008164:	460c      	mov	r4, r1
 8008166:	b125      	cbz	r5, 8008172 <__swsetup_r+0x16>
 8008168:	69ab      	ldr	r3, [r5, #24]
 800816a:	b913      	cbnz	r3, 8008172 <__swsetup_r+0x16>
 800816c:	4628      	mov	r0, r5
 800816e:	f000 fff7 	bl	8009160 <__sinit>
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <__swsetup_r+0xd0>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d10f      	bne.n	8008198 <__swsetup_r+0x3c>
 8008178:	686c      	ldr	r4, [r5, #4]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d42c      	bmi.n	80081de <__swsetup_r+0x82>
 8008184:	06dd      	lsls	r5, r3, #27
 8008186:	d411      	bmi.n	80081ac <__swsetup_r+0x50>
 8008188:	2309      	movs	r3, #9
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	e03e      	b.n	8008216 <__swsetup_r+0xba>
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <__swsetup_r+0xd4>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d101      	bne.n	80081a2 <__swsetup_r+0x46>
 800819e:	68ac      	ldr	r4, [r5, #8]
 80081a0:	e7eb      	b.n	800817a <__swsetup_r+0x1e>
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <__swsetup_r+0xd8>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	bf08      	it	eq
 80081a8:	68ec      	ldreq	r4, [r5, #12]
 80081aa:	e7e6      	b.n	800817a <__swsetup_r+0x1e>
 80081ac:	0758      	lsls	r0, r3, #29
 80081ae:	d512      	bpl.n	80081d6 <__swsetup_r+0x7a>
 80081b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b2:	b141      	cbz	r1, 80081c6 <__swsetup_r+0x6a>
 80081b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d002      	beq.n	80081c2 <__swsetup_r+0x66>
 80081bc:	4630      	mov	r0, r6
 80081be:	f001 fc7b 	bl	8009ab8 <_free_r>
 80081c2:	2300      	movs	r3, #0
 80081c4:	6363      	str	r3, [r4, #52]	; 0x34
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	2300      	movs	r3, #0
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f043 0308 	orr.w	r3, r3, #8
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	b94b      	cbnz	r3, 80081f6 <__swsetup_r+0x9a>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ec:	d003      	beq.n	80081f6 <__swsetup_r+0x9a>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4630      	mov	r0, r6
 80081f2:	f001 f87f 	bl	80092f4 <__smakebuf_r>
 80081f6:	89a0      	ldrh	r0, [r4, #12]
 80081f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081fc:	f010 0301 	ands.w	r3, r0, #1
 8008200:	d00a      	beq.n	8008218 <__swsetup_r+0xbc>
 8008202:	2300      	movs	r3, #0
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6963      	ldr	r3, [r4, #20]
 8008208:	425b      	negs	r3, r3
 800820a:	61a3      	str	r3, [r4, #24]
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	b943      	cbnz	r3, 8008222 <__swsetup_r+0xc6>
 8008210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008214:	d1ba      	bne.n	800818c <__swsetup_r+0x30>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	0781      	lsls	r1, r0, #30
 800821a:	bf58      	it	pl
 800821c:	6963      	ldrpl	r3, [r4, #20]
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	e7f4      	b.n	800820c <__swsetup_r+0xb0>
 8008222:	2000      	movs	r0, #0
 8008224:	e7f7      	b.n	8008216 <__swsetup_r+0xba>
 8008226:	bf00      	nop
 8008228:	200000cc 	.word	0x200000cc
 800822c:	0800bdd0 	.word	0x0800bdd0
 8008230:	0800bdf0 	.word	0x0800bdf0
 8008234:	0800bdb0 	.word	0x0800bdb0

08008238 <quorem>:
 8008238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	6903      	ldr	r3, [r0, #16]
 800823e:	690c      	ldr	r4, [r1, #16]
 8008240:	42a3      	cmp	r3, r4
 8008242:	4607      	mov	r7, r0
 8008244:	f2c0 8081 	blt.w	800834a <quorem+0x112>
 8008248:	3c01      	subs	r4, #1
 800824a:	f101 0814 	add.w	r8, r1, #20
 800824e:	f100 0514 	add.w	r5, r0, #20
 8008252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800825c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008260:	3301      	adds	r3, #1
 8008262:	429a      	cmp	r2, r3
 8008264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800826c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008270:	d331      	bcc.n	80082d6 <quorem+0x9e>
 8008272:	f04f 0e00 	mov.w	lr, #0
 8008276:	4640      	mov	r0, r8
 8008278:	46ac      	mov	ip, r5
 800827a:	46f2      	mov	sl, lr
 800827c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008280:	b293      	uxth	r3, r2
 8008282:	fb06 e303 	mla	r3, r6, r3, lr
 8008286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800828a:	b29b      	uxth	r3, r3
 800828c:	ebaa 0303 	sub.w	r3, sl, r3
 8008290:	f8dc a000 	ldr.w	sl, [ip]
 8008294:	0c12      	lsrs	r2, r2, #16
 8008296:	fa13 f38a 	uxtah	r3, r3, sl
 800829a:	fb06 e202 	mla	r2, r6, r2, lr
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	9b00      	ldr	r3, [sp, #0]
 80082a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082a6:	b292      	uxth	r2, r2
 80082a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80082b4:	4581      	cmp	r9, r0
 80082b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ba:	f84c 3b04 	str.w	r3, [ip], #4
 80082be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082c2:	d2db      	bcs.n	800827c <quorem+0x44>
 80082c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80082c8:	b92b      	cbnz	r3, 80082d6 <quorem+0x9e>
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	3b04      	subs	r3, #4
 80082ce:	429d      	cmp	r5, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	d32e      	bcc.n	8008332 <quorem+0xfa>
 80082d4:	613c      	str	r4, [r7, #16]
 80082d6:	4638      	mov	r0, r7
 80082d8:	f001 fad6 	bl	8009888 <__mcmp>
 80082dc:	2800      	cmp	r0, #0
 80082de:	db24      	blt.n	800832a <quorem+0xf2>
 80082e0:	3601      	adds	r6, #1
 80082e2:	4628      	mov	r0, r5
 80082e4:	f04f 0c00 	mov.w	ip, #0
 80082e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80082ec:	f8d0 e000 	ldr.w	lr, [r0]
 80082f0:	b293      	uxth	r3, r2
 80082f2:	ebac 0303 	sub.w	r3, ip, r3
 80082f6:	0c12      	lsrs	r2, r2, #16
 80082f8:	fa13 f38e 	uxtah	r3, r3, lr
 80082fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800830a:	45c1      	cmp	r9, r8
 800830c:	f840 3b04 	str.w	r3, [r0], #4
 8008310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008314:	d2e8      	bcs.n	80082e8 <quorem+0xb0>
 8008316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800831a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800831e:	b922      	cbnz	r2, 800832a <quorem+0xf2>
 8008320:	3b04      	subs	r3, #4
 8008322:	429d      	cmp	r5, r3
 8008324:	461a      	mov	r2, r3
 8008326:	d30a      	bcc.n	800833e <quorem+0x106>
 8008328:	613c      	str	r4, [r7, #16]
 800832a:	4630      	mov	r0, r6
 800832c:	b003      	add	sp, #12
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	3b04      	subs	r3, #4
 8008336:	2a00      	cmp	r2, #0
 8008338:	d1cc      	bne.n	80082d4 <quorem+0x9c>
 800833a:	3c01      	subs	r4, #1
 800833c:	e7c7      	b.n	80082ce <quorem+0x96>
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	3b04      	subs	r3, #4
 8008342:	2a00      	cmp	r2, #0
 8008344:	d1f0      	bne.n	8008328 <quorem+0xf0>
 8008346:	3c01      	subs	r4, #1
 8008348:	e7eb      	b.n	8008322 <quorem+0xea>
 800834a:	2000      	movs	r0, #0
 800834c:	e7ee      	b.n	800832c <quorem+0xf4>
	...

08008350 <_dtoa_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	ed2d 8b04 	vpush	{d8-d9}
 8008358:	ec57 6b10 	vmov	r6, r7, d0
 800835c:	b093      	sub	sp, #76	; 0x4c
 800835e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008364:	9106      	str	r1, [sp, #24]
 8008366:	ee10 aa10 	vmov	sl, s0
 800836a:	4604      	mov	r4, r0
 800836c:	9209      	str	r2, [sp, #36]	; 0x24
 800836e:	930c      	str	r3, [sp, #48]	; 0x30
 8008370:	46bb      	mov	fp, r7
 8008372:	b975      	cbnz	r5, 8008392 <_dtoa_r+0x42>
 8008374:	2010      	movs	r0, #16
 8008376:	f000 fffd 	bl	8009374 <malloc>
 800837a:	4602      	mov	r2, r0
 800837c:	6260      	str	r0, [r4, #36]	; 0x24
 800837e:	b920      	cbnz	r0, 800838a <_dtoa_r+0x3a>
 8008380:	4ba7      	ldr	r3, [pc, #668]	; (8008620 <_dtoa_r+0x2d0>)
 8008382:	21ea      	movs	r1, #234	; 0xea
 8008384:	48a7      	ldr	r0, [pc, #668]	; (8008624 <_dtoa_r+0x2d4>)
 8008386:	f001 fcdd 	bl	8009d44 <__assert_func>
 800838a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800838e:	6005      	str	r5, [r0, #0]
 8008390:	60c5      	str	r5, [r0, #12]
 8008392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	b151      	cbz	r1, 80083ae <_dtoa_r+0x5e>
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	604a      	str	r2, [r1, #4]
 800839c:	2301      	movs	r3, #1
 800839e:	4093      	lsls	r3, r2
 80083a0:	608b      	str	r3, [r1, #8]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f001 f82e 	bl	8009404 <_Bfree>
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	1e3b      	subs	r3, r7, #0
 80083b0:	bfaa      	itet	ge
 80083b2:	2300      	movge	r3, #0
 80083b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083b8:	f8c8 3000 	strge.w	r3, [r8]
 80083bc:	4b9a      	ldr	r3, [pc, #616]	; (8008628 <_dtoa_r+0x2d8>)
 80083be:	bfbc      	itt	lt
 80083c0:	2201      	movlt	r2, #1
 80083c2:	f8c8 2000 	strlt.w	r2, [r8]
 80083c6:	ea33 030b 	bics.w	r3, r3, fp
 80083ca:	d11b      	bne.n	8008404 <_dtoa_r+0xb4>
 80083cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d8:	4333      	orrs	r3, r6
 80083da:	f000 8592 	beq.w	8008f02 <_dtoa_r+0xbb2>
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	b963      	cbnz	r3, 80083fc <_dtoa_r+0xac>
 80083e2:	4b92      	ldr	r3, [pc, #584]	; (800862c <_dtoa_r+0x2dc>)
 80083e4:	e022      	b.n	800842c <_dtoa_r+0xdc>
 80083e6:	4b92      	ldr	r3, [pc, #584]	; (8008630 <_dtoa_r+0x2e0>)
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	3308      	adds	r3, #8
 80083ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	9801      	ldr	r0, [sp, #4]
 80083f2:	b013      	add	sp, #76	; 0x4c
 80083f4:	ecbd 8b04 	vpop	{d8-d9}
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	4b8b      	ldr	r3, [pc, #556]	; (800862c <_dtoa_r+0x2dc>)
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	3303      	adds	r3, #3
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x9c>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4650      	mov	r0, sl
 800840a:	4659      	mov	r1, fp
 800840c:	f7f8 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008410:	ec4b ab19 	vmov	d9, sl, fp
 8008414:	4680      	mov	r8, r0
 8008416:	b158      	cbz	r0, 8008430 <_dtoa_r+0xe0>
 8008418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800841a:	2301      	movs	r3, #1
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 856b 	beq.w	8008efc <_dtoa_r+0xbac>
 8008426:	4883      	ldr	r0, [pc, #524]	; (8008634 <_dtoa_r+0x2e4>)
 8008428:	6018      	str	r0, [r3, #0]
 800842a:	1e43      	subs	r3, r0, #1
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	e7df      	b.n	80083f0 <_dtoa_r+0xa0>
 8008430:	ec4b ab10 	vmov	d0, sl, fp
 8008434:	aa10      	add	r2, sp, #64	; 0x40
 8008436:	a911      	add	r1, sp, #68	; 0x44
 8008438:	4620      	mov	r0, r4
 800843a:	f001 facb 	bl	80099d4 <__d2b>
 800843e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008442:	ee08 0a10 	vmov	s16, r0
 8008446:	2d00      	cmp	r5, #0
 8008448:	f000 8084 	beq.w	8008554 <_dtoa_r+0x204>
 800844c:	ee19 3a90 	vmov	r3, s19
 8008450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008458:	4656      	mov	r6, sl
 800845a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800845e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008466:	4b74      	ldr	r3, [pc, #464]	; (8008638 <_dtoa_r+0x2e8>)
 8008468:	2200      	movs	r2, #0
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f7 ff0b 	bl	8000288 <__aeabi_dsub>
 8008472:	a365      	add	r3, pc, #404	; (adr r3, 8008608 <_dtoa_r+0x2b8>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	a364      	add	r3, pc, #400	; (adr r3, 8008610 <_dtoa_r+0x2c0>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff03 	bl	800028c <__adddf3>
 8008486:	4606      	mov	r6, r0
 8008488:	4628      	mov	r0, r5
 800848a:	460f      	mov	r7, r1
 800848c:	f7f8 f84a 	bl	8000524 <__aeabi_i2d>
 8008490:	a361      	add	r3, pc, #388	; (adr r3, 8008618 <_dtoa_r+0x2c8>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 f8af 	bl	80005f8 <__aeabi_dmul>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f7 fef3 	bl	800028c <__adddf3>
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	f7f8 fb55 	bl	8000b58 <__aeabi_d2iz>
 80084ae:	2200      	movs	r2, #0
 80084b0:	9000      	str	r0, [sp, #0]
 80084b2:	2300      	movs	r3, #0
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f8 fb10 	bl	8000adc <__aeabi_dcmplt>
 80084bc:	b150      	cbz	r0, 80084d4 <_dtoa_r+0x184>
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	f7f8 f830 	bl	8000524 <__aeabi_i2d>
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	f7f8 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80084cc:	b910      	cbnz	r0, 80084d4 <_dtoa_r+0x184>
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	2b16      	cmp	r3, #22
 80084d8:	d85a      	bhi.n	8008590 <_dtoa_r+0x240>
 80084da:	9a00      	ldr	r2, [sp, #0]
 80084dc:	4b57      	ldr	r3, [pc, #348]	; (800863c <_dtoa_r+0x2ec>)
 80084de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	ec51 0b19 	vmov	r0, r1, d9
 80084ea:	f7f8 faf7 	bl	8000adc <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d050      	beq.n	8008594 <_dtoa_r+0x244>
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2300      	movs	r3, #0
 80084fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80084fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fe:	1b5d      	subs	r5, r3, r5
 8008500:	1e6b      	subs	r3, r5, #1
 8008502:	9305      	str	r3, [sp, #20]
 8008504:	bf45      	ittet	mi
 8008506:	f1c5 0301 	rsbmi	r3, r5, #1
 800850a:	9304      	strmi	r3, [sp, #16]
 800850c:	2300      	movpl	r3, #0
 800850e:	2300      	movmi	r3, #0
 8008510:	bf4c      	ite	mi
 8008512:	9305      	strmi	r3, [sp, #20]
 8008514:	9304      	strpl	r3, [sp, #16]
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	db3d      	blt.n	8008598 <_dtoa_r+0x248>
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	9a00      	ldr	r2, [sp, #0]
 8008520:	920a      	str	r2, [sp, #40]	; 0x28
 8008522:	4413      	add	r3, r2
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	9b06      	ldr	r3, [sp, #24]
 800852c:	2b09      	cmp	r3, #9
 800852e:	f200 8089 	bhi.w	8008644 <_dtoa_r+0x2f4>
 8008532:	2b05      	cmp	r3, #5
 8008534:	bfc4      	itt	gt
 8008536:	3b04      	subgt	r3, #4
 8008538:	9306      	strgt	r3, [sp, #24]
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	f1a3 0302 	sub.w	r3, r3, #2
 8008540:	bfcc      	ite	gt
 8008542:	2500      	movgt	r5, #0
 8008544:	2501      	movle	r5, #1
 8008546:	2b03      	cmp	r3, #3
 8008548:	f200 8087 	bhi.w	800865a <_dtoa_r+0x30a>
 800854c:	e8df f003 	tbb	[pc, r3]
 8008550:	59383a2d 	.word	0x59383a2d
 8008554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008558:	441d      	add	r5, r3
 800855a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800855e:	2b20      	cmp	r3, #32
 8008560:	bfc1      	itttt	gt
 8008562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800856a:	fa0b f303 	lslgt.w	r3, fp, r3
 800856e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008572:	bfda      	itte	le
 8008574:	f1c3 0320 	rsble	r3, r3, #32
 8008578:	fa06 f003 	lslle.w	r0, r6, r3
 800857c:	4318      	orrgt	r0, r3
 800857e:	f7f7 ffc1 	bl	8000504 <__aeabi_ui2d>
 8008582:	2301      	movs	r3, #1
 8008584:	4606      	mov	r6, r0
 8008586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800858a:	3d01      	subs	r5, #1
 800858c:	930e      	str	r3, [sp, #56]	; 0x38
 800858e:	e76a      	b.n	8008466 <_dtoa_r+0x116>
 8008590:	2301      	movs	r3, #1
 8008592:	e7b2      	b.n	80084fa <_dtoa_r+0x1aa>
 8008594:	900b      	str	r0, [sp, #44]	; 0x2c
 8008596:	e7b1      	b.n	80084fc <_dtoa_r+0x1ac>
 8008598:	9b04      	ldr	r3, [sp, #16]
 800859a:	9a00      	ldr	r2, [sp, #0]
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	4253      	negs	r3, r2
 80085a2:	9307      	str	r3, [sp, #28]
 80085a4:	2300      	movs	r3, #0
 80085a6:	930a      	str	r3, [sp, #40]	; 0x28
 80085a8:	e7bf      	b.n	800852a <_dtoa_r+0x1da>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9308      	str	r3, [sp, #32]
 80085ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc55      	bgt.n	8008660 <_dtoa_r+0x310>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ba:	461a      	mov	r2, r3
 80085bc:	9209      	str	r2, [sp, #36]	; 0x24
 80085be:	e00c      	b.n	80085da <_dtoa_r+0x28a>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f3      	b.n	80085ac <_dtoa_r+0x25c>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c8:	9308      	str	r3, [sp, #32]
 80085ca:	9b00      	ldr	r3, [sp, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	3301      	adds	r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	bfb8      	it	lt
 80085d8:	2301      	movlt	r3, #1
 80085da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085dc:	2200      	movs	r2, #0
 80085de:	6042      	str	r2, [r0, #4]
 80085e0:	2204      	movs	r2, #4
 80085e2:	f102 0614 	add.w	r6, r2, #20
 80085e6:	429e      	cmp	r6, r3
 80085e8:	6841      	ldr	r1, [r0, #4]
 80085ea:	d93d      	bls.n	8008668 <_dtoa_r+0x318>
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fec9 	bl	8009384 <_Balloc>
 80085f2:	9001      	str	r0, [sp, #4]
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d13b      	bne.n	8008670 <_dtoa_r+0x320>
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <_dtoa_r+0x2f0>)
 80085fa:	4602      	mov	r2, r0
 80085fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008600:	e6c0      	b.n	8008384 <_dtoa_r+0x34>
 8008602:	2301      	movs	r3, #1
 8008604:	e7df      	b.n	80085c6 <_dtoa_r+0x276>
 8008606:	bf00      	nop
 8008608:	636f4361 	.word	0x636f4361
 800860c:	3fd287a7 	.word	0x3fd287a7
 8008610:	8b60c8b3 	.word	0x8b60c8b3
 8008614:	3fc68a28 	.word	0x3fc68a28
 8008618:	509f79fb 	.word	0x509f79fb
 800861c:	3fd34413 	.word	0x3fd34413
 8008620:	0800bd2d 	.word	0x0800bd2d
 8008624:	0800bd44 	.word	0x0800bd44
 8008628:	7ff00000 	.word	0x7ff00000
 800862c:	0800bd29 	.word	0x0800bd29
 8008630:	0800bd20 	.word	0x0800bd20
 8008634:	0800bcfd 	.word	0x0800bcfd
 8008638:	3ff80000 	.word	0x3ff80000
 800863c:	0800be98 	.word	0x0800be98
 8008640:	0800bd9f 	.word	0x0800bd9f
 8008644:	2501      	movs	r5, #1
 8008646:	2300      	movs	r3, #0
 8008648:	9306      	str	r3, [sp, #24]
 800864a:	9508      	str	r5, [sp, #32]
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	2312      	movs	r3, #18
 8008658:	e7b0      	b.n	80085bc <_dtoa_r+0x26c>
 800865a:	2301      	movs	r3, #1
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	e7f5      	b.n	800864c <_dtoa_r+0x2fc>
 8008660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008666:	e7b8      	b.n	80085da <_dtoa_r+0x28a>
 8008668:	3101      	adds	r1, #1
 800866a:	6041      	str	r1, [r0, #4]
 800866c:	0052      	lsls	r2, r2, #1
 800866e:	e7b8      	b.n	80085e2 <_dtoa_r+0x292>
 8008670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	2b0e      	cmp	r3, #14
 800867a:	f200 809d 	bhi.w	80087b8 <_dtoa_r+0x468>
 800867e:	2d00      	cmp	r5, #0
 8008680:	f000 809a 	beq.w	80087b8 <_dtoa_r+0x468>
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd32      	ble.n	80086f0 <_dtoa_r+0x3a0>
 800868a:	4ab7      	ldr	r2, [pc, #732]	; (8008968 <_dtoa_r+0x618>)
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008698:	9b00      	ldr	r3, [sp, #0]
 800869a:	05d8      	lsls	r0, r3, #23
 800869c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086a0:	d516      	bpl.n	80086d0 <_dtoa_r+0x380>
 80086a2:	4bb2      	ldr	r3, [pc, #712]	; (800896c <_dtoa_r+0x61c>)
 80086a4:	ec51 0b19 	vmov	r0, r1, d9
 80086a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086ac:	f7f8 f8ce 	bl	800084c <__aeabi_ddiv>
 80086b0:	f007 070f 	and.w	r7, r7, #15
 80086b4:	4682      	mov	sl, r0
 80086b6:	468b      	mov	fp, r1
 80086b8:	2503      	movs	r5, #3
 80086ba:	4eac      	ldr	r6, [pc, #688]	; (800896c <_dtoa_r+0x61c>)
 80086bc:	b957      	cbnz	r7, 80086d4 <_dtoa_r+0x384>
 80086be:	4642      	mov	r2, r8
 80086c0:	464b      	mov	r3, r9
 80086c2:	4650      	mov	r0, sl
 80086c4:	4659      	mov	r1, fp
 80086c6:	f7f8 f8c1 	bl	800084c <__aeabi_ddiv>
 80086ca:	4682      	mov	sl, r0
 80086cc:	468b      	mov	fp, r1
 80086ce:	e028      	b.n	8008722 <_dtoa_r+0x3d2>
 80086d0:	2502      	movs	r5, #2
 80086d2:	e7f2      	b.n	80086ba <_dtoa_r+0x36a>
 80086d4:	07f9      	lsls	r1, r7, #31
 80086d6:	d508      	bpl.n	80086ea <_dtoa_r+0x39a>
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	3501      	adds	r5, #1
 80086e6:	4680      	mov	r8, r0
 80086e8:	4689      	mov	r9, r1
 80086ea:	107f      	asrs	r7, r7, #1
 80086ec:	3608      	adds	r6, #8
 80086ee:	e7e5      	b.n	80086bc <_dtoa_r+0x36c>
 80086f0:	f000 809b 	beq.w	800882a <_dtoa_r+0x4da>
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	4f9d      	ldr	r7, [pc, #628]	; (800896c <_dtoa_r+0x61c>)
 80086f8:	425e      	negs	r6, r3
 80086fa:	4b9b      	ldr	r3, [pc, #620]	; (8008968 <_dtoa_r+0x618>)
 80086fc:	f006 020f 	and.w	r2, r6, #15
 8008700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	ec51 0b19 	vmov	r0, r1, d9
 800870c:	f7f7 ff74 	bl	80005f8 <__aeabi_dmul>
 8008710:	1136      	asrs	r6, r6, #4
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	2300      	movs	r3, #0
 8008718:	2502      	movs	r5, #2
 800871a:	2e00      	cmp	r6, #0
 800871c:	d17a      	bne.n	8008814 <_dtoa_r+0x4c4>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1d3      	bne.n	80086ca <_dtoa_r+0x37a>
 8008722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8082 	beq.w	800882e <_dtoa_r+0x4de>
 800872a:	4b91      	ldr	r3, [pc, #580]	; (8008970 <_dtoa_r+0x620>)
 800872c:	2200      	movs	r2, #0
 800872e:	4650      	mov	r0, sl
 8008730:	4659      	mov	r1, fp
 8008732:	f7f8 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d079      	beq.n	800882e <_dtoa_r+0x4de>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d076      	beq.n	800882e <_dtoa_r+0x4de>
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dd36      	ble.n	80087b4 <_dtoa_r+0x464>
 8008746:	9b00      	ldr	r3, [sp, #0]
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	1e5f      	subs	r7, r3, #1
 800874e:	2200      	movs	r2, #0
 8008750:	4b88      	ldr	r3, [pc, #544]	; (8008974 <_dtoa_r+0x624>)
 8008752:	f7f7 ff51 	bl	80005f8 <__aeabi_dmul>
 8008756:	9e02      	ldr	r6, [sp, #8]
 8008758:	4682      	mov	sl, r0
 800875a:	468b      	mov	fp, r1
 800875c:	3501      	adds	r5, #1
 800875e:	4628      	mov	r0, r5
 8008760:	f7f7 fee0 	bl	8000524 <__aeabi_i2d>
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	f7f7 ff46 	bl	80005f8 <__aeabi_dmul>
 800876c:	4b82      	ldr	r3, [pc, #520]	; (8008978 <_dtoa_r+0x628>)
 800876e:	2200      	movs	r2, #0
 8008770:	f7f7 fd8c 	bl	800028c <__adddf3>
 8008774:	46d0      	mov	r8, sl
 8008776:	46d9      	mov	r9, fp
 8008778:	4682      	mov	sl, r0
 800877a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800877e:	2e00      	cmp	r6, #0
 8008780:	d158      	bne.n	8008834 <_dtoa_r+0x4e4>
 8008782:	4b7e      	ldr	r3, [pc, #504]	; (800897c <_dtoa_r+0x62c>)
 8008784:	2200      	movs	r2, #0
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 fd7d 	bl	8000288 <__aeabi_dsub>
 800878e:	4652      	mov	r2, sl
 8008790:	465b      	mov	r3, fp
 8008792:	4680      	mov	r8, r0
 8008794:	4689      	mov	r9, r1
 8008796:	f7f8 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800879a:	2800      	cmp	r0, #0
 800879c:	f040 8295 	bne.w	8008cca <_dtoa_r+0x97a>
 80087a0:	4652      	mov	r2, sl
 80087a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087a6:	4640      	mov	r0, r8
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f8 f997 	bl	8000adc <__aeabi_dcmplt>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f040 8289 	bne.w	8008cc6 <_dtoa_r+0x976>
 80087b4:	ec5b ab19 	vmov	sl, fp, d9
 80087b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f2c0 8148 	blt.w	8008a50 <_dtoa_r+0x700>
 80087c0:	9a00      	ldr	r2, [sp, #0]
 80087c2:	2a0e      	cmp	r2, #14
 80087c4:	f300 8144 	bgt.w	8008a50 <_dtoa_r+0x700>
 80087c8:	4b67      	ldr	r3, [pc, #412]	; (8008968 <_dtoa_r+0x618>)
 80087ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f280 80d5 	bge.w	8008984 <_dtoa_r+0x634>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f300 80d1 	bgt.w	8008984 <_dtoa_r+0x634>
 80087e2:	f040 826f 	bne.w	8008cc4 <_dtoa_r+0x974>
 80087e6:	4b65      	ldr	r3, [pc, #404]	; (800897c <_dtoa_r+0x62c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 ff03 	bl	80005f8 <__aeabi_dmul>
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	f7f8 f985 	bl	8000b04 <__aeabi_dcmpge>
 80087fa:	9e03      	ldr	r6, [sp, #12]
 80087fc:	4637      	mov	r7, r6
 80087fe:	2800      	cmp	r0, #0
 8008800:	f040 8245 	bne.w	8008c8e <_dtoa_r+0x93e>
 8008804:	9d01      	ldr	r5, [sp, #4]
 8008806:	2331      	movs	r3, #49	; 0x31
 8008808:	f805 3b01 	strb.w	r3, [r5], #1
 800880c:	9b00      	ldr	r3, [sp, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	e240      	b.n	8008c96 <_dtoa_r+0x946>
 8008814:	07f2      	lsls	r2, r6, #31
 8008816:	d505      	bpl.n	8008824 <_dtoa_r+0x4d4>
 8008818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881c:	f7f7 feec 	bl	80005f8 <__aeabi_dmul>
 8008820:	3501      	adds	r5, #1
 8008822:	2301      	movs	r3, #1
 8008824:	1076      	asrs	r6, r6, #1
 8008826:	3708      	adds	r7, #8
 8008828:	e777      	b.n	800871a <_dtoa_r+0x3ca>
 800882a:	2502      	movs	r5, #2
 800882c:	e779      	b.n	8008722 <_dtoa_r+0x3d2>
 800882e:	9f00      	ldr	r7, [sp, #0]
 8008830:	9e03      	ldr	r6, [sp, #12]
 8008832:	e794      	b.n	800875e <_dtoa_r+0x40e>
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	4b4c      	ldr	r3, [pc, #304]	; (8008968 <_dtoa_r+0x618>)
 8008838:	4431      	add	r1, r6
 800883a:	910d      	str	r1, [sp, #52]	; 0x34
 800883c:	9908      	ldr	r1, [sp, #32]
 800883e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008846:	2900      	cmp	r1, #0
 8008848:	d043      	beq.n	80088d2 <_dtoa_r+0x582>
 800884a:	494d      	ldr	r1, [pc, #308]	; (8008980 <_dtoa_r+0x630>)
 800884c:	2000      	movs	r0, #0
 800884e:	f7f7 fffd 	bl	800084c <__aeabi_ddiv>
 8008852:	4652      	mov	r2, sl
 8008854:	465b      	mov	r3, fp
 8008856:	f7f7 fd17 	bl	8000288 <__aeabi_dsub>
 800885a:	9d01      	ldr	r5, [sp, #4]
 800885c:	4682      	mov	sl, r0
 800885e:	468b      	mov	fp, r1
 8008860:	4649      	mov	r1, r9
 8008862:	4640      	mov	r0, r8
 8008864:	f7f8 f978 	bl	8000b58 <__aeabi_d2iz>
 8008868:	4606      	mov	r6, r0
 800886a:	f7f7 fe5b 	bl	8000524 <__aeabi_i2d>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	3630      	adds	r6, #48	; 0x30
 800887c:	f805 6b01 	strb.w	r6, [r5], #1
 8008880:	4652      	mov	r2, sl
 8008882:	465b      	mov	r3, fp
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	f7f8 f928 	bl	8000adc <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	d163      	bne.n	8008958 <_dtoa_r+0x608>
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	4936      	ldr	r1, [pc, #216]	; (8008970 <_dtoa_r+0x620>)
 8008896:	2000      	movs	r0, #0
 8008898:	f7f7 fcf6 	bl	8000288 <__aeabi_dsub>
 800889c:	4652      	mov	r2, sl
 800889e:	465b      	mov	r3, fp
 80088a0:	f7f8 f91c 	bl	8000adc <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f040 80b5 	bne.w	8008a14 <_dtoa_r+0x6c4>
 80088aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ac:	429d      	cmp	r5, r3
 80088ae:	d081      	beq.n	80087b4 <_dtoa_r+0x464>
 80088b0:	4b30      	ldr	r3, [pc, #192]	; (8008974 <_dtoa_r+0x624>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	f7f7 fe9e 	bl	80005f8 <__aeabi_dmul>
 80088bc:	4b2d      	ldr	r3, [pc, #180]	; (8008974 <_dtoa_r+0x624>)
 80088be:	4682      	mov	sl, r0
 80088c0:	468b      	mov	fp, r1
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	2200      	movs	r2, #0
 80088c8:	f7f7 fe96 	bl	80005f8 <__aeabi_dmul>
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	e7c6      	b.n	8008860 <_dtoa_r+0x510>
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	9d01      	ldr	r5, [sp, #4]
 80088de:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e0:	4682      	mov	sl, r0
 80088e2:	468b      	mov	fp, r1
 80088e4:	4649      	mov	r1, r9
 80088e6:	4640      	mov	r0, r8
 80088e8:	f7f8 f936 	bl	8000b58 <__aeabi_d2iz>
 80088ec:	4606      	mov	r6, r0
 80088ee:	f7f7 fe19 	bl	8000524 <__aeabi_i2d>
 80088f2:	3630      	adds	r6, #48	; 0x30
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f7 fcc4 	bl	8000288 <__aeabi_dsub>
 8008900:	f805 6b01 	strb.w	r6, [r5], #1
 8008904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008906:	429d      	cmp	r5, r3
 8008908:	4680      	mov	r8, r0
 800890a:	4689      	mov	r9, r1
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	d124      	bne.n	800895c <_dtoa_r+0x60c>
 8008912:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <_dtoa_r+0x630>)
 8008914:	4650      	mov	r0, sl
 8008916:	4659      	mov	r1, fp
 8008918:	f7f7 fcb8 	bl	800028c <__adddf3>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f8 f8f8 	bl	8000b18 <__aeabi_dcmpgt>
 8008928:	2800      	cmp	r0, #0
 800892a:	d173      	bne.n	8008a14 <_dtoa_r+0x6c4>
 800892c:	4652      	mov	r2, sl
 800892e:	465b      	mov	r3, fp
 8008930:	4913      	ldr	r1, [pc, #76]	; (8008980 <_dtoa_r+0x630>)
 8008932:	2000      	movs	r0, #0
 8008934:	f7f7 fca8 	bl	8000288 <__aeabi_dsub>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f7f8 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8008944:	2800      	cmp	r0, #0
 8008946:	f43f af35 	beq.w	80087b4 <_dtoa_r+0x464>
 800894a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800894c:	1e6b      	subs	r3, r5, #1
 800894e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d0f8      	beq.n	800894a <_dtoa_r+0x5fa>
 8008958:	9700      	str	r7, [sp, #0]
 800895a:	e049      	b.n	80089f0 <_dtoa_r+0x6a0>
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <_dtoa_r+0x624>)
 800895e:	f7f7 fe4b 	bl	80005f8 <__aeabi_dmul>
 8008962:	4680      	mov	r8, r0
 8008964:	4689      	mov	r9, r1
 8008966:	e7bd      	b.n	80088e4 <_dtoa_r+0x594>
 8008968:	0800be98 	.word	0x0800be98
 800896c:	0800be70 	.word	0x0800be70
 8008970:	3ff00000 	.word	0x3ff00000
 8008974:	40240000 	.word	0x40240000
 8008978:	401c0000 	.word	0x401c0000
 800897c:	40140000 	.word	0x40140000
 8008980:	3fe00000 	.word	0x3fe00000
 8008984:	9d01      	ldr	r5, [sp, #4]
 8008986:	4656      	mov	r6, sl
 8008988:	465f      	mov	r7, fp
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f7 ff5b 	bl	800084c <__aeabi_ddiv>
 8008996:	f7f8 f8df 	bl	8000b58 <__aeabi_d2iz>
 800899a:	4682      	mov	sl, r0
 800899c:	f7f7 fdc2 	bl	8000524 <__aeabi_i2d>
 80089a0:	4642      	mov	r2, r8
 80089a2:	464b      	mov	r3, r9
 80089a4:	f7f7 fe28 	bl	80005f8 <__aeabi_dmul>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089b4:	f7f7 fc68 	bl	8000288 <__aeabi_dsub>
 80089b8:	f805 6b01 	strb.w	r6, [r5], #1
 80089bc:	9e01      	ldr	r6, [sp, #4]
 80089be:	9f03      	ldr	r7, [sp, #12]
 80089c0:	1bae      	subs	r6, r5, r6
 80089c2:	42b7      	cmp	r7, r6
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	d135      	bne.n	8008a36 <_dtoa_r+0x6e6>
 80089ca:	f7f7 fc5f 	bl	800028c <__adddf3>
 80089ce:	4642      	mov	r2, r8
 80089d0:	464b      	mov	r3, r9
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	f7f8 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 80089da:	b9d0      	cbnz	r0, 8008a12 <_dtoa_r+0x6c2>
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80089e8:	b110      	cbz	r0, 80089f0 <_dtoa_r+0x6a0>
 80089ea:	f01a 0f01 	tst.w	sl, #1
 80089ee:	d110      	bne.n	8008a12 <_dtoa_r+0x6c2>
 80089f0:	4620      	mov	r0, r4
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	f000 fd05 	bl	8009404 <_Bfree>
 80089fa:	2300      	movs	r3, #0
 80089fc:	9800      	ldr	r0, [sp, #0]
 80089fe:	702b      	strb	r3, [r5, #0]
 8008a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a02:	3001      	adds	r0, #1
 8008a04:	6018      	str	r0, [r3, #0]
 8008a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f43f acf1 	beq.w	80083f0 <_dtoa_r+0xa0>
 8008a0e:	601d      	str	r5, [r3, #0]
 8008a10:	e4ee      	b.n	80083f0 <_dtoa_r+0xa0>
 8008a12:	9f00      	ldr	r7, [sp, #0]
 8008a14:	462b      	mov	r3, r5
 8008a16:	461d      	mov	r5, r3
 8008a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a1c:	2a39      	cmp	r2, #57	; 0x39
 8008a1e:	d106      	bne.n	8008a2e <_dtoa_r+0x6de>
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d1f7      	bne.n	8008a16 <_dtoa_r+0x6c6>
 8008a26:	9901      	ldr	r1, [sp, #4]
 8008a28:	2230      	movs	r2, #48	; 0x30
 8008a2a:	3701      	adds	r7, #1
 8008a2c:	700a      	strb	r2, [r1, #0]
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	3201      	adds	r2, #1
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e790      	b.n	8008958 <_dtoa_r+0x608>
 8008a36:	4ba6      	ldr	r3, [pc, #664]	; (8008cd0 <_dtoa_r+0x980>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f7f7 fddd 	bl	80005f8 <__aeabi_dmul>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	f7f8 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d09d      	beq.n	800898a <_dtoa_r+0x63a>
 8008a4e:	e7cf      	b.n	80089f0 <_dtoa_r+0x6a0>
 8008a50:	9a08      	ldr	r2, [sp, #32]
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	f000 80d7 	beq.w	8008c06 <_dtoa_r+0x8b6>
 8008a58:	9a06      	ldr	r2, [sp, #24]
 8008a5a:	2a01      	cmp	r2, #1
 8008a5c:	f300 80ba 	bgt.w	8008bd4 <_dtoa_r+0x884>
 8008a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	f000 80b2 	beq.w	8008bcc <_dtoa_r+0x87c>
 8008a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a6c:	9e07      	ldr	r6, [sp, #28]
 8008a6e:	9d04      	ldr	r5, [sp, #16]
 8008a70:	9a04      	ldr	r2, [sp, #16]
 8008a72:	441a      	add	r2, r3
 8008a74:	9204      	str	r2, [sp, #16]
 8008a76:	9a05      	ldr	r2, [sp, #20]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	441a      	add	r2, r3
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	f000 fd78 	bl	8009574 <__i2b>
 8008a84:	4607      	mov	r7, r0
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	dd0c      	ble.n	8008aa4 <_dtoa_r+0x754>
 8008a8a:	9b05      	ldr	r3, [sp, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dd09      	ble.n	8008aa4 <_dtoa_r+0x754>
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	9a04      	ldr	r2, [sp, #16]
 8008a94:	bfa8      	it	ge
 8008a96:	462b      	movge	r3, r5
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	9204      	str	r2, [sp, #16]
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	1aed      	subs	r5, r5, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	b31b      	cbz	r3, 8008af0 <_dtoa_r+0x7a0>
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80af 	beq.w	8008c0e <_dtoa_r+0x8be>
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	dd13      	ble.n	8008adc <_dtoa_r+0x78c>
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fe1b 	bl	80096f4 <__pow5mult>
 8008abe:	ee18 2a10 	vmov	r2, s16
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fd6a 	bl	80095a0 <__multiply>
 8008acc:	ee18 1a10 	vmov	r1, s16
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc96 	bl	8009404 <_Bfree>
 8008ad8:	ee08 8a10 	vmov	s16, r8
 8008adc:	9b07      	ldr	r3, [sp, #28]
 8008ade:	1b9a      	subs	r2, r3, r6
 8008ae0:	d006      	beq.n	8008af0 <_dtoa_r+0x7a0>
 8008ae2:	ee18 1a10 	vmov	r1, s16
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fe04 	bl	80096f4 <__pow5mult>
 8008aec:	ee08 0a10 	vmov	s16, r0
 8008af0:	2101      	movs	r1, #1
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fd3e 	bl	8009574 <__i2b>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	4606      	mov	r6, r0
 8008afe:	f340 8088 	ble.w	8008c12 <_dtoa_r+0x8c2>
 8008b02:	461a      	mov	r2, r3
 8008b04:	4601      	mov	r1, r0
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fdf4 	bl	80096f4 <__pow5mult>
 8008b0c:	9b06      	ldr	r3, [sp, #24]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	4606      	mov	r6, r0
 8008b12:	f340 8081 	ble.w	8008c18 <_dtoa_r+0x8c8>
 8008b16:	f04f 0800 	mov.w	r8, #0
 8008b1a:	6933      	ldr	r3, [r6, #16]
 8008b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b20:	6918      	ldr	r0, [r3, #16]
 8008b22:	f000 fcd7 	bl	80094d4 <__hi0bits>
 8008b26:	f1c0 0020 	rsb	r0, r0, #32
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	4418      	add	r0, r3
 8008b2e:	f010 001f 	ands.w	r0, r0, #31
 8008b32:	f000 8092 	beq.w	8008c5a <_dtoa_r+0x90a>
 8008b36:	f1c0 0320 	rsb	r3, r0, #32
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	f340 808a 	ble.w	8008c54 <_dtoa_r+0x904>
 8008b40:	f1c0 001c 	rsb	r0, r0, #28
 8008b44:	9b04      	ldr	r3, [sp, #16]
 8008b46:	4403      	add	r3, r0
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	9b05      	ldr	r3, [sp, #20]
 8008b4c:	4403      	add	r3, r0
 8008b4e:	4405      	add	r5, r0
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd07      	ble.n	8008b68 <_dtoa_r+0x818>
 8008b58:	ee18 1a10 	vmov	r1, s16
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 fe22 	bl	80097a8 <__lshift>
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dd05      	ble.n	8008b7a <_dtoa_r+0x82a>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	461a      	mov	r2, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 fe18 	bl	80097a8 <__lshift>
 8008b78:	4606      	mov	r6, r0
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d06e      	beq.n	8008c5e <_dtoa_r+0x90e>
 8008b80:	ee18 0a10 	vmov	r0, s16
 8008b84:	4631      	mov	r1, r6
 8008b86:	f000 fe7f 	bl	8009888 <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	da67      	bge.n	8008c5e <_dtoa_r+0x90e>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	ee18 1a10 	vmov	r1, s16
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	220a      	movs	r2, #10
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 fc53 	bl	8009448 <__multadd>
 8008ba2:	9b08      	ldr	r3, [sp, #32]
 8008ba4:	ee08 0a10 	vmov	s16, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 81b1 	beq.w	8008f10 <_dtoa_r+0xbc0>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fc47 	bl	8009448 <__multadd>
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	f300 808e 	bgt.w	8008ce0 <_dtoa_r+0x990>
 8008bc4:	9b06      	ldr	r3, [sp, #24]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	dc51      	bgt.n	8008c6e <_dtoa_r+0x91e>
 8008bca:	e089      	b.n	8008ce0 <_dtoa_r+0x990>
 8008bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bd2:	e74b      	b.n	8008a6c <_dtoa_r+0x71c>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	1e5e      	subs	r6, r3, #1
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	42b3      	cmp	r3, r6
 8008bdc:	bfbf      	itttt	lt
 8008bde:	9b07      	ldrlt	r3, [sp, #28]
 8008be0:	9607      	strlt	r6, [sp, #28]
 8008be2:	1af2      	sublt	r2, r6, r3
 8008be4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008be6:	bfb6      	itet	lt
 8008be8:	189b      	addlt	r3, r3, r2
 8008bea:	1b9e      	subge	r6, r3, r6
 8008bec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	bfb8      	it	lt
 8008bf2:	2600      	movlt	r6, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfb7      	itett	lt
 8008bf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c00:	1a9d      	sublt	r5, r3, r2
 8008c02:	2300      	movlt	r3, #0
 8008c04:	e734      	b.n	8008a70 <_dtoa_r+0x720>
 8008c06:	9e07      	ldr	r6, [sp, #28]
 8008c08:	9d04      	ldr	r5, [sp, #16]
 8008c0a:	9f08      	ldr	r7, [sp, #32]
 8008c0c:	e73b      	b.n	8008a86 <_dtoa_r+0x736>
 8008c0e:	9a07      	ldr	r2, [sp, #28]
 8008c10:	e767      	b.n	8008ae2 <_dtoa_r+0x792>
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	dc18      	bgt.n	8008c4a <_dtoa_r+0x8fa>
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d115      	bne.n	8008c4a <_dtoa_r+0x8fa>
 8008c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c22:	b993      	cbnz	r3, 8008c4a <_dtoa_r+0x8fa>
 8008c24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c28:	0d1b      	lsrs	r3, r3, #20
 8008c2a:	051b      	lsls	r3, r3, #20
 8008c2c:	b183      	cbz	r3, 8008c50 <_dtoa_r+0x900>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	3301      	adds	r3, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9b05      	ldr	r3, [sp, #20]
 8008c36:	3301      	adds	r3, #1
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	f04f 0801 	mov.w	r8, #1
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f47f af6a 	bne.w	8008b1a <_dtoa_r+0x7ca>
 8008c46:	2001      	movs	r0, #1
 8008c48:	e76f      	b.n	8008b2a <_dtoa_r+0x7da>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	e7f6      	b.n	8008c3e <_dtoa_r+0x8ee>
 8008c50:	4698      	mov	r8, r3
 8008c52:	e7f4      	b.n	8008c3e <_dtoa_r+0x8ee>
 8008c54:	f43f af7d 	beq.w	8008b52 <_dtoa_r+0x802>
 8008c58:	4618      	mov	r0, r3
 8008c5a:	301c      	adds	r0, #28
 8008c5c:	e772      	b.n	8008b44 <_dtoa_r+0x7f4>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc37      	bgt.n	8008cd4 <_dtoa_r+0x984>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	dd34      	ble.n	8008cd4 <_dtoa_r+0x984>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	9302      	str	r3, [sp, #8]
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	b96b      	cbnz	r3, 8008c8e <_dtoa_r+0x93e>
 8008c72:	4631      	mov	r1, r6
 8008c74:	2205      	movs	r2, #5
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fbe6 	bl	8009448 <__multadd>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4606      	mov	r6, r0
 8008c80:	ee18 0a10 	vmov	r0, s16
 8008c84:	f000 fe00 	bl	8009888 <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f73f adbb 	bgt.w	8008804 <_dtoa_r+0x4b4>
 8008c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c90:	9d01      	ldr	r5, [sp, #4]
 8008c92:	43db      	mvns	r3, r3
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fbb1 	bl	8009404 <_Bfree>
 8008ca2:	2f00      	cmp	r7, #0
 8008ca4:	f43f aea4 	beq.w	80089f0 <_dtoa_r+0x6a0>
 8008ca8:	f1b8 0f00 	cmp.w	r8, #0
 8008cac:	d005      	beq.n	8008cba <_dtoa_r+0x96a>
 8008cae:	45b8      	cmp	r8, r7
 8008cb0:	d003      	beq.n	8008cba <_dtoa_r+0x96a>
 8008cb2:	4641      	mov	r1, r8
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fba5 	bl	8009404 <_Bfree>
 8008cba:	4639      	mov	r1, r7
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fba1 	bl	8009404 <_Bfree>
 8008cc2:	e695      	b.n	80089f0 <_dtoa_r+0x6a0>
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	4637      	mov	r7, r6
 8008cc8:	e7e1      	b.n	8008c8e <_dtoa_r+0x93e>
 8008cca:	9700      	str	r7, [sp, #0]
 8008ccc:	4637      	mov	r7, r6
 8008cce:	e599      	b.n	8008804 <_dtoa_r+0x4b4>
 8008cd0:	40240000 	.word	0x40240000
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80ca 	beq.w	8008e70 <_dtoa_r+0xb20>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	dd05      	ble.n	8008cf0 <_dtoa_r+0x9a0>
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fd5d 	bl	80097a8 <__lshift>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	d05b      	beq.n	8008dae <_dtoa_r+0xa5e>
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fb43 	bl	8009384 <_Balloc>
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b928      	cbnz	r0, 8008d0e <_dtoa_r+0x9be>
 8008d02:	4b87      	ldr	r3, [pc, #540]	; (8008f20 <_dtoa_r+0xbd0>)
 8008d04:	4602      	mov	r2, r0
 8008d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d0a:	f7ff bb3b 	b.w	8008384 <_dtoa_r+0x34>
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	3202      	adds	r2, #2
 8008d12:	0092      	lsls	r2, r2, #2
 8008d14:	f107 010c 	add.w	r1, r7, #12
 8008d18:	300c      	adds	r0, #12
 8008d1a:	f7fe fd4d 	bl	80077b8 <memcpy>
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4629      	mov	r1, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 fd40 	bl	80097a8 <__lshift>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	f103 0901 	add.w	r9, r3, #1
 8008d2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	f00a 0301 	and.w	r3, sl, #1
 8008d3a:	46b8      	mov	r8, r7
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	4607      	mov	r7, r0
 8008d40:	4631      	mov	r1, r6
 8008d42:	ee18 0a10 	vmov	r0, s16
 8008d46:	f7ff fa77 	bl	8008238 <quorem>
 8008d4a:	4641      	mov	r1, r8
 8008d4c:	9002      	str	r0, [sp, #8]
 8008d4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d52:	ee18 0a10 	vmov	r0, s16
 8008d56:	f000 fd97 	bl	8009888 <__mcmp>
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	9003      	str	r0, [sp, #12]
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fdad 	bl	80098c0 <__mdiff>
 8008d66:	68c2      	ldr	r2, [r0, #12]
 8008d68:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	bb02      	cbnz	r2, 8008db2 <_dtoa_r+0xa62>
 8008d70:	4601      	mov	r1, r0
 8008d72:	ee18 0a10 	vmov	r0, s16
 8008d76:	f000 fd87 	bl	8009888 <__mcmp>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4620      	mov	r0, r4
 8008d80:	9207      	str	r2, [sp, #28]
 8008d82:	f000 fb3f 	bl	8009404 <_Bfree>
 8008d86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d8a:	ea43 0102 	orr.w	r1, r3, r2
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	430b      	orrs	r3, r1
 8008d92:	464d      	mov	r5, r9
 8008d94:	d10f      	bne.n	8008db6 <_dtoa_r+0xa66>
 8008d96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d9a:	d02a      	beq.n	8008df2 <_dtoa_r+0xaa2>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dd02      	ble.n	8008da8 <_dtoa_r+0xa58>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008da8:	f88b a000 	strb.w	sl, [fp]
 8008dac:	e775      	b.n	8008c9a <_dtoa_r+0x94a>
 8008dae:	4638      	mov	r0, r7
 8008db0:	e7ba      	b.n	8008d28 <_dtoa_r+0x9d8>
 8008db2:	2201      	movs	r2, #1
 8008db4:	e7e2      	b.n	8008d7c <_dtoa_r+0xa2c>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db04      	blt.n	8008dc6 <_dtoa_r+0xa76>
 8008dbc:	9906      	ldr	r1, [sp, #24]
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	9904      	ldr	r1, [sp, #16]
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	d122      	bne.n	8008e0c <_dtoa_r+0xabc>
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	ddee      	ble.n	8008da8 <_dtoa_r+0xa58>
 8008dca:	ee18 1a10 	vmov	r1, s16
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fce9 	bl	80097a8 <__lshift>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	ee08 0a10 	vmov	s16, r0
 8008ddc:	f000 fd54 	bl	8009888 <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	dc03      	bgt.n	8008dec <_dtoa_r+0xa9c>
 8008de4:	d1e0      	bne.n	8008da8 <_dtoa_r+0xa58>
 8008de6:	f01a 0f01 	tst.w	sl, #1
 8008dea:	d0dd      	beq.n	8008da8 <_dtoa_r+0xa58>
 8008dec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008df0:	d1d7      	bne.n	8008da2 <_dtoa_r+0xa52>
 8008df2:	2339      	movs	r3, #57	; 0x39
 8008df4:	f88b 3000 	strb.w	r3, [fp]
 8008df8:	462b      	mov	r3, r5
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e02:	2a39      	cmp	r2, #57	; 0x39
 8008e04:	d071      	beq.n	8008eea <_dtoa_r+0xb9a>
 8008e06:	3201      	adds	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e746      	b.n	8008c9a <_dtoa_r+0x94a>
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	dd07      	ble.n	8008e20 <_dtoa_r+0xad0>
 8008e10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e14:	d0ed      	beq.n	8008df2 <_dtoa_r+0xaa2>
 8008e16:	f10a 0301 	add.w	r3, sl, #1
 8008e1a:	f88b 3000 	strb.w	r3, [fp]
 8008e1e:	e73c      	b.n	8008c9a <_dtoa_r+0x94a>
 8008e20:	9b05      	ldr	r3, [sp, #20]
 8008e22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e26:	4599      	cmp	r9, r3
 8008e28:	d047      	beq.n	8008eba <_dtoa_r+0xb6a>
 8008e2a:	ee18 1a10 	vmov	r1, s16
 8008e2e:	2300      	movs	r3, #0
 8008e30:	220a      	movs	r2, #10
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fb08 	bl	8009448 <__multadd>
 8008e38:	45b8      	cmp	r8, r7
 8008e3a:	ee08 0a10 	vmov	s16, r0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	f04f 020a 	mov.w	r2, #10
 8008e46:	4641      	mov	r1, r8
 8008e48:	4620      	mov	r0, r4
 8008e4a:	d106      	bne.n	8008e5a <_dtoa_r+0xb0a>
 8008e4c:	f000 fafc 	bl	8009448 <__multadd>
 8008e50:	4680      	mov	r8, r0
 8008e52:	4607      	mov	r7, r0
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e772      	b.n	8008d40 <_dtoa_r+0x9f0>
 8008e5a:	f000 faf5 	bl	8009448 <__multadd>
 8008e5e:	4639      	mov	r1, r7
 8008e60:	4680      	mov	r8, r0
 8008e62:	2300      	movs	r3, #0
 8008e64:	220a      	movs	r2, #10
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 faee 	bl	8009448 <__multadd>
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	e7f1      	b.n	8008e54 <_dtoa_r+0xb04>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	9d01      	ldr	r5, [sp, #4]
 8008e76:	ee18 0a10 	vmov	r0, s16
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	f7ff f9dc 	bl	8008238 <quorem>
 8008e80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	f805 ab01 	strb.w	sl, [r5], #1
 8008e8a:	1aea      	subs	r2, r5, r3
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	dd09      	ble.n	8008ea6 <_dtoa_r+0xb56>
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	2300      	movs	r3, #0
 8008e98:	220a      	movs	r2, #10
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fad4 	bl	8009448 <__multadd>
 8008ea0:	ee08 0a10 	vmov	s16, r0
 8008ea4:	e7e7      	b.n	8008e76 <_dtoa_r+0xb26>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfc8      	it	gt
 8008eac:	461d      	movgt	r5, r3
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	bfd8      	it	le
 8008eb2:	2501      	movle	r5, #1
 8008eb4:	441d      	add	r5, r3
 8008eb6:	f04f 0800 	mov.w	r8, #0
 8008eba:	ee18 1a10 	vmov	r1, s16
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fc71 	bl	80097a8 <__lshift>
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	ee08 0a10 	vmov	s16, r0
 8008ecc:	f000 fcdc 	bl	8009888 <__mcmp>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dc91      	bgt.n	8008df8 <_dtoa_r+0xaa8>
 8008ed4:	d102      	bne.n	8008edc <_dtoa_r+0xb8c>
 8008ed6:	f01a 0f01 	tst.w	sl, #1
 8008eda:	d18d      	bne.n	8008df8 <_dtoa_r+0xaa8>
 8008edc:	462b      	mov	r3, r5
 8008ede:	461d      	mov	r5, r3
 8008ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee4:	2a30      	cmp	r2, #48	; 0x30
 8008ee6:	d0fa      	beq.n	8008ede <_dtoa_r+0xb8e>
 8008ee8:	e6d7      	b.n	8008c9a <_dtoa_r+0x94a>
 8008eea:	9a01      	ldr	r2, [sp, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d184      	bne.n	8008dfa <_dtoa_r+0xaaa>
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2331      	movs	r3, #49	; 0x31
 8008ef8:	7013      	strb	r3, [r2, #0]
 8008efa:	e6ce      	b.n	8008c9a <_dtoa_r+0x94a>
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <_dtoa_r+0xbd4>)
 8008efe:	f7ff ba95 	b.w	800842c <_dtoa_r+0xdc>
 8008f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f aa6e 	bne.w	80083e6 <_dtoa_r+0x96>
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <_dtoa_r+0xbd8>)
 8008f0c:	f7ff ba8e 	b.w	800842c <_dtoa_r+0xdc>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dcae      	bgt.n	8008e74 <_dtoa_r+0xb24>
 8008f16:	9b06      	ldr	r3, [sp, #24]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	f73f aea8 	bgt.w	8008c6e <_dtoa_r+0x91e>
 8008f1e:	e7a9      	b.n	8008e74 <_dtoa_r+0xb24>
 8008f20:	0800bd9f 	.word	0x0800bd9f
 8008f24:	0800bcfc 	.word	0x0800bcfc
 8008f28:	0800bd20 	.word	0x0800bd20

08008f2c <__sflush_r>:
 8008f2c:	898a      	ldrh	r2, [r1, #12]
 8008f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	4605      	mov	r5, r0
 8008f34:	0710      	lsls	r0, r2, #28
 8008f36:	460c      	mov	r4, r1
 8008f38:	d458      	bmi.n	8008fec <__sflush_r+0xc0>
 8008f3a:	684b      	ldr	r3, [r1, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dc05      	bgt.n	8008f4c <__sflush_r+0x20>
 8008f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dc02      	bgt.n	8008f4c <__sflush_r+0x20>
 8008f46:	2000      	movs	r0, #0
 8008f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	d0f9      	beq.n	8008f46 <__sflush_r+0x1a>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f58:	682f      	ldr	r7, [r5, #0]
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	d032      	beq.n	8008fc4 <__sflush_r+0x98>
 8008f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	075a      	lsls	r2, r3, #29
 8008f64:	d505      	bpl.n	8008f72 <__sflush_r+0x46>
 8008f66:	6863      	ldr	r3, [r4, #4]
 8008f68:	1ac0      	subs	r0, r0, r3
 8008f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f6c:	b10b      	cbz	r3, 8008f72 <__sflush_r+0x46>
 8008f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f70:	1ac0      	subs	r0, r0, r3
 8008f72:	2300      	movs	r3, #0
 8008f74:	4602      	mov	r2, r0
 8008f76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f78:	6a21      	ldr	r1, [r4, #32]
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	47b0      	blx	r6
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	d106      	bne.n	8008f92 <__sflush_r+0x66>
 8008f84:	6829      	ldr	r1, [r5, #0]
 8008f86:	291d      	cmp	r1, #29
 8008f88:	d82c      	bhi.n	8008fe4 <__sflush_r+0xb8>
 8008f8a:	4a2a      	ldr	r2, [pc, #168]	; (8009034 <__sflush_r+0x108>)
 8008f8c:	40ca      	lsrs	r2, r1
 8008f8e:	07d6      	lsls	r6, r2, #31
 8008f90:	d528      	bpl.n	8008fe4 <__sflush_r+0xb8>
 8008f92:	2200      	movs	r2, #0
 8008f94:	6062      	str	r2, [r4, #4]
 8008f96:	04d9      	lsls	r1, r3, #19
 8008f98:	6922      	ldr	r2, [r4, #16]
 8008f9a:	6022      	str	r2, [r4, #0]
 8008f9c:	d504      	bpl.n	8008fa8 <__sflush_r+0x7c>
 8008f9e:	1c42      	adds	r2, r0, #1
 8008fa0:	d101      	bne.n	8008fa6 <__sflush_r+0x7a>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	b903      	cbnz	r3, 8008fa8 <__sflush_r+0x7c>
 8008fa6:	6560      	str	r0, [r4, #84]	; 0x54
 8008fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008faa:	602f      	str	r7, [r5, #0]
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d0ca      	beq.n	8008f46 <__sflush_r+0x1a>
 8008fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	d002      	beq.n	8008fbe <__sflush_r+0x92>
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 fd7d 	bl	8009ab8 <_free_r>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	6360      	str	r0, [r4, #52]	; 0x34
 8008fc2:	e7c1      	b.n	8008f48 <__sflush_r+0x1c>
 8008fc4:	6a21      	ldr	r1, [r4, #32]
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b0      	blx	r6
 8008fcc:	1c41      	adds	r1, r0, #1
 8008fce:	d1c7      	bne.n	8008f60 <__sflush_r+0x34>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0c4      	beq.n	8008f60 <__sflush_r+0x34>
 8008fd6:	2b1d      	cmp	r3, #29
 8008fd8:	d001      	beq.n	8008fde <__sflush_r+0xb2>
 8008fda:	2b16      	cmp	r3, #22
 8008fdc:	d101      	bne.n	8008fe2 <__sflush_r+0xb6>
 8008fde:	602f      	str	r7, [r5, #0]
 8008fe0:	e7b1      	b.n	8008f46 <__sflush_r+0x1a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe8:	81a3      	strh	r3, [r4, #12]
 8008fea:	e7ad      	b.n	8008f48 <__sflush_r+0x1c>
 8008fec:	690f      	ldr	r7, [r1, #16]
 8008fee:	2f00      	cmp	r7, #0
 8008ff0:	d0a9      	beq.n	8008f46 <__sflush_r+0x1a>
 8008ff2:	0793      	lsls	r3, r2, #30
 8008ff4:	680e      	ldr	r6, [r1, #0]
 8008ff6:	bf08      	it	eq
 8008ff8:	694b      	ldreq	r3, [r1, #20]
 8008ffa:	600f      	str	r7, [r1, #0]
 8008ffc:	bf18      	it	ne
 8008ffe:	2300      	movne	r3, #0
 8009000:	eba6 0807 	sub.w	r8, r6, r7
 8009004:	608b      	str	r3, [r1, #8]
 8009006:	f1b8 0f00 	cmp.w	r8, #0
 800900a:	dd9c      	ble.n	8008f46 <__sflush_r+0x1a>
 800900c:	6a21      	ldr	r1, [r4, #32]
 800900e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009010:	4643      	mov	r3, r8
 8009012:	463a      	mov	r2, r7
 8009014:	4628      	mov	r0, r5
 8009016:	47b0      	blx	r6
 8009018:	2800      	cmp	r0, #0
 800901a:	dc06      	bgt.n	800902a <__sflush_r+0xfe>
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e78e      	b.n	8008f48 <__sflush_r+0x1c>
 800902a:	4407      	add	r7, r0
 800902c:	eba8 0800 	sub.w	r8, r8, r0
 8009030:	e7e9      	b.n	8009006 <__sflush_r+0xda>
 8009032:	bf00      	nop
 8009034:	20400001 	.word	0x20400001

08009038 <_fflush_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	690b      	ldr	r3, [r1, #16]
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	b913      	cbnz	r3, 8009048 <_fflush_r+0x10>
 8009042:	2500      	movs	r5, #0
 8009044:	4628      	mov	r0, r5
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	b118      	cbz	r0, 8009052 <_fflush_r+0x1a>
 800904a:	6983      	ldr	r3, [r0, #24]
 800904c:	b90b      	cbnz	r3, 8009052 <_fflush_r+0x1a>
 800904e:	f000 f887 	bl	8009160 <__sinit>
 8009052:	4b14      	ldr	r3, [pc, #80]	; (80090a4 <_fflush_r+0x6c>)
 8009054:	429c      	cmp	r4, r3
 8009056:	d11b      	bne.n	8009090 <_fflush_r+0x58>
 8009058:	686c      	ldr	r4, [r5, #4]
 800905a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0ef      	beq.n	8009042 <_fflush_r+0xa>
 8009062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009064:	07d0      	lsls	r0, r2, #31
 8009066:	d404      	bmi.n	8009072 <_fflush_r+0x3a>
 8009068:	0599      	lsls	r1, r3, #22
 800906a:	d402      	bmi.n	8009072 <_fflush_r+0x3a>
 800906c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800906e:	f000 f91a 	bl	80092a6 <__retarget_lock_acquire_recursive>
 8009072:	4628      	mov	r0, r5
 8009074:	4621      	mov	r1, r4
 8009076:	f7ff ff59 	bl	8008f2c <__sflush_r>
 800907a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907c:	07da      	lsls	r2, r3, #31
 800907e:	4605      	mov	r5, r0
 8009080:	d4e0      	bmi.n	8009044 <_fflush_r+0xc>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	059b      	lsls	r3, r3, #22
 8009086:	d4dd      	bmi.n	8009044 <_fflush_r+0xc>
 8009088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800908a:	f000 f90d 	bl	80092a8 <__retarget_lock_release_recursive>
 800908e:	e7d9      	b.n	8009044 <_fflush_r+0xc>
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <_fflush_r+0x70>)
 8009092:	429c      	cmp	r4, r3
 8009094:	d101      	bne.n	800909a <_fflush_r+0x62>
 8009096:	68ac      	ldr	r4, [r5, #8]
 8009098:	e7df      	b.n	800905a <_fflush_r+0x22>
 800909a:	4b04      	ldr	r3, [pc, #16]	; (80090ac <_fflush_r+0x74>)
 800909c:	429c      	cmp	r4, r3
 800909e:	bf08      	it	eq
 80090a0:	68ec      	ldreq	r4, [r5, #12]
 80090a2:	e7da      	b.n	800905a <_fflush_r+0x22>
 80090a4:	0800bdd0 	.word	0x0800bdd0
 80090a8:	0800bdf0 	.word	0x0800bdf0
 80090ac:	0800bdb0 	.word	0x0800bdb0

080090b0 <std>:
 80090b0:	2300      	movs	r3, #0
 80090b2:	b510      	push	{r4, lr}
 80090b4:	4604      	mov	r4, r0
 80090b6:	e9c0 3300 	strd	r3, r3, [r0]
 80090ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090be:	6083      	str	r3, [r0, #8]
 80090c0:	8181      	strh	r1, [r0, #12]
 80090c2:	6643      	str	r3, [r0, #100]	; 0x64
 80090c4:	81c2      	strh	r2, [r0, #14]
 80090c6:	6183      	str	r3, [r0, #24]
 80090c8:	4619      	mov	r1, r3
 80090ca:	2208      	movs	r2, #8
 80090cc:	305c      	adds	r0, #92	; 0x5c
 80090ce:	f7fe fb81 	bl	80077d4 <memset>
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <std+0x38>)
 80090d4:	6263      	str	r3, [r4, #36]	; 0x24
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <std+0x3c>)
 80090d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <std+0x40>)
 80090dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <std+0x44>)
 80090e0:	6224      	str	r4, [r4, #32]
 80090e2:	6323      	str	r3, [r4, #48]	; 0x30
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	bf00      	nop
 80090e8:	08009c99 	.word	0x08009c99
 80090ec:	08009cbb 	.word	0x08009cbb
 80090f0:	08009cf3 	.word	0x08009cf3
 80090f4:	08009d17 	.word	0x08009d17

080090f8 <_cleanup_r>:
 80090f8:	4901      	ldr	r1, [pc, #4]	; (8009100 <_cleanup_r+0x8>)
 80090fa:	f000 b8af 	b.w	800925c <_fwalk_reent>
 80090fe:	bf00      	nop
 8009100:	08009039 	.word	0x08009039

08009104 <__sfmoreglue>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	2268      	movs	r2, #104	; 0x68
 8009108:	1e4d      	subs	r5, r1, #1
 800910a:	4355      	muls	r5, r2
 800910c:	460e      	mov	r6, r1
 800910e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009112:	f000 fd3d 	bl	8009b90 <_malloc_r>
 8009116:	4604      	mov	r4, r0
 8009118:	b140      	cbz	r0, 800912c <__sfmoreglue+0x28>
 800911a:	2100      	movs	r1, #0
 800911c:	e9c0 1600 	strd	r1, r6, [r0]
 8009120:	300c      	adds	r0, #12
 8009122:	60a0      	str	r0, [r4, #8]
 8009124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009128:	f7fe fb54 	bl	80077d4 <memset>
 800912c:	4620      	mov	r0, r4
 800912e:	bd70      	pop	{r4, r5, r6, pc}

08009130 <__sfp_lock_acquire>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__sfp_lock_acquire+0x8>)
 8009132:	f000 b8b8 	b.w	80092a6 <__retarget_lock_acquire_recursive>
 8009136:	bf00      	nop
 8009138:	200015d5 	.word	0x200015d5

0800913c <__sfp_lock_release>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__sfp_lock_release+0x8>)
 800913e:	f000 b8b3 	b.w	80092a8 <__retarget_lock_release_recursive>
 8009142:	bf00      	nop
 8009144:	200015d5 	.word	0x200015d5

08009148 <__sinit_lock_acquire>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__sinit_lock_acquire+0x8>)
 800914a:	f000 b8ac 	b.w	80092a6 <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	200015d6 	.word	0x200015d6

08009154 <__sinit_lock_release>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__sinit_lock_release+0x8>)
 8009156:	f000 b8a7 	b.w	80092a8 <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	200015d6 	.word	0x200015d6

08009160 <__sinit>:
 8009160:	b510      	push	{r4, lr}
 8009162:	4604      	mov	r4, r0
 8009164:	f7ff fff0 	bl	8009148 <__sinit_lock_acquire>
 8009168:	69a3      	ldr	r3, [r4, #24]
 800916a:	b11b      	cbz	r3, 8009174 <__sinit+0x14>
 800916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009170:	f7ff bff0 	b.w	8009154 <__sinit_lock_release>
 8009174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009178:	6523      	str	r3, [r4, #80]	; 0x50
 800917a:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <__sinit+0x68>)
 800917c:	4a13      	ldr	r2, [pc, #76]	; (80091cc <__sinit+0x6c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	62a2      	str	r2, [r4, #40]	; 0x28
 8009182:	42a3      	cmp	r3, r4
 8009184:	bf04      	itt	eq
 8009186:	2301      	moveq	r3, #1
 8009188:	61a3      	streq	r3, [r4, #24]
 800918a:	4620      	mov	r0, r4
 800918c:	f000 f820 	bl	80091d0 <__sfp>
 8009190:	6060      	str	r0, [r4, #4]
 8009192:	4620      	mov	r0, r4
 8009194:	f000 f81c 	bl	80091d0 <__sfp>
 8009198:	60a0      	str	r0, [r4, #8]
 800919a:	4620      	mov	r0, r4
 800919c:	f000 f818 	bl	80091d0 <__sfp>
 80091a0:	2200      	movs	r2, #0
 80091a2:	60e0      	str	r0, [r4, #12]
 80091a4:	2104      	movs	r1, #4
 80091a6:	6860      	ldr	r0, [r4, #4]
 80091a8:	f7ff ff82 	bl	80090b0 <std>
 80091ac:	68a0      	ldr	r0, [r4, #8]
 80091ae:	2201      	movs	r2, #1
 80091b0:	2109      	movs	r1, #9
 80091b2:	f7ff ff7d 	bl	80090b0 <std>
 80091b6:	68e0      	ldr	r0, [r4, #12]
 80091b8:	2202      	movs	r2, #2
 80091ba:	2112      	movs	r1, #18
 80091bc:	f7ff ff78 	bl	80090b0 <std>
 80091c0:	2301      	movs	r3, #1
 80091c2:	61a3      	str	r3, [r4, #24]
 80091c4:	e7d2      	b.n	800916c <__sinit+0xc>
 80091c6:	bf00      	nop
 80091c8:	0800bce8 	.word	0x0800bce8
 80091cc:	080090f9 	.word	0x080090f9

080091d0 <__sfp>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	4607      	mov	r7, r0
 80091d4:	f7ff ffac 	bl	8009130 <__sfp_lock_acquire>
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <__sfp+0x84>)
 80091da:	681e      	ldr	r6, [r3, #0]
 80091dc:	69b3      	ldr	r3, [r6, #24]
 80091de:	b913      	cbnz	r3, 80091e6 <__sfp+0x16>
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff ffbd 	bl	8009160 <__sinit>
 80091e6:	3648      	adds	r6, #72	; 0x48
 80091e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	d503      	bpl.n	80091f8 <__sfp+0x28>
 80091f0:	6833      	ldr	r3, [r6, #0]
 80091f2:	b30b      	cbz	r3, 8009238 <__sfp+0x68>
 80091f4:	6836      	ldr	r6, [r6, #0]
 80091f6:	e7f7      	b.n	80091e8 <__sfp+0x18>
 80091f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091fc:	b9d5      	cbnz	r5, 8009234 <__sfp+0x64>
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <__sfp+0x88>)
 8009200:	60e3      	str	r3, [r4, #12]
 8009202:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009206:	6665      	str	r5, [r4, #100]	; 0x64
 8009208:	f000 f84c 	bl	80092a4 <__retarget_lock_init_recursive>
 800920c:	f7ff ff96 	bl	800913c <__sfp_lock_release>
 8009210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009218:	6025      	str	r5, [r4, #0]
 800921a:	61a5      	str	r5, [r4, #24]
 800921c:	2208      	movs	r2, #8
 800921e:	4629      	mov	r1, r5
 8009220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009224:	f7fe fad6 	bl	80077d4 <memset>
 8009228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800922c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009230:	4620      	mov	r0, r4
 8009232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009234:	3468      	adds	r4, #104	; 0x68
 8009236:	e7d9      	b.n	80091ec <__sfp+0x1c>
 8009238:	2104      	movs	r1, #4
 800923a:	4638      	mov	r0, r7
 800923c:	f7ff ff62 	bl	8009104 <__sfmoreglue>
 8009240:	4604      	mov	r4, r0
 8009242:	6030      	str	r0, [r6, #0]
 8009244:	2800      	cmp	r0, #0
 8009246:	d1d5      	bne.n	80091f4 <__sfp+0x24>
 8009248:	f7ff ff78 	bl	800913c <__sfp_lock_release>
 800924c:	230c      	movs	r3, #12
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	e7ee      	b.n	8009230 <__sfp+0x60>
 8009252:	bf00      	nop
 8009254:	0800bce8 	.word	0x0800bce8
 8009258:	ffff0001 	.word	0xffff0001

0800925c <_fwalk_reent>:
 800925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	4606      	mov	r6, r0
 8009262:	4688      	mov	r8, r1
 8009264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009268:	2700      	movs	r7, #0
 800926a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800926e:	f1b9 0901 	subs.w	r9, r9, #1
 8009272:	d505      	bpl.n	8009280 <_fwalk_reent+0x24>
 8009274:	6824      	ldr	r4, [r4, #0]
 8009276:	2c00      	cmp	r4, #0
 8009278:	d1f7      	bne.n	800926a <_fwalk_reent+0xe>
 800927a:	4638      	mov	r0, r7
 800927c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009280:	89ab      	ldrh	r3, [r5, #12]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d907      	bls.n	8009296 <_fwalk_reent+0x3a>
 8009286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800928a:	3301      	adds	r3, #1
 800928c:	d003      	beq.n	8009296 <_fwalk_reent+0x3a>
 800928e:	4629      	mov	r1, r5
 8009290:	4630      	mov	r0, r6
 8009292:	47c0      	blx	r8
 8009294:	4307      	orrs	r7, r0
 8009296:	3568      	adds	r5, #104	; 0x68
 8009298:	e7e9      	b.n	800926e <_fwalk_reent+0x12>
	...

0800929c <_localeconv_r>:
 800929c:	4800      	ldr	r0, [pc, #0]	; (80092a0 <_localeconv_r+0x4>)
 800929e:	4770      	bx	lr
 80092a0:	20000220 	.word	0x20000220

080092a4 <__retarget_lock_init_recursive>:
 80092a4:	4770      	bx	lr

080092a6 <__retarget_lock_acquire_recursive>:
 80092a6:	4770      	bx	lr

080092a8 <__retarget_lock_release_recursive>:
 80092a8:	4770      	bx	lr

080092aa <__swhatbuf_r>:
 80092aa:	b570      	push	{r4, r5, r6, lr}
 80092ac:	460e      	mov	r6, r1
 80092ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b2:	2900      	cmp	r1, #0
 80092b4:	b096      	sub	sp, #88	; 0x58
 80092b6:	4614      	mov	r4, r2
 80092b8:	461d      	mov	r5, r3
 80092ba:	da08      	bge.n	80092ce <__swhatbuf_r+0x24>
 80092bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	602a      	str	r2, [r5, #0]
 80092c4:	061a      	lsls	r2, r3, #24
 80092c6:	d410      	bmi.n	80092ea <__swhatbuf_r+0x40>
 80092c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092cc:	e00e      	b.n	80092ec <__swhatbuf_r+0x42>
 80092ce:	466a      	mov	r2, sp
 80092d0:	f000 fd78 	bl	8009dc4 <_fstat_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dbf1      	blt.n	80092bc <__swhatbuf_r+0x12>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092e2:	425a      	negs	r2, r3
 80092e4:	415a      	adcs	r2, r3
 80092e6:	602a      	str	r2, [r5, #0]
 80092e8:	e7ee      	b.n	80092c8 <__swhatbuf_r+0x1e>
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	2000      	movs	r0, #0
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	b016      	add	sp, #88	; 0x58
 80092f2:	bd70      	pop	{r4, r5, r6, pc}

080092f4 <__smakebuf_r>:
 80092f4:	898b      	ldrh	r3, [r1, #12]
 80092f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092f8:	079d      	lsls	r5, r3, #30
 80092fa:	4606      	mov	r6, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	d507      	bpl.n	8009310 <__smakebuf_r+0x1c>
 8009300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	2301      	movs	r3, #1
 800930a:	6163      	str	r3, [r4, #20]
 800930c:	b002      	add	sp, #8
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	ab01      	add	r3, sp, #4
 8009312:	466a      	mov	r2, sp
 8009314:	f7ff ffc9 	bl	80092aa <__swhatbuf_r>
 8009318:	9900      	ldr	r1, [sp, #0]
 800931a:	4605      	mov	r5, r0
 800931c:	4630      	mov	r0, r6
 800931e:	f000 fc37 	bl	8009b90 <_malloc_r>
 8009322:	b948      	cbnz	r0, 8009338 <__smakebuf_r+0x44>
 8009324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009328:	059a      	lsls	r2, r3, #22
 800932a:	d4ef      	bmi.n	800930c <__smakebuf_r+0x18>
 800932c:	f023 0303 	bic.w	r3, r3, #3
 8009330:	f043 0302 	orr.w	r3, r3, #2
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	e7e3      	b.n	8009300 <__smakebuf_r+0xc>
 8009338:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <__smakebuf_r+0x7c>)
 800933a:	62b3      	str	r3, [r6, #40]	; 0x28
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	6020      	str	r0, [r4, #0]
 8009340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	6163      	str	r3, [r4, #20]
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	6120      	str	r0, [r4, #16]
 800934e:	b15b      	cbz	r3, 8009368 <__smakebuf_r+0x74>
 8009350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009354:	4630      	mov	r0, r6
 8009356:	f000 fd47 	bl	8009de8 <_isatty_r>
 800935a:	b128      	cbz	r0, 8009368 <__smakebuf_r+0x74>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	89a0      	ldrh	r0, [r4, #12]
 800936a:	4305      	orrs	r5, r0
 800936c:	81a5      	strh	r5, [r4, #12]
 800936e:	e7cd      	b.n	800930c <__smakebuf_r+0x18>
 8009370:	080090f9 	.word	0x080090f9

08009374 <malloc>:
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <malloc+0xc>)
 8009376:	4601      	mov	r1, r0
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	f000 bc09 	b.w	8009b90 <_malloc_r>
 800937e:	bf00      	nop
 8009380:	200000cc 	.word	0x200000cc

08009384 <_Balloc>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009388:	4604      	mov	r4, r0
 800938a:	460d      	mov	r5, r1
 800938c:	b976      	cbnz	r6, 80093ac <_Balloc+0x28>
 800938e:	2010      	movs	r0, #16
 8009390:	f7ff fff0 	bl	8009374 <malloc>
 8009394:	4602      	mov	r2, r0
 8009396:	6260      	str	r0, [r4, #36]	; 0x24
 8009398:	b920      	cbnz	r0, 80093a4 <_Balloc+0x20>
 800939a:	4b18      	ldr	r3, [pc, #96]	; (80093fc <_Balloc+0x78>)
 800939c:	4818      	ldr	r0, [pc, #96]	; (8009400 <_Balloc+0x7c>)
 800939e:	2166      	movs	r1, #102	; 0x66
 80093a0:	f000 fcd0 	bl	8009d44 <__assert_func>
 80093a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a8:	6006      	str	r6, [r0, #0]
 80093aa:	60c6      	str	r6, [r0, #12]
 80093ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093ae:	68f3      	ldr	r3, [r6, #12]
 80093b0:	b183      	cbz	r3, 80093d4 <_Balloc+0x50>
 80093b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ba:	b9b8      	cbnz	r0, 80093ec <_Balloc+0x68>
 80093bc:	2101      	movs	r1, #1
 80093be:	fa01 f605 	lsl.w	r6, r1, r5
 80093c2:	1d72      	adds	r2, r6, #5
 80093c4:	0092      	lsls	r2, r2, #2
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fb60 	bl	8009a8c <_calloc_r>
 80093cc:	b160      	cbz	r0, 80093e8 <_Balloc+0x64>
 80093ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093d2:	e00e      	b.n	80093f2 <_Balloc+0x6e>
 80093d4:	2221      	movs	r2, #33	; 0x21
 80093d6:	2104      	movs	r1, #4
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fb57 	bl	8009a8c <_calloc_r>
 80093de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e0:	60f0      	str	r0, [r6, #12]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <_Balloc+0x2e>
 80093e8:	2000      	movs	r0, #0
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	6802      	ldr	r2, [r0, #0]
 80093ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093f2:	2300      	movs	r3, #0
 80093f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093f8:	e7f7      	b.n	80093ea <_Balloc+0x66>
 80093fa:	bf00      	nop
 80093fc:	0800bd2d 	.word	0x0800bd2d
 8009400:	0800be10 	.word	0x0800be10

08009404 <_Bfree>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b976      	cbnz	r6, 800942c <_Bfree+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f7ff ffb0 	bl	8009374 <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6268      	str	r0, [r5, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Bfree+0x20>
 800941a:	4b09      	ldr	r3, [pc, #36]	; (8009440 <_Bfree+0x3c>)
 800941c:	4809      	ldr	r0, [pc, #36]	; (8009444 <_Bfree+0x40>)
 800941e:	218a      	movs	r1, #138	; 0x8a
 8009420:	f000 fc90 	bl	8009d44 <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	b13c      	cbz	r4, 800943e <_Bfree+0x3a>
 800942e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009430:	6862      	ldr	r2, [r4, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009438:	6021      	str	r1, [r4, #0]
 800943a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	0800bd2d 	.word	0x0800bd2d
 8009444:	0800be10 	.word	0x0800be10

08009448 <__multadd>:
 8009448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944c:	690d      	ldr	r5, [r1, #16]
 800944e:	4607      	mov	r7, r0
 8009450:	460c      	mov	r4, r1
 8009452:	461e      	mov	r6, r3
 8009454:	f101 0c14 	add.w	ip, r1, #20
 8009458:	2000      	movs	r0, #0
 800945a:	f8dc 3000 	ldr.w	r3, [ip]
 800945e:	b299      	uxth	r1, r3
 8009460:	fb02 6101 	mla	r1, r2, r1, r6
 8009464:	0c1e      	lsrs	r6, r3, #16
 8009466:	0c0b      	lsrs	r3, r1, #16
 8009468:	fb02 3306 	mla	r3, r2, r6, r3
 800946c:	b289      	uxth	r1, r1
 800946e:	3001      	adds	r0, #1
 8009470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009474:	4285      	cmp	r5, r0
 8009476:	f84c 1b04 	str.w	r1, [ip], #4
 800947a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800947e:	dcec      	bgt.n	800945a <__multadd+0x12>
 8009480:	b30e      	cbz	r6, 80094c6 <__multadd+0x7e>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	42ab      	cmp	r3, r5
 8009486:	dc19      	bgt.n	80094bc <__multadd+0x74>
 8009488:	6861      	ldr	r1, [r4, #4]
 800948a:	4638      	mov	r0, r7
 800948c:	3101      	adds	r1, #1
 800948e:	f7ff ff79 	bl	8009384 <_Balloc>
 8009492:	4680      	mov	r8, r0
 8009494:	b928      	cbnz	r0, 80094a2 <__multadd+0x5a>
 8009496:	4602      	mov	r2, r0
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <__multadd+0x84>)
 800949a:	480d      	ldr	r0, [pc, #52]	; (80094d0 <__multadd+0x88>)
 800949c:	21b5      	movs	r1, #181	; 0xb5
 800949e:	f000 fc51 	bl	8009d44 <__assert_func>
 80094a2:	6922      	ldr	r2, [r4, #16]
 80094a4:	3202      	adds	r2, #2
 80094a6:	f104 010c 	add.w	r1, r4, #12
 80094aa:	0092      	lsls	r2, r2, #2
 80094ac:	300c      	adds	r0, #12
 80094ae:	f7fe f983 	bl	80077b8 <memcpy>
 80094b2:	4621      	mov	r1, r4
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ffa5 	bl	8009404 <_Bfree>
 80094ba:	4644      	mov	r4, r8
 80094bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094c0:	3501      	adds	r5, #1
 80094c2:	615e      	str	r6, [r3, #20]
 80094c4:	6125      	str	r5, [r4, #16]
 80094c6:	4620      	mov	r0, r4
 80094c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094cc:	0800bd9f 	.word	0x0800bd9f
 80094d0:	0800be10 	.word	0x0800be10

080094d4 <__hi0bits>:
 80094d4:	0c03      	lsrs	r3, r0, #16
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	b9d3      	cbnz	r3, 8009510 <__hi0bits+0x3c>
 80094da:	0400      	lsls	r0, r0, #16
 80094dc:	2310      	movs	r3, #16
 80094de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094e2:	bf04      	itt	eq
 80094e4:	0200      	lsleq	r0, r0, #8
 80094e6:	3308      	addeq	r3, #8
 80094e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094ec:	bf04      	itt	eq
 80094ee:	0100      	lsleq	r0, r0, #4
 80094f0:	3304      	addeq	r3, #4
 80094f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094f6:	bf04      	itt	eq
 80094f8:	0080      	lsleq	r0, r0, #2
 80094fa:	3302      	addeq	r3, #2
 80094fc:	2800      	cmp	r0, #0
 80094fe:	db05      	blt.n	800950c <__hi0bits+0x38>
 8009500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009504:	f103 0301 	add.w	r3, r3, #1
 8009508:	bf08      	it	eq
 800950a:	2320      	moveq	r3, #32
 800950c:	4618      	mov	r0, r3
 800950e:	4770      	bx	lr
 8009510:	2300      	movs	r3, #0
 8009512:	e7e4      	b.n	80094de <__hi0bits+0xa>

08009514 <__lo0bits>:
 8009514:	6803      	ldr	r3, [r0, #0]
 8009516:	f013 0207 	ands.w	r2, r3, #7
 800951a:	4601      	mov	r1, r0
 800951c:	d00b      	beq.n	8009536 <__lo0bits+0x22>
 800951e:	07da      	lsls	r2, r3, #31
 8009520:	d423      	bmi.n	800956a <__lo0bits+0x56>
 8009522:	0798      	lsls	r0, r3, #30
 8009524:	bf49      	itett	mi
 8009526:	085b      	lsrmi	r3, r3, #1
 8009528:	089b      	lsrpl	r3, r3, #2
 800952a:	2001      	movmi	r0, #1
 800952c:	600b      	strmi	r3, [r1, #0]
 800952e:	bf5c      	itt	pl
 8009530:	600b      	strpl	r3, [r1, #0]
 8009532:	2002      	movpl	r0, #2
 8009534:	4770      	bx	lr
 8009536:	b298      	uxth	r0, r3
 8009538:	b9a8      	cbnz	r0, 8009566 <__lo0bits+0x52>
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	2010      	movs	r0, #16
 800953e:	b2da      	uxtb	r2, r3
 8009540:	b90a      	cbnz	r2, 8009546 <__lo0bits+0x32>
 8009542:	3008      	adds	r0, #8
 8009544:	0a1b      	lsrs	r3, r3, #8
 8009546:	071a      	lsls	r2, r3, #28
 8009548:	bf04      	itt	eq
 800954a:	091b      	lsreq	r3, r3, #4
 800954c:	3004      	addeq	r0, #4
 800954e:	079a      	lsls	r2, r3, #30
 8009550:	bf04      	itt	eq
 8009552:	089b      	lsreq	r3, r3, #2
 8009554:	3002      	addeq	r0, #2
 8009556:	07da      	lsls	r2, r3, #31
 8009558:	d403      	bmi.n	8009562 <__lo0bits+0x4e>
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	f100 0001 	add.w	r0, r0, #1
 8009560:	d005      	beq.n	800956e <__lo0bits+0x5a>
 8009562:	600b      	str	r3, [r1, #0]
 8009564:	4770      	bx	lr
 8009566:	4610      	mov	r0, r2
 8009568:	e7e9      	b.n	800953e <__lo0bits+0x2a>
 800956a:	2000      	movs	r0, #0
 800956c:	4770      	bx	lr
 800956e:	2020      	movs	r0, #32
 8009570:	4770      	bx	lr
	...

08009574 <__i2b>:
 8009574:	b510      	push	{r4, lr}
 8009576:	460c      	mov	r4, r1
 8009578:	2101      	movs	r1, #1
 800957a:	f7ff ff03 	bl	8009384 <_Balloc>
 800957e:	4602      	mov	r2, r0
 8009580:	b928      	cbnz	r0, 800958e <__i2b+0x1a>
 8009582:	4b05      	ldr	r3, [pc, #20]	; (8009598 <__i2b+0x24>)
 8009584:	4805      	ldr	r0, [pc, #20]	; (800959c <__i2b+0x28>)
 8009586:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800958a:	f000 fbdb 	bl	8009d44 <__assert_func>
 800958e:	2301      	movs	r3, #1
 8009590:	6144      	str	r4, [r0, #20]
 8009592:	6103      	str	r3, [r0, #16]
 8009594:	bd10      	pop	{r4, pc}
 8009596:	bf00      	nop
 8009598:	0800bd9f 	.word	0x0800bd9f
 800959c:	0800be10 	.word	0x0800be10

080095a0 <__multiply>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	4691      	mov	r9, r2
 80095a6:	690a      	ldr	r2, [r1, #16]
 80095a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	bfb8      	it	lt
 80095b0:	460b      	movlt	r3, r1
 80095b2:	460c      	mov	r4, r1
 80095b4:	bfbc      	itt	lt
 80095b6:	464c      	movlt	r4, r9
 80095b8:	4699      	movlt	r9, r3
 80095ba:	6927      	ldr	r7, [r4, #16]
 80095bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095c0:	68a3      	ldr	r3, [r4, #8]
 80095c2:	6861      	ldr	r1, [r4, #4]
 80095c4:	eb07 060a 	add.w	r6, r7, sl
 80095c8:	42b3      	cmp	r3, r6
 80095ca:	b085      	sub	sp, #20
 80095cc:	bfb8      	it	lt
 80095ce:	3101      	addlt	r1, #1
 80095d0:	f7ff fed8 	bl	8009384 <_Balloc>
 80095d4:	b930      	cbnz	r0, 80095e4 <__multiply+0x44>
 80095d6:	4602      	mov	r2, r0
 80095d8:	4b44      	ldr	r3, [pc, #272]	; (80096ec <__multiply+0x14c>)
 80095da:	4845      	ldr	r0, [pc, #276]	; (80096f0 <__multiply+0x150>)
 80095dc:	f240 115d 	movw	r1, #349	; 0x15d
 80095e0:	f000 fbb0 	bl	8009d44 <__assert_func>
 80095e4:	f100 0514 	add.w	r5, r0, #20
 80095e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095ec:	462b      	mov	r3, r5
 80095ee:	2200      	movs	r2, #0
 80095f0:	4543      	cmp	r3, r8
 80095f2:	d321      	bcc.n	8009638 <__multiply+0x98>
 80095f4:	f104 0314 	add.w	r3, r4, #20
 80095f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095fc:	f109 0314 	add.w	r3, r9, #20
 8009600:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009604:	9202      	str	r2, [sp, #8]
 8009606:	1b3a      	subs	r2, r7, r4
 8009608:	3a15      	subs	r2, #21
 800960a:	f022 0203 	bic.w	r2, r2, #3
 800960e:	3204      	adds	r2, #4
 8009610:	f104 0115 	add.w	r1, r4, #21
 8009614:	428f      	cmp	r7, r1
 8009616:	bf38      	it	cc
 8009618:	2204      	movcc	r2, #4
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	9a02      	ldr	r2, [sp, #8]
 800961e:	9303      	str	r3, [sp, #12]
 8009620:	429a      	cmp	r2, r3
 8009622:	d80c      	bhi.n	800963e <__multiply+0x9e>
 8009624:	2e00      	cmp	r6, #0
 8009626:	dd03      	ble.n	8009630 <__multiply+0x90>
 8009628:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800962c:	2b00      	cmp	r3, #0
 800962e:	d05a      	beq.n	80096e6 <__multiply+0x146>
 8009630:	6106      	str	r6, [r0, #16]
 8009632:	b005      	add	sp, #20
 8009634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009638:	f843 2b04 	str.w	r2, [r3], #4
 800963c:	e7d8      	b.n	80095f0 <__multiply+0x50>
 800963e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009642:	f1ba 0f00 	cmp.w	sl, #0
 8009646:	d024      	beq.n	8009692 <__multiply+0xf2>
 8009648:	f104 0e14 	add.w	lr, r4, #20
 800964c:	46a9      	mov	r9, r5
 800964e:	f04f 0c00 	mov.w	ip, #0
 8009652:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009656:	f8d9 1000 	ldr.w	r1, [r9]
 800965a:	fa1f fb82 	uxth.w	fp, r2
 800965e:	b289      	uxth	r1, r1
 8009660:	fb0a 110b 	mla	r1, sl, fp, r1
 8009664:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009668:	f8d9 2000 	ldr.w	r2, [r9]
 800966c:	4461      	add	r1, ip
 800966e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009672:	fb0a c20b 	mla	r2, sl, fp, ip
 8009676:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800967a:	b289      	uxth	r1, r1
 800967c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009680:	4577      	cmp	r7, lr
 8009682:	f849 1b04 	str.w	r1, [r9], #4
 8009686:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800968a:	d8e2      	bhi.n	8009652 <__multiply+0xb2>
 800968c:	9a01      	ldr	r2, [sp, #4]
 800968e:	f845 c002 	str.w	ip, [r5, r2]
 8009692:	9a03      	ldr	r2, [sp, #12]
 8009694:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009698:	3304      	adds	r3, #4
 800969a:	f1b9 0f00 	cmp.w	r9, #0
 800969e:	d020      	beq.n	80096e2 <__multiply+0x142>
 80096a0:	6829      	ldr	r1, [r5, #0]
 80096a2:	f104 0c14 	add.w	ip, r4, #20
 80096a6:	46ae      	mov	lr, r5
 80096a8:	f04f 0a00 	mov.w	sl, #0
 80096ac:	f8bc b000 	ldrh.w	fp, [ip]
 80096b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096b4:	fb09 220b 	mla	r2, r9, fp, r2
 80096b8:	4492      	add	sl, r2
 80096ba:	b289      	uxth	r1, r1
 80096bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096c0:	f84e 1b04 	str.w	r1, [lr], #4
 80096c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096c8:	f8be 1000 	ldrh.w	r1, [lr]
 80096cc:	0c12      	lsrs	r2, r2, #16
 80096ce:	fb09 1102 	mla	r1, r9, r2, r1
 80096d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096d6:	4567      	cmp	r7, ip
 80096d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096dc:	d8e6      	bhi.n	80096ac <__multiply+0x10c>
 80096de:	9a01      	ldr	r2, [sp, #4]
 80096e0:	50a9      	str	r1, [r5, r2]
 80096e2:	3504      	adds	r5, #4
 80096e4:	e79a      	b.n	800961c <__multiply+0x7c>
 80096e6:	3e01      	subs	r6, #1
 80096e8:	e79c      	b.n	8009624 <__multiply+0x84>
 80096ea:	bf00      	nop
 80096ec:	0800bd9f 	.word	0x0800bd9f
 80096f0:	0800be10 	.word	0x0800be10

080096f4 <__pow5mult>:
 80096f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f8:	4615      	mov	r5, r2
 80096fa:	f012 0203 	ands.w	r2, r2, #3
 80096fe:	4606      	mov	r6, r0
 8009700:	460f      	mov	r7, r1
 8009702:	d007      	beq.n	8009714 <__pow5mult+0x20>
 8009704:	4c25      	ldr	r4, [pc, #148]	; (800979c <__pow5mult+0xa8>)
 8009706:	3a01      	subs	r2, #1
 8009708:	2300      	movs	r3, #0
 800970a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800970e:	f7ff fe9b 	bl	8009448 <__multadd>
 8009712:	4607      	mov	r7, r0
 8009714:	10ad      	asrs	r5, r5, #2
 8009716:	d03d      	beq.n	8009794 <__pow5mult+0xa0>
 8009718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800971a:	b97c      	cbnz	r4, 800973c <__pow5mult+0x48>
 800971c:	2010      	movs	r0, #16
 800971e:	f7ff fe29 	bl	8009374 <malloc>
 8009722:	4602      	mov	r2, r0
 8009724:	6270      	str	r0, [r6, #36]	; 0x24
 8009726:	b928      	cbnz	r0, 8009734 <__pow5mult+0x40>
 8009728:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <__pow5mult+0xac>)
 800972a:	481e      	ldr	r0, [pc, #120]	; (80097a4 <__pow5mult+0xb0>)
 800972c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009730:	f000 fb08 	bl	8009d44 <__assert_func>
 8009734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009738:	6004      	str	r4, [r0, #0]
 800973a:	60c4      	str	r4, [r0, #12]
 800973c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009744:	b94c      	cbnz	r4, 800975a <__pow5mult+0x66>
 8009746:	f240 2171 	movw	r1, #625	; 0x271
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ff12 	bl	8009574 <__i2b>
 8009750:	2300      	movs	r3, #0
 8009752:	f8c8 0008 	str.w	r0, [r8, #8]
 8009756:	4604      	mov	r4, r0
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	f04f 0900 	mov.w	r9, #0
 800975e:	07eb      	lsls	r3, r5, #31
 8009760:	d50a      	bpl.n	8009778 <__pow5mult+0x84>
 8009762:	4639      	mov	r1, r7
 8009764:	4622      	mov	r2, r4
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff1a 	bl	80095a0 <__multiply>
 800976c:	4639      	mov	r1, r7
 800976e:	4680      	mov	r8, r0
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff fe47 	bl	8009404 <_Bfree>
 8009776:	4647      	mov	r7, r8
 8009778:	106d      	asrs	r5, r5, #1
 800977a:	d00b      	beq.n	8009794 <__pow5mult+0xa0>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	b938      	cbnz	r0, 8009790 <__pow5mult+0x9c>
 8009780:	4622      	mov	r2, r4
 8009782:	4621      	mov	r1, r4
 8009784:	4630      	mov	r0, r6
 8009786:	f7ff ff0b 	bl	80095a0 <__multiply>
 800978a:	6020      	str	r0, [r4, #0]
 800978c:	f8c0 9000 	str.w	r9, [r0]
 8009790:	4604      	mov	r4, r0
 8009792:	e7e4      	b.n	800975e <__pow5mult+0x6a>
 8009794:	4638      	mov	r0, r7
 8009796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800979a:	bf00      	nop
 800979c:	0800bf60 	.word	0x0800bf60
 80097a0:	0800bd2d 	.word	0x0800bd2d
 80097a4:	0800be10 	.word	0x0800be10

080097a8 <__lshift>:
 80097a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ac:	460c      	mov	r4, r1
 80097ae:	6849      	ldr	r1, [r1, #4]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097b6:	68a3      	ldr	r3, [r4, #8]
 80097b8:	4607      	mov	r7, r0
 80097ba:	4691      	mov	r9, r2
 80097bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097c0:	f108 0601 	add.w	r6, r8, #1
 80097c4:	42b3      	cmp	r3, r6
 80097c6:	db0b      	blt.n	80097e0 <__lshift+0x38>
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7ff fddb 	bl	8009384 <_Balloc>
 80097ce:	4605      	mov	r5, r0
 80097d0:	b948      	cbnz	r0, 80097e6 <__lshift+0x3e>
 80097d2:	4602      	mov	r2, r0
 80097d4:	4b2a      	ldr	r3, [pc, #168]	; (8009880 <__lshift+0xd8>)
 80097d6:	482b      	ldr	r0, [pc, #172]	; (8009884 <__lshift+0xdc>)
 80097d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097dc:	f000 fab2 	bl	8009d44 <__assert_func>
 80097e0:	3101      	adds	r1, #1
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	e7ee      	b.n	80097c4 <__lshift+0x1c>
 80097e6:	2300      	movs	r3, #0
 80097e8:	f100 0114 	add.w	r1, r0, #20
 80097ec:	f100 0210 	add.w	r2, r0, #16
 80097f0:	4618      	mov	r0, r3
 80097f2:	4553      	cmp	r3, sl
 80097f4:	db37      	blt.n	8009866 <__lshift+0xbe>
 80097f6:	6920      	ldr	r0, [r4, #16]
 80097f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097fc:	f104 0314 	add.w	r3, r4, #20
 8009800:	f019 091f 	ands.w	r9, r9, #31
 8009804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009808:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800980c:	d02f      	beq.n	800986e <__lshift+0xc6>
 800980e:	f1c9 0e20 	rsb	lr, r9, #32
 8009812:	468a      	mov	sl, r1
 8009814:	f04f 0c00 	mov.w	ip, #0
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	fa02 f209 	lsl.w	r2, r2, r9
 800981e:	ea42 020c 	orr.w	r2, r2, ip
 8009822:	f84a 2b04 	str.w	r2, [sl], #4
 8009826:	f853 2b04 	ldr.w	r2, [r3], #4
 800982a:	4298      	cmp	r0, r3
 800982c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009830:	d8f2      	bhi.n	8009818 <__lshift+0x70>
 8009832:	1b03      	subs	r3, r0, r4
 8009834:	3b15      	subs	r3, #21
 8009836:	f023 0303 	bic.w	r3, r3, #3
 800983a:	3304      	adds	r3, #4
 800983c:	f104 0215 	add.w	r2, r4, #21
 8009840:	4290      	cmp	r0, r2
 8009842:	bf38      	it	cc
 8009844:	2304      	movcc	r3, #4
 8009846:	f841 c003 	str.w	ip, [r1, r3]
 800984a:	f1bc 0f00 	cmp.w	ip, #0
 800984e:	d001      	beq.n	8009854 <__lshift+0xac>
 8009850:	f108 0602 	add.w	r6, r8, #2
 8009854:	3e01      	subs	r6, #1
 8009856:	4638      	mov	r0, r7
 8009858:	612e      	str	r6, [r5, #16]
 800985a:	4621      	mov	r1, r4
 800985c:	f7ff fdd2 	bl	8009404 <_Bfree>
 8009860:	4628      	mov	r0, r5
 8009862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009866:	f842 0f04 	str.w	r0, [r2, #4]!
 800986a:	3301      	adds	r3, #1
 800986c:	e7c1      	b.n	80097f2 <__lshift+0x4a>
 800986e:	3904      	subs	r1, #4
 8009870:	f853 2b04 	ldr.w	r2, [r3], #4
 8009874:	f841 2f04 	str.w	r2, [r1, #4]!
 8009878:	4298      	cmp	r0, r3
 800987a:	d8f9      	bhi.n	8009870 <__lshift+0xc8>
 800987c:	e7ea      	b.n	8009854 <__lshift+0xac>
 800987e:	bf00      	nop
 8009880:	0800bd9f 	.word	0x0800bd9f
 8009884:	0800be10 	.word	0x0800be10

08009888 <__mcmp>:
 8009888:	b530      	push	{r4, r5, lr}
 800988a:	6902      	ldr	r2, [r0, #16]
 800988c:	690c      	ldr	r4, [r1, #16]
 800988e:	1b12      	subs	r2, r2, r4
 8009890:	d10e      	bne.n	80098b0 <__mcmp+0x28>
 8009892:	f100 0314 	add.w	r3, r0, #20
 8009896:	3114      	adds	r1, #20
 8009898:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800989c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098a8:	42a5      	cmp	r5, r4
 80098aa:	d003      	beq.n	80098b4 <__mcmp+0x2c>
 80098ac:	d305      	bcc.n	80098ba <__mcmp+0x32>
 80098ae:	2201      	movs	r2, #1
 80098b0:	4610      	mov	r0, r2
 80098b2:	bd30      	pop	{r4, r5, pc}
 80098b4:	4283      	cmp	r3, r0
 80098b6:	d3f3      	bcc.n	80098a0 <__mcmp+0x18>
 80098b8:	e7fa      	b.n	80098b0 <__mcmp+0x28>
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295
 80098be:	e7f7      	b.n	80098b0 <__mcmp+0x28>

080098c0 <__mdiff>:
 80098c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	460c      	mov	r4, r1
 80098c6:	4606      	mov	r6, r0
 80098c8:	4611      	mov	r1, r2
 80098ca:	4620      	mov	r0, r4
 80098cc:	4690      	mov	r8, r2
 80098ce:	f7ff ffdb 	bl	8009888 <__mcmp>
 80098d2:	1e05      	subs	r5, r0, #0
 80098d4:	d110      	bne.n	80098f8 <__mdiff+0x38>
 80098d6:	4629      	mov	r1, r5
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff fd53 	bl	8009384 <_Balloc>
 80098de:	b930      	cbnz	r0, 80098ee <__mdiff+0x2e>
 80098e0:	4b3a      	ldr	r3, [pc, #232]	; (80099cc <__mdiff+0x10c>)
 80098e2:	4602      	mov	r2, r0
 80098e4:	f240 2132 	movw	r1, #562	; 0x232
 80098e8:	4839      	ldr	r0, [pc, #228]	; (80099d0 <__mdiff+0x110>)
 80098ea:	f000 fa2b 	bl	8009d44 <__assert_func>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	bfa4      	itt	ge
 80098fa:	4643      	movge	r3, r8
 80098fc:	46a0      	movge	r8, r4
 80098fe:	4630      	mov	r0, r6
 8009900:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009904:	bfa6      	itte	ge
 8009906:	461c      	movge	r4, r3
 8009908:	2500      	movge	r5, #0
 800990a:	2501      	movlt	r5, #1
 800990c:	f7ff fd3a 	bl	8009384 <_Balloc>
 8009910:	b920      	cbnz	r0, 800991c <__mdiff+0x5c>
 8009912:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <__mdiff+0x10c>)
 8009914:	4602      	mov	r2, r0
 8009916:	f44f 7110 	mov.w	r1, #576	; 0x240
 800991a:	e7e5      	b.n	80098e8 <__mdiff+0x28>
 800991c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009920:	6926      	ldr	r6, [r4, #16]
 8009922:	60c5      	str	r5, [r0, #12]
 8009924:	f104 0914 	add.w	r9, r4, #20
 8009928:	f108 0514 	add.w	r5, r8, #20
 800992c:	f100 0e14 	add.w	lr, r0, #20
 8009930:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009934:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009938:	f108 0210 	add.w	r2, r8, #16
 800993c:	46f2      	mov	sl, lr
 800993e:	2100      	movs	r1, #0
 8009940:	f859 3b04 	ldr.w	r3, [r9], #4
 8009944:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009948:	fa1f f883 	uxth.w	r8, r3
 800994c:	fa11 f18b 	uxtah	r1, r1, fp
 8009950:	0c1b      	lsrs	r3, r3, #16
 8009952:	eba1 0808 	sub.w	r8, r1, r8
 8009956:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800995a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800995e:	fa1f f888 	uxth.w	r8, r8
 8009962:	1419      	asrs	r1, r3, #16
 8009964:	454e      	cmp	r6, r9
 8009966:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800996a:	f84a 3b04 	str.w	r3, [sl], #4
 800996e:	d8e7      	bhi.n	8009940 <__mdiff+0x80>
 8009970:	1b33      	subs	r3, r6, r4
 8009972:	3b15      	subs	r3, #21
 8009974:	f023 0303 	bic.w	r3, r3, #3
 8009978:	3304      	adds	r3, #4
 800997a:	3415      	adds	r4, #21
 800997c:	42a6      	cmp	r6, r4
 800997e:	bf38      	it	cc
 8009980:	2304      	movcc	r3, #4
 8009982:	441d      	add	r5, r3
 8009984:	4473      	add	r3, lr
 8009986:	469e      	mov	lr, r3
 8009988:	462e      	mov	r6, r5
 800998a:	4566      	cmp	r6, ip
 800998c:	d30e      	bcc.n	80099ac <__mdiff+0xec>
 800998e:	f10c 0203 	add.w	r2, ip, #3
 8009992:	1b52      	subs	r2, r2, r5
 8009994:	f022 0203 	bic.w	r2, r2, #3
 8009998:	3d03      	subs	r5, #3
 800999a:	45ac      	cmp	ip, r5
 800999c:	bf38      	it	cc
 800999e:	2200      	movcc	r2, #0
 80099a0:	441a      	add	r2, r3
 80099a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099a6:	b17b      	cbz	r3, 80099c8 <__mdiff+0x108>
 80099a8:	6107      	str	r7, [r0, #16]
 80099aa:	e7a3      	b.n	80098f4 <__mdiff+0x34>
 80099ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80099b0:	fa11 f288 	uxtah	r2, r1, r8
 80099b4:	1414      	asrs	r4, r2, #16
 80099b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099ba:	b292      	uxth	r2, r2
 80099bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099c0:	f84e 2b04 	str.w	r2, [lr], #4
 80099c4:	1421      	asrs	r1, r4, #16
 80099c6:	e7e0      	b.n	800998a <__mdiff+0xca>
 80099c8:	3f01      	subs	r7, #1
 80099ca:	e7ea      	b.n	80099a2 <__mdiff+0xe2>
 80099cc:	0800bd9f 	.word	0x0800bd9f
 80099d0:	0800be10 	.word	0x0800be10

080099d4 <__d2b>:
 80099d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099d8:	4689      	mov	r9, r1
 80099da:	2101      	movs	r1, #1
 80099dc:	ec57 6b10 	vmov	r6, r7, d0
 80099e0:	4690      	mov	r8, r2
 80099e2:	f7ff fccf 	bl	8009384 <_Balloc>
 80099e6:	4604      	mov	r4, r0
 80099e8:	b930      	cbnz	r0, 80099f8 <__d2b+0x24>
 80099ea:	4602      	mov	r2, r0
 80099ec:	4b25      	ldr	r3, [pc, #148]	; (8009a84 <__d2b+0xb0>)
 80099ee:	4826      	ldr	r0, [pc, #152]	; (8009a88 <__d2b+0xb4>)
 80099f0:	f240 310a 	movw	r1, #778	; 0x30a
 80099f4:	f000 f9a6 	bl	8009d44 <__assert_func>
 80099f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a00:	bb35      	cbnz	r5, 8009a50 <__d2b+0x7c>
 8009a02:	2e00      	cmp	r6, #0
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	d028      	beq.n	8009a5a <__d2b+0x86>
 8009a08:	4668      	mov	r0, sp
 8009a0a:	9600      	str	r6, [sp, #0]
 8009a0c:	f7ff fd82 	bl	8009514 <__lo0bits>
 8009a10:	9900      	ldr	r1, [sp, #0]
 8009a12:	b300      	cbz	r0, 8009a56 <__d2b+0x82>
 8009a14:	9a01      	ldr	r2, [sp, #4]
 8009a16:	f1c0 0320 	rsb	r3, r0, #32
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	40c2      	lsrs	r2, r0
 8009a22:	6163      	str	r3, [r4, #20]
 8009a24:	9201      	str	r2, [sp, #4]
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	61a3      	str	r3, [r4, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bf14      	ite	ne
 8009a2e:	2202      	movne	r2, #2
 8009a30:	2201      	moveq	r2, #1
 8009a32:	6122      	str	r2, [r4, #16]
 8009a34:	b1d5      	cbz	r5, 8009a6c <__d2b+0x98>
 8009a36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a3a:	4405      	add	r5, r0
 8009a3c:	f8c9 5000 	str.w	r5, [r9]
 8009a40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a44:	f8c8 0000 	str.w	r0, [r8]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	b003      	add	sp, #12
 8009a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a54:	e7d5      	b.n	8009a02 <__d2b+0x2e>
 8009a56:	6161      	str	r1, [r4, #20]
 8009a58:	e7e5      	b.n	8009a26 <__d2b+0x52>
 8009a5a:	a801      	add	r0, sp, #4
 8009a5c:	f7ff fd5a 	bl	8009514 <__lo0bits>
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	6163      	str	r3, [r4, #20]
 8009a64:	2201      	movs	r2, #1
 8009a66:	6122      	str	r2, [r4, #16]
 8009a68:	3020      	adds	r0, #32
 8009a6a:	e7e3      	b.n	8009a34 <__d2b+0x60>
 8009a6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a74:	f8c9 0000 	str.w	r0, [r9]
 8009a78:	6918      	ldr	r0, [r3, #16]
 8009a7a:	f7ff fd2b 	bl	80094d4 <__hi0bits>
 8009a7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a82:	e7df      	b.n	8009a44 <__d2b+0x70>
 8009a84:	0800bd9f 	.word	0x0800bd9f
 8009a88:	0800be10 	.word	0x0800be10

08009a8c <_calloc_r>:
 8009a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a8e:	fba1 2402 	umull	r2, r4, r1, r2
 8009a92:	b94c      	cbnz	r4, 8009aa8 <_calloc_r+0x1c>
 8009a94:	4611      	mov	r1, r2
 8009a96:	9201      	str	r2, [sp, #4]
 8009a98:	f000 f87a 	bl	8009b90 <_malloc_r>
 8009a9c:	9a01      	ldr	r2, [sp, #4]
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	b930      	cbnz	r0, 8009ab0 <_calloc_r+0x24>
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	b003      	add	sp, #12
 8009aa6:	bd30      	pop	{r4, r5, pc}
 8009aa8:	220c      	movs	r2, #12
 8009aaa:	6002      	str	r2, [r0, #0]
 8009aac:	2500      	movs	r5, #0
 8009aae:	e7f8      	b.n	8009aa2 <_calloc_r+0x16>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	f7fd fe8f 	bl	80077d4 <memset>
 8009ab6:	e7f4      	b.n	8009aa2 <_calloc_r+0x16>

08009ab8 <_free_r>:
 8009ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aba:	2900      	cmp	r1, #0
 8009abc:	d044      	beq.n	8009b48 <_free_r+0x90>
 8009abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac2:	9001      	str	r0, [sp, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8009aca:	bfb8      	it	lt
 8009acc:	18e4      	addlt	r4, r4, r3
 8009ace:	f000 f9bf 	bl	8009e50 <__malloc_lock>
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <_free_r+0x94>)
 8009ad4:	9801      	ldr	r0, [sp, #4]
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	b933      	cbnz	r3, 8009ae8 <_free_r+0x30>
 8009ada:	6063      	str	r3, [r4, #4]
 8009adc:	6014      	str	r4, [r2, #0]
 8009ade:	b003      	add	sp, #12
 8009ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae4:	f000 b9ba 	b.w	8009e5c <__malloc_unlock>
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	d908      	bls.n	8009afe <_free_r+0x46>
 8009aec:	6825      	ldr	r5, [r4, #0]
 8009aee:	1961      	adds	r1, r4, r5
 8009af0:	428b      	cmp	r3, r1
 8009af2:	bf01      	itttt	eq
 8009af4:	6819      	ldreq	r1, [r3, #0]
 8009af6:	685b      	ldreq	r3, [r3, #4]
 8009af8:	1949      	addeq	r1, r1, r5
 8009afa:	6021      	streq	r1, [r4, #0]
 8009afc:	e7ed      	b.n	8009ada <_free_r+0x22>
 8009afe:	461a      	mov	r2, r3
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	b10b      	cbz	r3, 8009b08 <_free_r+0x50>
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	d9fa      	bls.n	8009afe <_free_r+0x46>
 8009b08:	6811      	ldr	r1, [r2, #0]
 8009b0a:	1855      	adds	r5, r2, r1
 8009b0c:	42a5      	cmp	r5, r4
 8009b0e:	d10b      	bne.n	8009b28 <_free_r+0x70>
 8009b10:	6824      	ldr	r4, [r4, #0]
 8009b12:	4421      	add	r1, r4
 8009b14:	1854      	adds	r4, r2, r1
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	d1e0      	bne.n	8009ade <_free_r+0x26>
 8009b1c:	681c      	ldr	r4, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	6053      	str	r3, [r2, #4]
 8009b22:	4421      	add	r1, r4
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	e7da      	b.n	8009ade <_free_r+0x26>
 8009b28:	d902      	bls.n	8009b30 <_free_r+0x78>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	e7d6      	b.n	8009ade <_free_r+0x26>
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	1961      	adds	r1, r4, r5
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf04      	itt	eq
 8009b38:	6819      	ldreq	r1, [r3, #0]
 8009b3a:	685b      	ldreq	r3, [r3, #4]
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	bf04      	itt	eq
 8009b40:	1949      	addeq	r1, r1, r5
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	6054      	str	r4, [r2, #4]
 8009b46:	e7ca      	b.n	8009ade <_free_r+0x26>
 8009b48:	b003      	add	sp, #12
 8009b4a:	bd30      	pop	{r4, r5, pc}
 8009b4c:	200015d8 	.word	0x200015d8

08009b50 <sbrk_aligned>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	4e0e      	ldr	r6, [pc, #56]	; (8009b8c <sbrk_aligned+0x3c>)
 8009b54:	460c      	mov	r4, r1
 8009b56:	6831      	ldr	r1, [r6, #0]
 8009b58:	4605      	mov	r5, r0
 8009b5a:	b911      	cbnz	r1, 8009b62 <sbrk_aligned+0x12>
 8009b5c:	f000 f88c 	bl	8009c78 <_sbrk_r>
 8009b60:	6030      	str	r0, [r6, #0]
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f887 	bl	8009c78 <_sbrk_r>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d00a      	beq.n	8009b84 <sbrk_aligned+0x34>
 8009b6e:	1cc4      	adds	r4, r0, #3
 8009b70:	f024 0403 	bic.w	r4, r4, #3
 8009b74:	42a0      	cmp	r0, r4
 8009b76:	d007      	beq.n	8009b88 <sbrk_aligned+0x38>
 8009b78:	1a21      	subs	r1, r4, r0
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f87c 	bl	8009c78 <_sbrk_r>
 8009b80:	3001      	adds	r0, #1
 8009b82:	d101      	bne.n	8009b88 <sbrk_aligned+0x38>
 8009b84:	f04f 34ff 	mov.w	r4, #4294967295
 8009b88:	4620      	mov	r0, r4
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	200015dc 	.word	0x200015dc

08009b90 <_malloc_r>:
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	1ccd      	adds	r5, r1, #3
 8009b96:	f025 0503 	bic.w	r5, r5, #3
 8009b9a:	3508      	adds	r5, #8
 8009b9c:	2d0c      	cmp	r5, #12
 8009b9e:	bf38      	it	cc
 8009ba0:	250c      	movcc	r5, #12
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	db01      	blt.n	8009bac <_malloc_r+0x1c>
 8009ba8:	42a9      	cmp	r1, r5
 8009baa:	d905      	bls.n	8009bb8 <_malloc_r+0x28>
 8009bac:	230c      	movs	r3, #12
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb8:	4e2e      	ldr	r6, [pc, #184]	; (8009c74 <_malloc_r+0xe4>)
 8009bba:	f000 f949 	bl	8009e50 <__malloc_lock>
 8009bbe:	6833      	ldr	r3, [r6, #0]
 8009bc0:	461c      	mov	r4, r3
 8009bc2:	bb34      	cbnz	r4, 8009c12 <_malloc_r+0x82>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f7ff ffc2 	bl	8009b50 <sbrk_aligned>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	4604      	mov	r4, r0
 8009bd0:	d14d      	bne.n	8009c6e <_malloc_r+0xde>
 8009bd2:	6834      	ldr	r4, [r6, #0]
 8009bd4:	4626      	mov	r6, r4
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	d140      	bne.n	8009c5c <_malloc_r+0xcc>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4638      	mov	r0, r7
 8009be0:	eb04 0803 	add.w	r8, r4, r3
 8009be4:	f000 f848 	bl	8009c78 <_sbrk_r>
 8009be8:	4580      	cmp	r8, r0
 8009bea:	d13a      	bne.n	8009c62 <_malloc_r+0xd2>
 8009bec:	6821      	ldr	r1, [r4, #0]
 8009bee:	3503      	adds	r5, #3
 8009bf0:	1a6d      	subs	r5, r5, r1
 8009bf2:	f025 0503 	bic.w	r5, r5, #3
 8009bf6:	3508      	adds	r5, #8
 8009bf8:	2d0c      	cmp	r5, #12
 8009bfa:	bf38      	it	cc
 8009bfc:	250c      	movcc	r5, #12
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4638      	mov	r0, r7
 8009c02:	f7ff ffa5 	bl	8009b50 <sbrk_aligned>
 8009c06:	3001      	adds	r0, #1
 8009c08:	d02b      	beq.n	8009c62 <_malloc_r+0xd2>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	442b      	add	r3, r5
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	e00e      	b.n	8009c30 <_malloc_r+0xa0>
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	1b52      	subs	r2, r2, r5
 8009c16:	d41e      	bmi.n	8009c56 <_malloc_r+0xc6>
 8009c18:	2a0b      	cmp	r2, #11
 8009c1a:	d916      	bls.n	8009c4a <_malloc_r+0xba>
 8009c1c:	1961      	adds	r1, r4, r5
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	6025      	str	r5, [r4, #0]
 8009c22:	bf18      	it	ne
 8009c24:	6059      	strne	r1, [r3, #4]
 8009c26:	6863      	ldr	r3, [r4, #4]
 8009c28:	bf08      	it	eq
 8009c2a:	6031      	streq	r1, [r6, #0]
 8009c2c:	5162      	str	r2, [r4, r5]
 8009c2e:	604b      	str	r3, [r1, #4]
 8009c30:	4638      	mov	r0, r7
 8009c32:	f104 060b 	add.w	r6, r4, #11
 8009c36:	f000 f911 	bl	8009e5c <__malloc_unlock>
 8009c3a:	f026 0607 	bic.w	r6, r6, #7
 8009c3e:	1d23      	adds	r3, r4, #4
 8009c40:	1af2      	subs	r2, r6, r3
 8009c42:	d0b6      	beq.n	8009bb2 <_malloc_r+0x22>
 8009c44:	1b9b      	subs	r3, r3, r6
 8009c46:	50a3      	str	r3, [r4, r2]
 8009c48:	e7b3      	b.n	8009bb2 <_malloc_r+0x22>
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	bf0c      	ite	eq
 8009c50:	6032      	streq	r2, [r6, #0]
 8009c52:	605a      	strne	r2, [r3, #4]
 8009c54:	e7ec      	b.n	8009c30 <_malloc_r+0xa0>
 8009c56:	4623      	mov	r3, r4
 8009c58:	6864      	ldr	r4, [r4, #4]
 8009c5a:	e7b2      	b.n	8009bc2 <_malloc_r+0x32>
 8009c5c:	4634      	mov	r4, r6
 8009c5e:	6876      	ldr	r6, [r6, #4]
 8009c60:	e7b9      	b.n	8009bd6 <_malloc_r+0x46>
 8009c62:	230c      	movs	r3, #12
 8009c64:	603b      	str	r3, [r7, #0]
 8009c66:	4638      	mov	r0, r7
 8009c68:	f000 f8f8 	bl	8009e5c <__malloc_unlock>
 8009c6c:	e7a1      	b.n	8009bb2 <_malloc_r+0x22>
 8009c6e:	6025      	str	r5, [r4, #0]
 8009c70:	e7de      	b.n	8009c30 <_malloc_r+0xa0>
 8009c72:	bf00      	nop
 8009c74:	200015d8 	.word	0x200015d8

08009c78 <_sbrk_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d06      	ldr	r5, [pc, #24]	; (8009c94 <_sbrk_r+0x1c>)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7fa f834 	bl	8003cf0 <_sbrk>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_sbrk_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_sbrk_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	200015e0 	.word	0x200015e0

08009c98 <__sread>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca0:	f000 fa3c 	bl	800a11c <_read_r>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	bfab      	itete	ge
 8009ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009caa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cac:	181b      	addge	r3, r3, r0
 8009cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cb2:	bfac      	ite	ge
 8009cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb6:	81a3      	strhlt	r3, [r4, #12]
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <__swrite>:
 8009cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	461f      	mov	r7, r3
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	4616      	mov	r6, r2
 8009cca:	d505      	bpl.n	8009cd8 <__swrite+0x1e>
 8009ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f000 f898 	bl	8009e08 <_lseek_r>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cee:	f000 b817 	b.w	8009d20 <_write_r>

08009cf2 <__sseek>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 f885 	bl	8009e08 <_lseek_r>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	bf15      	itete	ne
 8009d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d0e:	81a3      	strheq	r3, [r4, #12]
 8009d10:	bf18      	it	ne
 8009d12:	81a3      	strhne	r3, [r4, #12]
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <__sclose>:
 8009d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1a:	f000 b831 	b.w	8009d80 <_close_r>
	...

08009d20 <_write_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4d07      	ldr	r5, [pc, #28]	; (8009d40 <_write_r+0x20>)
 8009d24:	4604      	mov	r4, r0
 8009d26:	4608      	mov	r0, r1
 8009d28:	4611      	mov	r1, r2
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f7f9 fa8f 	bl	8003252 <_write>
 8009d34:	1c43      	adds	r3, r0, #1
 8009d36:	d102      	bne.n	8009d3e <_write_r+0x1e>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	b103      	cbz	r3, 8009d3e <_write_r+0x1e>
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	bd38      	pop	{r3, r4, r5, pc}
 8009d40:	200015e0 	.word	0x200015e0

08009d44 <__assert_func>:
 8009d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d46:	4614      	mov	r4, r2
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <__assert_func+0x2c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4605      	mov	r5, r0
 8009d50:	68d8      	ldr	r0, [r3, #12]
 8009d52:	b14c      	cbz	r4, 8009d68 <__assert_func+0x24>
 8009d54:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <__assert_func+0x30>)
 8009d56:	9100      	str	r1, [sp, #0]
 8009d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d5c:	4906      	ldr	r1, [pc, #24]	; (8009d78 <__assert_func+0x34>)
 8009d5e:	462b      	mov	r3, r5
 8009d60:	f000 f81e 	bl	8009da0 <fiprintf>
 8009d64:	f000 f9f9 	bl	800a15a <abort>
 8009d68:	4b04      	ldr	r3, [pc, #16]	; (8009d7c <__assert_func+0x38>)
 8009d6a:	461c      	mov	r4, r3
 8009d6c:	e7f3      	b.n	8009d56 <__assert_func+0x12>
 8009d6e:	bf00      	nop
 8009d70:	200000cc 	.word	0x200000cc
 8009d74:	0800bf6c 	.word	0x0800bf6c
 8009d78:	0800bf79 	.word	0x0800bf79
 8009d7c:	0800bfa7 	.word	0x0800bfa7

08009d80 <_close_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d06      	ldr	r5, [pc, #24]	; (8009d9c <_close_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	f7f9 ff7b 	bl	8003c86 <_close>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_close_r+0x1a>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_close_r+0x1a>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	200015e0 	.word	0x200015e0

08009da0 <fiprintf>:
 8009da0:	b40e      	push	{r1, r2, r3}
 8009da2:	b503      	push	{r0, r1, lr}
 8009da4:	4601      	mov	r1, r0
 8009da6:	ab03      	add	r3, sp, #12
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <fiprintf+0x20>)
 8009daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dae:	6800      	ldr	r0, [r0, #0]
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	f000 f883 	bl	8009ebc <_vfiprintf_r>
 8009db6:	b002      	add	sp, #8
 8009db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dbc:	b003      	add	sp, #12
 8009dbe:	4770      	bx	lr
 8009dc0:	200000cc 	.word	0x200000cc

08009dc4 <_fstat_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d07      	ldr	r5, [pc, #28]	; (8009de4 <_fstat_r+0x20>)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	f7f9 ff64 	bl	8003c9e <_fstat>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	d102      	bne.n	8009de0 <_fstat_r+0x1c>
 8009dda:	682b      	ldr	r3, [r5, #0]
 8009ddc:	b103      	cbz	r3, 8009de0 <_fstat_r+0x1c>
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	bd38      	pop	{r3, r4, r5, pc}
 8009de2:	bf00      	nop
 8009de4:	200015e0 	.word	0x200015e0

08009de8 <_isatty_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d06      	ldr	r5, [pc, #24]	; (8009e04 <_isatty_r+0x1c>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f9 ff63 	bl	8003cbe <_isatty>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_isatty_r+0x1a>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_isatty_r+0x1a>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	200015e0 	.word	0x200015e0

08009e08 <_lseek_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	; (8009e28 <_lseek_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f9 ff5c 	bl	8003cd4 <_lseek>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_lseek_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_lseek_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	200015e0 	.word	0x200015e0

08009e2c <__ascii_mbtowc>:
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	b901      	cbnz	r1, 8009e32 <__ascii_mbtowc+0x6>
 8009e30:	a901      	add	r1, sp, #4
 8009e32:	b142      	cbz	r2, 8009e46 <__ascii_mbtowc+0x1a>
 8009e34:	b14b      	cbz	r3, 8009e4a <__ascii_mbtowc+0x1e>
 8009e36:	7813      	ldrb	r3, [r2, #0]
 8009e38:	600b      	str	r3, [r1, #0]
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	1e10      	subs	r0, r2, #0
 8009e3e:	bf18      	it	ne
 8009e40:	2001      	movne	r0, #1
 8009e42:	b002      	add	sp, #8
 8009e44:	4770      	bx	lr
 8009e46:	4610      	mov	r0, r2
 8009e48:	e7fb      	b.n	8009e42 <__ascii_mbtowc+0x16>
 8009e4a:	f06f 0001 	mvn.w	r0, #1
 8009e4e:	e7f8      	b.n	8009e42 <__ascii_mbtowc+0x16>

08009e50 <__malloc_lock>:
 8009e50:	4801      	ldr	r0, [pc, #4]	; (8009e58 <__malloc_lock+0x8>)
 8009e52:	f7ff ba28 	b.w	80092a6 <__retarget_lock_acquire_recursive>
 8009e56:	bf00      	nop
 8009e58:	200015d4 	.word	0x200015d4

08009e5c <__malloc_unlock>:
 8009e5c:	4801      	ldr	r0, [pc, #4]	; (8009e64 <__malloc_unlock+0x8>)
 8009e5e:	f7ff ba23 	b.w	80092a8 <__retarget_lock_release_recursive>
 8009e62:	bf00      	nop
 8009e64:	200015d4 	.word	0x200015d4

08009e68 <__sfputc_r>:
 8009e68:	6893      	ldr	r3, [r2, #8]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	b410      	push	{r4}
 8009e70:	6093      	str	r3, [r2, #8]
 8009e72:	da08      	bge.n	8009e86 <__sfputc_r+0x1e>
 8009e74:	6994      	ldr	r4, [r2, #24]
 8009e76:	42a3      	cmp	r3, r4
 8009e78:	db01      	blt.n	8009e7e <__sfputc_r+0x16>
 8009e7a:	290a      	cmp	r1, #10
 8009e7c:	d103      	bne.n	8009e86 <__sfputc_r+0x1e>
 8009e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e82:	f7fe b919 	b.w	80080b8 <__swbuf_r>
 8009e86:	6813      	ldr	r3, [r2, #0]
 8009e88:	1c58      	adds	r0, r3, #1
 8009e8a:	6010      	str	r0, [r2, #0]
 8009e8c:	7019      	strb	r1, [r3, #0]
 8009e8e:	4608      	mov	r0, r1
 8009e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <__sfputs_r>:
 8009e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e98:	4606      	mov	r6, r0
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	18d5      	adds	r5, r2, r3
 8009ea0:	42ac      	cmp	r4, r5
 8009ea2:	d101      	bne.n	8009ea8 <__sfputs_r+0x12>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e007      	b.n	8009eb8 <__sfputs_r+0x22>
 8009ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eac:	463a      	mov	r2, r7
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ffda 	bl	8009e68 <__sfputc_r>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d1f3      	bne.n	8009ea0 <__sfputs_r+0xa>
 8009eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ebc <_vfiprintf_r>:
 8009ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	460d      	mov	r5, r1
 8009ec2:	b09d      	sub	sp, #116	; 0x74
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	4698      	mov	r8, r3
 8009ec8:	4606      	mov	r6, r0
 8009eca:	b118      	cbz	r0, 8009ed4 <_vfiprintf_r+0x18>
 8009ecc:	6983      	ldr	r3, [r0, #24]
 8009ece:	b90b      	cbnz	r3, 8009ed4 <_vfiprintf_r+0x18>
 8009ed0:	f7ff f946 	bl	8009160 <__sinit>
 8009ed4:	4b89      	ldr	r3, [pc, #548]	; (800a0fc <_vfiprintf_r+0x240>)
 8009ed6:	429d      	cmp	r5, r3
 8009ed8:	d11b      	bne.n	8009f12 <_vfiprintf_r+0x56>
 8009eda:	6875      	ldr	r5, [r6, #4]
 8009edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ede:	07d9      	lsls	r1, r3, #31
 8009ee0:	d405      	bmi.n	8009eee <_vfiprintf_r+0x32>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	059a      	lsls	r2, r3, #22
 8009ee6:	d402      	bmi.n	8009eee <_vfiprintf_r+0x32>
 8009ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eea:	f7ff f9dc 	bl	80092a6 <__retarget_lock_acquire_recursive>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	071b      	lsls	r3, r3, #28
 8009ef2:	d501      	bpl.n	8009ef8 <_vfiprintf_r+0x3c>
 8009ef4:	692b      	ldr	r3, [r5, #16]
 8009ef6:	b9eb      	cbnz	r3, 8009f34 <_vfiprintf_r+0x78>
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7fe f92e 	bl	800815c <__swsetup_r>
 8009f00:	b1c0      	cbz	r0, 8009f34 <_vfiprintf_r+0x78>
 8009f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f04:	07dc      	lsls	r4, r3, #31
 8009f06:	d50e      	bpl.n	8009f26 <_vfiprintf_r+0x6a>
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0c:	b01d      	add	sp, #116	; 0x74
 8009f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f12:	4b7b      	ldr	r3, [pc, #492]	; (800a100 <_vfiprintf_r+0x244>)
 8009f14:	429d      	cmp	r5, r3
 8009f16:	d101      	bne.n	8009f1c <_vfiprintf_r+0x60>
 8009f18:	68b5      	ldr	r5, [r6, #8]
 8009f1a:	e7df      	b.n	8009edc <_vfiprintf_r+0x20>
 8009f1c:	4b79      	ldr	r3, [pc, #484]	; (800a104 <_vfiprintf_r+0x248>)
 8009f1e:	429d      	cmp	r5, r3
 8009f20:	bf08      	it	eq
 8009f22:	68f5      	ldreq	r5, [r6, #12]
 8009f24:	e7da      	b.n	8009edc <_vfiprintf_r+0x20>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	0598      	lsls	r0, r3, #22
 8009f2a:	d4ed      	bmi.n	8009f08 <_vfiprintf_r+0x4c>
 8009f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f2e:	f7ff f9bb 	bl	80092a8 <__retarget_lock_release_recursive>
 8009f32:	e7e9      	b.n	8009f08 <_vfiprintf_r+0x4c>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9309      	str	r3, [sp, #36]	; 0x24
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f42:	2330      	movs	r3, #48	; 0x30
 8009f44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a108 <_vfiprintf_r+0x24c>
 8009f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f4c:	f04f 0901 	mov.w	r9, #1
 8009f50:	4623      	mov	r3, r4
 8009f52:	469a      	mov	sl, r3
 8009f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f58:	b10a      	cbz	r2, 8009f5e <_vfiprintf_r+0xa2>
 8009f5a:	2a25      	cmp	r2, #37	; 0x25
 8009f5c:	d1f9      	bne.n	8009f52 <_vfiprintf_r+0x96>
 8009f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f62:	d00b      	beq.n	8009f7c <_vfiprintf_r+0xc0>
 8009f64:	465b      	mov	r3, fp
 8009f66:	4622      	mov	r2, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff ff93 	bl	8009e96 <__sfputs_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	f000 80aa 	beq.w	800a0ca <_vfiprintf_r+0x20e>
 8009f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f78:	445a      	add	r2, fp
 8009f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80a2 	beq.w	800a0ca <_vfiprintf_r+0x20e>
 8009f86:	2300      	movs	r3, #0
 8009f88:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f90:	f10a 0a01 	add.w	sl, sl, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f9e:	4654      	mov	r4, sl
 8009fa0:	2205      	movs	r2, #5
 8009fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa6:	4858      	ldr	r0, [pc, #352]	; (800a108 <_vfiprintf_r+0x24c>)
 8009fa8:	f7f6 f91a 	bl	80001e0 <memchr>
 8009fac:	9a04      	ldr	r2, [sp, #16]
 8009fae:	b9d8      	cbnz	r0, 8009fe8 <_vfiprintf_r+0x12c>
 8009fb0:	06d1      	lsls	r1, r2, #27
 8009fb2:	bf44      	itt	mi
 8009fb4:	2320      	movmi	r3, #32
 8009fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fba:	0713      	lsls	r3, r2, #28
 8009fbc:	bf44      	itt	mi
 8009fbe:	232b      	movmi	r3, #43	; 0x2b
 8009fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fca:	d015      	beq.n	8009ff8 <_vfiprintf_r+0x13c>
 8009fcc:	9a07      	ldr	r2, [sp, #28]
 8009fce:	4654      	mov	r4, sl
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f04f 0c0a 	mov.w	ip, #10
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fdc:	3b30      	subs	r3, #48	; 0x30
 8009fde:	2b09      	cmp	r3, #9
 8009fe0:	d94e      	bls.n	800a080 <_vfiprintf_r+0x1c4>
 8009fe2:	b1b0      	cbz	r0, 800a012 <_vfiprintf_r+0x156>
 8009fe4:	9207      	str	r2, [sp, #28]
 8009fe6:	e014      	b.n	800a012 <_vfiprintf_r+0x156>
 8009fe8:	eba0 0308 	sub.w	r3, r0, r8
 8009fec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	9304      	str	r3, [sp, #16]
 8009ff4:	46a2      	mov	sl, r4
 8009ff6:	e7d2      	b.n	8009f9e <_vfiprintf_r+0xe2>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	1d19      	adds	r1, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	9103      	str	r1, [sp, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	bfbb      	ittet	lt
 800a004:	425b      	neglt	r3, r3
 800a006:	f042 0202 	orrlt.w	r2, r2, #2
 800a00a:	9307      	strge	r3, [sp, #28]
 800a00c:	9307      	strlt	r3, [sp, #28]
 800a00e:	bfb8      	it	lt
 800a010:	9204      	strlt	r2, [sp, #16]
 800a012:	7823      	ldrb	r3, [r4, #0]
 800a014:	2b2e      	cmp	r3, #46	; 0x2e
 800a016:	d10c      	bne.n	800a032 <_vfiprintf_r+0x176>
 800a018:	7863      	ldrb	r3, [r4, #1]
 800a01a:	2b2a      	cmp	r3, #42	; 0x2a
 800a01c:	d135      	bne.n	800a08a <_vfiprintf_r+0x1ce>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	9203      	str	r2, [sp, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	bfb8      	it	lt
 800a02a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a02e:	3402      	adds	r4, #2
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a118 <_vfiprintf_r+0x25c>
 800a036:	7821      	ldrb	r1, [r4, #0]
 800a038:	2203      	movs	r2, #3
 800a03a:	4650      	mov	r0, sl
 800a03c:	f7f6 f8d0 	bl	80001e0 <memchr>
 800a040:	b140      	cbz	r0, 800a054 <_vfiprintf_r+0x198>
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	eba0 000a 	sub.w	r0, r0, sl
 800a048:	fa03 f000 	lsl.w	r0, r3, r0
 800a04c:	9b04      	ldr	r3, [sp, #16]
 800a04e:	4303      	orrs	r3, r0
 800a050:	3401      	adds	r4, #1
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a058:	482c      	ldr	r0, [pc, #176]	; (800a10c <_vfiprintf_r+0x250>)
 800a05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a05e:	2206      	movs	r2, #6
 800a060:	f7f6 f8be 	bl	80001e0 <memchr>
 800a064:	2800      	cmp	r0, #0
 800a066:	d03f      	beq.n	800a0e8 <_vfiprintf_r+0x22c>
 800a068:	4b29      	ldr	r3, [pc, #164]	; (800a110 <_vfiprintf_r+0x254>)
 800a06a:	bb1b      	cbnz	r3, 800a0b4 <_vfiprintf_r+0x1f8>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	3307      	adds	r3, #7
 800a070:	f023 0307 	bic.w	r3, r3, #7
 800a074:	3308      	adds	r3, #8
 800a076:	9303      	str	r3, [sp, #12]
 800a078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07a:	443b      	add	r3, r7
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	e767      	b.n	8009f50 <_vfiprintf_r+0x94>
 800a080:	fb0c 3202 	mla	r2, ip, r2, r3
 800a084:	460c      	mov	r4, r1
 800a086:	2001      	movs	r0, #1
 800a088:	e7a5      	b.n	8009fd6 <_vfiprintf_r+0x11a>
 800a08a:	2300      	movs	r3, #0
 800a08c:	3401      	adds	r4, #1
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	4619      	mov	r1, r3
 800a092:	f04f 0c0a 	mov.w	ip, #10
 800a096:	4620      	mov	r0, r4
 800a098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09c:	3a30      	subs	r2, #48	; 0x30
 800a09e:	2a09      	cmp	r2, #9
 800a0a0:	d903      	bls.n	800a0aa <_vfiprintf_r+0x1ee>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0c5      	beq.n	800a032 <_vfiprintf_r+0x176>
 800a0a6:	9105      	str	r1, [sp, #20]
 800a0a8:	e7c3      	b.n	800a032 <_vfiprintf_r+0x176>
 800a0aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e7f0      	b.n	800a096 <_vfiprintf_r+0x1da>
 800a0b4:	ab03      	add	r3, sp, #12
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	462a      	mov	r2, r5
 800a0ba:	4b16      	ldr	r3, [pc, #88]	; (800a114 <_vfiprintf_r+0x258>)
 800a0bc:	a904      	add	r1, sp, #16
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7fd fc30 	bl	8007924 <_printf_float>
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	1c78      	adds	r0, r7, #1
 800a0c8:	d1d6      	bne.n	800a078 <_vfiprintf_r+0x1bc>
 800a0ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0cc:	07d9      	lsls	r1, r3, #31
 800a0ce:	d405      	bmi.n	800a0dc <_vfiprintf_r+0x220>
 800a0d0:	89ab      	ldrh	r3, [r5, #12]
 800a0d2:	059a      	lsls	r2, r3, #22
 800a0d4:	d402      	bmi.n	800a0dc <_vfiprintf_r+0x220>
 800a0d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d8:	f7ff f8e6 	bl	80092a8 <__retarget_lock_release_recursive>
 800a0dc:	89ab      	ldrh	r3, [r5, #12]
 800a0de:	065b      	lsls	r3, r3, #25
 800a0e0:	f53f af12 	bmi.w	8009f08 <_vfiprintf_r+0x4c>
 800a0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e6:	e711      	b.n	8009f0c <_vfiprintf_r+0x50>
 800a0e8:	ab03      	add	r3, sp, #12
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	462a      	mov	r2, r5
 800a0ee:	4b09      	ldr	r3, [pc, #36]	; (800a114 <_vfiprintf_r+0x258>)
 800a0f0:	a904      	add	r1, sp, #16
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7fd feba 	bl	8007e6c <_printf_i>
 800a0f8:	e7e4      	b.n	800a0c4 <_vfiprintf_r+0x208>
 800a0fa:	bf00      	nop
 800a0fc:	0800bdd0 	.word	0x0800bdd0
 800a100:	0800bdf0 	.word	0x0800bdf0
 800a104:	0800bdb0 	.word	0x0800bdb0
 800a108:	0800bfb2 	.word	0x0800bfb2
 800a10c:	0800bfbc 	.word	0x0800bfbc
 800a110:	08007925 	.word	0x08007925
 800a114:	08009e97 	.word	0x08009e97
 800a118:	0800bfb8 	.word	0x0800bfb8

0800a11c <_read_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d07      	ldr	r5, [pc, #28]	; (800a13c <_read_r+0x20>)
 800a120:	4604      	mov	r4, r0
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	2200      	movs	r2, #0
 800a128:	602a      	str	r2, [r5, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f7f9 fd8e 	bl	8003c4c <_read>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_read_r+0x1e>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_read_r+0x1e>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200015e0 	.word	0x200015e0

0800a140 <__ascii_wctomb>:
 800a140:	b149      	cbz	r1, 800a156 <__ascii_wctomb+0x16>
 800a142:	2aff      	cmp	r2, #255	; 0xff
 800a144:	bf85      	ittet	hi
 800a146:	238a      	movhi	r3, #138	; 0x8a
 800a148:	6003      	strhi	r3, [r0, #0]
 800a14a:	700a      	strbls	r2, [r1, #0]
 800a14c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a150:	bf98      	it	ls
 800a152:	2001      	movls	r0, #1
 800a154:	4770      	bx	lr
 800a156:	4608      	mov	r0, r1
 800a158:	4770      	bx	lr

0800a15a <abort>:
 800a15a:	b508      	push	{r3, lr}
 800a15c:	2006      	movs	r0, #6
 800a15e:	f000 f82b 	bl	800a1b8 <raise>
 800a162:	2001      	movs	r0, #1
 800a164:	f7f9 fd68 	bl	8003c38 <_exit>

0800a168 <_raise_r>:
 800a168:	291f      	cmp	r1, #31
 800a16a:	b538      	push	{r3, r4, r5, lr}
 800a16c:	4604      	mov	r4, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	d904      	bls.n	800a17c <_raise_r+0x14>
 800a172:	2316      	movs	r3, #22
 800a174:	6003      	str	r3, [r0, #0]
 800a176:	f04f 30ff 	mov.w	r0, #4294967295
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a17e:	b112      	cbz	r2, 800a186 <_raise_r+0x1e>
 800a180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a184:	b94b      	cbnz	r3, 800a19a <_raise_r+0x32>
 800a186:	4620      	mov	r0, r4
 800a188:	f000 f830 	bl	800a1ec <_getpid_r>
 800a18c:	462a      	mov	r2, r5
 800a18e:	4601      	mov	r1, r0
 800a190:	4620      	mov	r0, r4
 800a192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a196:	f000 b817 	b.w	800a1c8 <_kill_r>
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d00a      	beq.n	800a1b4 <_raise_r+0x4c>
 800a19e:	1c59      	adds	r1, r3, #1
 800a1a0:	d103      	bne.n	800a1aa <_raise_r+0x42>
 800a1a2:	2316      	movs	r3, #22
 800a1a4:	6003      	str	r3, [r0, #0]
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	e7e7      	b.n	800a17a <_raise_r+0x12>
 800a1aa:	2400      	movs	r4, #0
 800a1ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	4798      	blx	r3
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e7e0      	b.n	800a17a <_raise_r+0x12>

0800a1b8 <raise>:
 800a1b8:	4b02      	ldr	r3, [pc, #8]	; (800a1c4 <raise+0xc>)
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	f7ff bfd3 	b.w	800a168 <_raise_r>
 800a1c2:	bf00      	nop
 800a1c4:	200000cc 	.word	0x200000cc

0800a1c8 <_kill_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d07      	ldr	r5, [pc, #28]	; (800a1e8 <_kill_r+0x20>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	f7f9 fd1f 	bl	8003c18 <_kill>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	d102      	bne.n	800a1e4 <_kill_r+0x1c>
 800a1de:	682b      	ldr	r3, [r5, #0]
 800a1e0:	b103      	cbz	r3, 800a1e4 <_kill_r+0x1c>
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	bf00      	nop
 800a1e8:	200015e0 	.word	0x200015e0

0800a1ec <_getpid_r>:
 800a1ec:	f7f9 bd0c 	b.w	8003c08 <_getpid>

0800a1f0 <atan>:
 800a1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	ec55 4b10 	vmov	r4, r5, d0
 800a1f8:	4bc3      	ldr	r3, [pc, #780]	; (800a508 <atan+0x318>)
 800a1fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a1fe:	429e      	cmp	r6, r3
 800a200:	46ab      	mov	fp, r5
 800a202:	dd18      	ble.n	800a236 <atan+0x46>
 800a204:	4bc1      	ldr	r3, [pc, #772]	; (800a50c <atan+0x31c>)
 800a206:	429e      	cmp	r6, r3
 800a208:	dc01      	bgt.n	800a20e <atan+0x1e>
 800a20a:	d109      	bne.n	800a220 <atan+0x30>
 800a20c:	b144      	cbz	r4, 800a220 <atan+0x30>
 800a20e:	4622      	mov	r2, r4
 800a210:	462b      	mov	r3, r5
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 f839 	bl	800028c <__adddf3>
 800a21a:	4604      	mov	r4, r0
 800a21c:	460d      	mov	r5, r1
 800a21e:	e006      	b.n	800a22e <atan+0x3e>
 800a220:	f1bb 0f00 	cmp.w	fp, #0
 800a224:	f300 8131 	bgt.w	800a48a <atan+0x29a>
 800a228:	a59b      	add	r5, pc, #620	; (adr r5, 800a498 <atan+0x2a8>)
 800a22a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a22e:	ec45 4b10 	vmov	d0, r4, r5
 800a232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a236:	4bb6      	ldr	r3, [pc, #728]	; (800a510 <atan+0x320>)
 800a238:	429e      	cmp	r6, r3
 800a23a:	dc14      	bgt.n	800a266 <atan+0x76>
 800a23c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a240:	429e      	cmp	r6, r3
 800a242:	dc0d      	bgt.n	800a260 <atan+0x70>
 800a244:	a396      	add	r3, pc, #600	; (adr r3, 800a4a0 <atan+0x2b0>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	ee10 0a10 	vmov	r0, s0
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f6 f81c 	bl	800028c <__adddf3>
 800a254:	4baf      	ldr	r3, [pc, #700]	; (800a514 <atan+0x324>)
 800a256:	2200      	movs	r2, #0
 800a258:	f7f6 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d1e6      	bne.n	800a22e <atan+0x3e>
 800a260:	f04f 3aff 	mov.w	sl, #4294967295
 800a264:	e02b      	b.n	800a2be <atan+0xce>
 800a266:	f000 f9b7 	bl	800a5d8 <fabs>
 800a26a:	4bab      	ldr	r3, [pc, #684]	; (800a518 <atan+0x328>)
 800a26c:	429e      	cmp	r6, r3
 800a26e:	ec55 4b10 	vmov	r4, r5, d0
 800a272:	f300 80bf 	bgt.w	800a3f4 <atan+0x204>
 800a276:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a27a:	429e      	cmp	r6, r3
 800a27c:	f300 80a0 	bgt.w	800a3c0 <atan+0x1d0>
 800a280:	ee10 2a10 	vmov	r2, s0
 800a284:	ee10 0a10 	vmov	r0, s0
 800a288:	462b      	mov	r3, r5
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7f5 fffe 	bl	800028c <__adddf3>
 800a290:	4ba0      	ldr	r3, [pc, #640]	; (800a514 <atan+0x324>)
 800a292:	2200      	movs	r2, #0
 800a294:	f7f5 fff8 	bl	8000288 <__aeabi_dsub>
 800a298:	2200      	movs	r2, #0
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f5 fff1 	bl	800028c <__adddf3>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	f7f6 facb 	bl	800084c <__aeabi_ddiv>
 800a2b6:	f04f 0a00 	mov.w	sl, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	4622      	mov	r2, r4
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	f7f6 f997 	bl	80005f8 <__aeabi_dmul>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	f7f6 f991 	bl	80005f8 <__aeabi_dmul>
 800a2d6:	a374      	add	r3, pc, #464	; (adr r3, 800a4a8 <atan+0x2b8>)
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	f7f6 f98a 	bl	80005f8 <__aeabi_dmul>
 800a2e4:	a372      	add	r3, pc, #456	; (adr r3, 800a4b0 <atan+0x2c0>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f5 ffcf 	bl	800028c <__adddf3>
 800a2ee:	4632      	mov	r2, r6
 800a2f0:	463b      	mov	r3, r7
 800a2f2:	f7f6 f981 	bl	80005f8 <__aeabi_dmul>
 800a2f6:	a370      	add	r3, pc, #448	; (adr r3, 800a4b8 <atan+0x2c8>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f5 ffc6 	bl	800028c <__adddf3>
 800a300:	4632      	mov	r2, r6
 800a302:	463b      	mov	r3, r7
 800a304:	f7f6 f978 	bl	80005f8 <__aeabi_dmul>
 800a308:	a36d      	add	r3, pc, #436	; (adr r3, 800a4c0 <atan+0x2d0>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7f5 ffbd 	bl	800028c <__adddf3>
 800a312:	4632      	mov	r2, r6
 800a314:	463b      	mov	r3, r7
 800a316:	f7f6 f96f 	bl	80005f8 <__aeabi_dmul>
 800a31a:	a36b      	add	r3, pc, #428	; (adr r3, 800a4c8 <atan+0x2d8>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f7f5 ffb4 	bl	800028c <__adddf3>
 800a324:	4632      	mov	r2, r6
 800a326:	463b      	mov	r3, r7
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	a368      	add	r3, pc, #416	; (adr r3, 800a4d0 <atan+0x2e0>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f7f5 ffab 	bl	800028c <__adddf3>
 800a336:	4642      	mov	r2, r8
 800a338:	464b      	mov	r3, r9
 800a33a:	f7f6 f95d 	bl	80005f8 <__aeabi_dmul>
 800a33e:	a366      	add	r3, pc, #408	; (adr r3, 800a4d8 <atan+0x2e8>)
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	4680      	mov	r8, r0
 800a346:	4689      	mov	r9, r1
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f6 f954 	bl	80005f8 <__aeabi_dmul>
 800a350:	a363      	add	r3, pc, #396	; (adr r3, 800a4e0 <atan+0x2f0>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	f7f5 ff97 	bl	8000288 <__aeabi_dsub>
 800a35a:	4632      	mov	r2, r6
 800a35c:	463b      	mov	r3, r7
 800a35e:	f7f6 f94b 	bl	80005f8 <__aeabi_dmul>
 800a362:	a361      	add	r3, pc, #388	; (adr r3, 800a4e8 <atan+0x2f8>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f5 ff8e 	bl	8000288 <__aeabi_dsub>
 800a36c:	4632      	mov	r2, r6
 800a36e:	463b      	mov	r3, r7
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	a35e      	add	r3, pc, #376	; (adr r3, 800a4f0 <atan+0x300>)
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	f7f5 ff85 	bl	8000288 <__aeabi_dsub>
 800a37e:	4632      	mov	r2, r6
 800a380:	463b      	mov	r3, r7
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	a35c      	add	r3, pc, #368	; (adr r3, 800a4f8 <atan+0x308>)
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	f7f5 ff7c 	bl	8000288 <__aeabi_dsub>
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	f7f6 f930 	bl	80005f8 <__aeabi_dmul>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4640      	mov	r0, r8
 800a39e:	4649      	mov	r1, r9
 800a3a0:	f7f5 ff74 	bl	800028c <__adddf3>
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	f7f6 f926 	bl	80005f8 <__aeabi_dmul>
 800a3ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	d14b      	bne.n	800a44e <atan+0x25e>
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7f5 ff65 	bl	8000288 <__aeabi_dsub>
 800a3be:	e72c      	b.n	800a21a <atan+0x2a>
 800a3c0:	ee10 0a10 	vmov	r0, s0
 800a3c4:	4b53      	ldr	r3, [pc, #332]	; (800a514 <atan+0x324>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7f5 ff5d 	bl	8000288 <__aeabi_dsub>
 800a3ce:	4b51      	ldr	r3, [pc, #324]	; (800a514 <atan+0x324>)
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7f5 ff57 	bl	800028c <__adddf3>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	f7f6 fa31 	bl	800084c <__aeabi_ddiv>
 800a3ea:	f04f 0a01 	mov.w	sl, #1
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	e764      	b.n	800a2be <atan+0xce>
 800a3f4:	4b49      	ldr	r3, [pc, #292]	; (800a51c <atan+0x32c>)
 800a3f6:	429e      	cmp	r6, r3
 800a3f8:	da1d      	bge.n	800a436 <atan+0x246>
 800a3fa:	ee10 0a10 	vmov	r0, s0
 800a3fe:	4b48      	ldr	r3, [pc, #288]	; (800a520 <atan+0x330>)
 800a400:	2200      	movs	r2, #0
 800a402:	4629      	mov	r1, r5
 800a404:	f7f5 ff40 	bl	8000288 <__aeabi_dsub>
 800a408:	4b45      	ldr	r3, [pc, #276]	; (800a520 <atan+0x330>)
 800a40a:	4606      	mov	r6, r0
 800a40c:	460f      	mov	r7, r1
 800a40e:	2200      	movs	r2, #0
 800a410:	4620      	mov	r0, r4
 800a412:	4629      	mov	r1, r5
 800a414:	f7f6 f8f0 	bl	80005f8 <__aeabi_dmul>
 800a418:	4b3e      	ldr	r3, [pc, #248]	; (800a514 <atan+0x324>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	f7f5 ff36 	bl	800028c <__adddf3>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4630      	mov	r0, r6
 800a426:	4639      	mov	r1, r7
 800a428:	f7f6 fa10 	bl	800084c <__aeabi_ddiv>
 800a42c:	f04f 0a02 	mov.w	sl, #2
 800a430:	4604      	mov	r4, r0
 800a432:	460d      	mov	r5, r1
 800a434:	e743      	b.n	800a2be <atan+0xce>
 800a436:	462b      	mov	r3, r5
 800a438:	ee10 2a10 	vmov	r2, s0
 800a43c:	4939      	ldr	r1, [pc, #228]	; (800a524 <atan+0x334>)
 800a43e:	2000      	movs	r0, #0
 800a440:	f7f6 fa04 	bl	800084c <__aeabi_ddiv>
 800a444:	f04f 0a03 	mov.w	sl, #3
 800a448:	4604      	mov	r4, r0
 800a44a:	460d      	mov	r5, r1
 800a44c:	e737      	b.n	800a2be <atan+0xce>
 800a44e:	4b36      	ldr	r3, [pc, #216]	; (800a528 <atan+0x338>)
 800a450:	4e36      	ldr	r6, [pc, #216]	; (800a52c <atan+0x33c>)
 800a452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a456:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a45a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a45e:	f7f5 ff13 	bl	8000288 <__aeabi_dsub>
 800a462:	4622      	mov	r2, r4
 800a464:	462b      	mov	r3, r5
 800a466:	f7f5 ff0f 	bl	8000288 <__aeabi_dsub>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a472:	f7f5 ff09 	bl	8000288 <__aeabi_dsub>
 800a476:	f1bb 0f00 	cmp.w	fp, #0
 800a47a:	4604      	mov	r4, r0
 800a47c:	460d      	mov	r5, r1
 800a47e:	f6bf aed6 	bge.w	800a22e <atan+0x3e>
 800a482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a486:	461d      	mov	r5, r3
 800a488:	e6d1      	b.n	800a22e <atan+0x3e>
 800a48a:	a51d      	add	r5, pc, #116	; (adr r5, 800a500 <atan+0x310>)
 800a48c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a490:	e6cd      	b.n	800a22e <atan+0x3e>
 800a492:	bf00      	nop
 800a494:	f3af 8000 	nop.w
 800a498:	54442d18 	.word	0x54442d18
 800a49c:	bff921fb 	.word	0xbff921fb
 800a4a0:	8800759c 	.word	0x8800759c
 800a4a4:	7e37e43c 	.word	0x7e37e43c
 800a4a8:	e322da11 	.word	0xe322da11
 800a4ac:	3f90ad3a 	.word	0x3f90ad3a
 800a4b0:	24760deb 	.word	0x24760deb
 800a4b4:	3fa97b4b 	.word	0x3fa97b4b
 800a4b8:	a0d03d51 	.word	0xa0d03d51
 800a4bc:	3fb10d66 	.word	0x3fb10d66
 800a4c0:	c54c206e 	.word	0xc54c206e
 800a4c4:	3fb745cd 	.word	0x3fb745cd
 800a4c8:	920083ff 	.word	0x920083ff
 800a4cc:	3fc24924 	.word	0x3fc24924
 800a4d0:	5555550d 	.word	0x5555550d
 800a4d4:	3fd55555 	.word	0x3fd55555
 800a4d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4dc:	bfa2b444 	.word	0xbfa2b444
 800a4e0:	52defd9a 	.word	0x52defd9a
 800a4e4:	3fadde2d 	.word	0x3fadde2d
 800a4e8:	af749a6d 	.word	0xaf749a6d
 800a4ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800a4f0:	fe231671 	.word	0xfe231671
 800a4f4:	3fbc71c6 	.word	0x3fbc71c6
 800a4f8:	9998ebc4 	.word	0x9998ebc4
 800a4fc:	3fc99999 	.word	0x3fc99999
 800a500:	54442d18 	.word	0x54442d18
 800a504:	3ff921fb 	.word	0x3ff921fb
 800a508:	440fffff 	.word	0x440fffff
 800a50c:	7ff00000 	.word	0x7ff00000
 800a510:	3fdbffff 	.word	0x3fdbffff
 800a514:	3ff00000 	.word	0x3ff00000
 800a518:	3ff2ffff 	.word	0x3ff2ffff
 800a51c:	40038000 	.word	0x40038000
 800a520:	3ff80000 	.word	0x3ff80000
 800a524:	bff00000 	.word	0xbff00000
 800a528:	0800c0e8 	.word	0x0800c0e8
 800a52c:	0800c0c8 	.word	0x0800c0c8

0800a530 <cos>:
 800a530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a532:	ec53 2b10 	vmov	r2, r3, d0
 800a536:	4826      	ldr	r0, [pc, #152]	; (800a5d0 <cos+0xa0>)
 800a538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a53c:	4281      	cmp	r1, r0
 800a53e:	dc06      	bgt.n	800a54e <cos+0x1e>
 800a540:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a5c8 <cos+0x98>
 800a544:	b005      	add	sp, #20
 800a546:	f85d eb04 	ldr.w	lr, [sp], #4
 800a54a:	f000 bbc9 	b.w	800ace0 <__kernel_cos>
 800a54e:	4821      	ldr	r0, [pc, #132]	; (800a5d4 <cos+0xa4>)
 800a550:	4281      	cmp	r1, r0
 800a552:	dd09      	ble.n	800a568 <cos+0x38>
 800a554:	ee10 0a10 	vmov	r0, s0
 800a558:	4619      	mov	r1, r3
 800a55a:	f7f5 fe95 	bl	8000288 <__aeabi_dsub>
 800a55e:	ec41 0b10 	vmov	d0, r0, r1
 800a562:	b005      	add	sp, #20
 800a564:	f85d fb04 	ldr.w	pc, [sp], #4
 800a568:	4668      	mov	r0, sp
 800a56a:	f000 f8f9 	bl	800a760 <__ieee754_rem_pio2>
 800a56e:	f000 0003 	and.w	r0, r0, #3
 800a572:	2801      	cmp	r0, #1
 800a574:	d00b      	beq.n	800a58e <cos+0x5e>
 800a576:	2802      	cmp	r0, #2
 800a578:	d016      	beq.n	800a5a8 <cos+0x78>
 800a57a:	b9e0      	cbnz	r0, 800a5b6 <cos+0x86>
 800a57c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a580:	ed9d 0b00 	vldr	d0, [sp]
 800a584:	f000 fbac 	bl	800ace0 <__kernel_cos>
 800a588:	ec51 0b10 	vmov	r0, r1, d0
 800a58c:	e7e7      	b.n	800a55e <cos+0x2e>
 800a58e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a592:	ed9d 0b00 	vldr	d0, [sp]
 800a596:	f000 ffbb 	bl	800b510 <__kernel_sin>
 800a59a:	ec53 2b10 	vmov	r2, r3, d0
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a5a6:	e7da      	b.n	800a55e <cos+0x2e>
 800a5a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ac:	ed9d 0b00 	vldr	d0, [sp]
 800a5b0:	f000 fb96 	bl	800ace0 <__kernel_cos>
 800a5b4:	e7f1      	b.n	800a59a <cos+0x6a>
 800a5b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ba:	ed9d 0b00 	vldr	d0, [sp]
 800a5be:	2001      	movs	r0, #1
 800a5c0:	f000 ffa6 	bl	800b510 <__kernel_sin>
 800a5c4:	e7e0      	b.n	800a588 <cos+0x58>
 800a5c6:	bf00      	nop
	...
 800a5d0:	3fe921fb 	.word	0x3fe921fb
 800a5d4:	7fefffff 	.word	0x7fefffff

0800a5d8 <fabs>:
 800a5d8:	ec51 0b10 	vmov	r0, r1, d0
 800a5dc:	ee10 2a10 	vmov	r2, s0
 800a5e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5e4:	ec43 2b10 	vmov	d0, r2, r3
 800a5e8:	4770      	bx	lr
 800a5ea:	0000      	movs	r0, r0
 800a5ec:	0000      	movs	r0, r0
	...

0800a5f0 <sin>:
 800a5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5f2:	ec53 2b10 	vmov	r2, r3, d0
 800a5f6:	4828      	ldr	r0, [pc, #160]	; (800a698 <sin+0xa8>)
 800a5f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5fc:	4281      	cmp	r1, r0
 800a5fe:	dc07      	bgt.n	800a610 <sin+0x20>
 800a600:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a690 <sin+0xa0>
 800a604:	2000      	movs	r0, #0
 800a606:	b005      	add	sp, #20
 800a608:	f85d eb04 	ldr.w	lr, [sp], #4
 800a60c:	f000 bf80 	b.w	800b510 <__kernel_sin>
 800a610:	4822      	ldr	r0, [pc, #136]	; (800a69c <sin+0xac>)
 800a612:	4281      	cmp	r1, r0
 800a614:	dd09      	ble.n	800a62a <sin+0x3a>
 800a616:	ee10 0a10 	vmov	r0, s0
 800a61a:	4619      	mov	r1, r3
 800a61c:	f7f5 fe34 	bl	8000288 <__aeabi_dsub>
 800a620:	ec41 0b10 	vmov	d0, r0, r1
 800a624:	b005      	add	sp, #20
 800a626:	f85d fb04 	ldr.w	pc, [sp], #4
 800a62a:	4668      	mov	r0, sp
 800a62c:	f000 f898 	bl	800a760 <__ieee754_rem_pio2>
 800a630:	f000 0003 	and.w	r0, r0, #3
 800a634:	2801      	cmp	r0, #1
 800a636:	d00c      	beq.n	800a652 <sin+0x62>
 800a638:	2802      	cmp	r0, #2
 800a63a:	d011      	beq.n	800a660 <sin+0x70>
 800a63c:	b9f0      	cbnz	r0, 800a67c <sin+0x8c>
 800a63e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a642:	ed9d 0b00 	vldr	d0, [sp]
 800a646:	2001      	movs	r0, #1
 800a648:	f000 ff62 	bl	800b510 <__kernel_sin>
 800a64c:	ec51 0b10 	vmov	r0, r1, d0
 800a650:	e7e6      	b.n	800a620 <sin+0x30>
 800a652:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a656:	ed9d 0b00 	vldr	d0, [sp]
 800a65a:	f000 fb41 	bl	800ace0 <__kernel_cos>
 800a65e:	e7f5      	b.n	800a64c <sin+0x5c>
 800a660:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a664:	ed9d 0b00 	vldr	d0, [sp]
 800a668:	2001      	movs	r0, #1
 800a66a:	f000 ff51 	bl	800b510 <__kernel_sin>
 800a66e:	ec53 2b10 	vmov	r2, r3, d0
 800a672:	ee10 0a10 	vmov	r0, s0
 800a676:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a67a:	e7d1      	b.n	800a620 <sin+0x30>
 800a67c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a680:	ed9d 0b00 	vldr	d0, [sp]
 800a684:	f000 fb2c 	bl	800ace0 <__kernel_cos>
 800a688:	e7f1      	b.n	800a66e <sin+0x7e>
 800a68a:	bf00      	nop
 800a68c:	f3af 8000 	nop.w
	...
 800a698:	3fe921fb 	.word	0x3fe921fb
 800a69c:	7fefffff 	.word	0x7fefffff

0800a6a0 <tan>:
 800a6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6a2:	ec53 2b10 	vmov	r2, r3, d0
 800a6a6:	4816      	ldr	r0, [pc, #88]	; (800a700 <tan+0x60>)
 800a6a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6ac:	4281      	cmp	r1, r0
 800a6ae:	dc07      	bgt.n	800a6c0 <tan+0x20>
 800a6b0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a6f8 <tan+0x58>
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	b005      	add	sp, #20
 800a6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6bc:	f000 bfe8 	b.w	800b690 <__kernel_tan>
 800a6c0:	4810      	ldr	r0, [pc, #64]	; (800a704 <tan+0x64>)
 800a6c2:	4281      	cmp	r1, r0
 800a6c4:	dd09      	ble.n	800a6da <tan+0x3a>
 800a6c6:	ee10 0a10 	vmov	r0, s0
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	ec41 0b10 	vmov	d0, r0, r1
 800a6d4:	b005      	add	sp, #20
 800a6d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6da:	4668      	mov	r0, sp
 800a6dc:	f000 f840 	bl	800a760 <__ieee754_rem_pio2>
 800a6e0:	0040      	lsls	r0, r0, #1
 800a6e2:	f000 0002 	and.w	r0, r0, #2
 800a6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ea:	ed9d 0b00 	vldr	d0, [sp]
 800a6ee:	f1c0 0001 	rsb	r0, r0, #1
 800a6f2:	f000 ffcd 	bl	800b690 <__kernel_tan>
 800a6f6:	e7ed      	b.n	800a6d4 <tan+0x34>
	...
 800a700:	3fe921fb 	.word	0x3fe921fb
 800a704:	7fefffff 	.word	0x7fefffff

0800a708 <sqrt>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	ed2d 8b02 	vpush	{d8}
 800a70e:	ec55 4b10 	vmov	r4, r5, d0
 800a712:	f000 fa31 	bl	800ab78 <__ieee754_sqrt>
 800a716:	4622      	mov	r2, r4
 800a718:	462b      	mov	r3, r5
 800a71a:	4620      	mov	r0, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	eeb0 8a40 	vmov.f32	s16, s0
 800a722:	eef0 8a60 	vmov.f32	s17, s1
 800a726:	f7f6 fa01 	bl	8000b2c <__aeabi_dcmpun>
 800a72a:	b990      	cbnz	r0, 800a752 <sqrt+0x4a>
 800a72c:	2200      	movs	r2, #0
 800a72e:	2300      	movs	r3, #0
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f6 f9d2 	bl	8000adc <__aeabi_dcmplt>
 800a738:	b158      	cbz	r0, 800a752 <sqrt+0x4a>
 800a73a:	f7fd f813 	bl	8007764 <__errno>
 800a73e:	2321      	movs	r3, #33	; 0x21
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	4610      	mov	r0, r2
 800a748:	4619      	mov	r1, r3
 800a74a:	f7f6 f87f 	bl	800084c <__aeabi_ddiv>
 800a74e:	ec41 0b18 	vmov	d8, r0, r1
 800a752:	eeb0 0a48 	vmov.f32	s0, s16
 800a756:	eef0 0a68 	vmov.f32	s1, s17
 800a75a:	ecbd 8b02 	vpop	{d8}
 800a75e:	bd38      	pop	{r3, r4, r5, pc}

0800a760 <__ieee754_rem_pio2>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	ed2d 8b02 	vpush	{d8}
 800a768:	ec55 4b10 	vmov	r4, r5, d0
 800a76c:	4bca      	ldr	r3, [pc, #808]	; (800aa98 <__ieee754_rem_pio2+0x338>)
 800a76e:	b08b      	sub	sp, #44	; 0x2c
 800a770:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a774:	4598      	cmp	r8, r3
 800a776:	4682      	mov	sl, r0
 800a778:	9502      	str	r5, [sp, #8]
 800a77a:	dc08      	bgt.n	800a78e <__ieee754_rem_pio2+0x2e>
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	ed80 0b00 	vstr	d0, [r0]
 800a784:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a788:	f04f 0b00 	mov.w	fp, #0
 800a78c:	e028      	b.n	800a7e0 <__ieee754_rem_pio2+0x80>
 800a78e:	4bc3      	ldr	r3, [pc, #780]	; (800aa9c <__ieee754_rem_pio2+0x33c>)
 800a790:	4598      	cmp	r8, r3
 800a792:	dc78      	bgt.n	800a886 <__ieee754_rem_pio2+0x126>
 800a794:	9b02      	ldr	r3, [sp, #8]
 800a796:	4ec2      	ldr	r6, [pc, #776]	; (800aaa0 <__ieee754_rem_pio2+0x340>)
 800a798:	2b00      	cmp	r3, #0
 800a79a:	ee10 0a10 	vmov	r0, s0
 800a79e:	a3b0      	add	r3, pc, #704	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x300>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	dd39      	ble.n	800a81c <__ieee754_rem_pio2+0xbc>
 800a7a8:	f7f5 fd6e 	bl	8000288 <__aeabi_dsub>
 800a7ac:	45b0      	cmp	r8, r6
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	d01b      	beq.n	800a7ec <__ieee754_rem_pio2+0x8c>
 800a7b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x308>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fd65 	bl	8000288 <__aeabi_dsub>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	e9ca 2300 	strd	r2, r3, [sl]
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 fd5d 	bl	8000288 <__aeabi_dsub>
 800a7ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x308>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f7f5 fd58 	bl	8000288 <__aeabi_dsub>
 800a7d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7dc:	f04f 0b01 	mov.w	fp, #1
 800a7e0:	4658      	mov	r0, fp
 800a7e2:	b00b      	add	sp, #44	; 0x2c
 800a7e4:	ecbd 8b02 	vpop	{d8}
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x310>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fd49 	bl	8000288 <__aeabi_dsub>
 800a7f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x318>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	460d      	mov	r5, r1
 800a800:	f7f5 fd42 	bl	8000288 <__aeabi_dsub>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	e9ca 2300 	strd	r2, r3, [sl]
 800a80c:	4620      	mov	r0, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	f7f5 fd3a 	bl	8000288 <__aeabi_dsub>
 800a814:	a398      	add	r3, pc, #608	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x318>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	e7db      	b.n	800a7d4 <__ieee754_rem_pio2+0x74>
 800a81c:	f7f5 fd36 	bl	800028c <__adddf3>
 800a820:	45b0      	cmp	r8, r6
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	d016      	beq.n	800a856 <__ieee754_rem_pio2+0xf6>
 800a828:	a38f      	add	r3, pc, #572	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x308>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 fd2d 	bl	800028c <__adddf3>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	e9ca 2300 	strd	r2, r3, [sl]
 800a83a:	4620      	mov	r0, r4
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f5 fd23 	bl	8000288 <__aeabi_dsub>
 800a842:	a389      	add	r3, pc, #548	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x308>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fd20 	bl	800028c <__adddf3>
 800a84c:	f04f 3bff 	mov.w	fp, #4294967295
 800a850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a854:	e7c4      	b.n	800a7e0 <__ieee754_rem_pio2+0x80>
 800a856:	a386      	add	r3, pc, #536	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x310>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fd16 	bl	800028c <__adddf3>
 800a860:	a385      	add	r3, pc, #532	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x318>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	4604      	mov	r4, r0
 800a868:	460d      	mov	r5, r1
 800a86a:	f7f5 fd0f 	bl	800028c <__adddf3>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	e9ca 2300 	strd	r2, r3, [sl]
 800a876:	4620      	mov	r0, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	f7f5 fd05 	bl	8000288 <__aeabi_dsub>
 800a87e:	a37e      	add	r3, pc, #504	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x318>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	e7e0      	b.n	800a848 <__ieee754_rem_pio2+0xe8>
 800a886:	4b87      	ldr	r3, [pc, #540]	; (800aaa4 <__ieee754_rem_pio2+0x344>)
 800a888:	4598      	cmp	r8, r3
 800a88a:	f300 80d9 	bgt.w	800aa40 <__ieee754_rem_pio2+0x2e0>
 800a88e:	f7ff fea3 	bl	800a5d8 <fabs>
 800a892:	ec55 4b10 	vmov	r4, r5, d0
 800a896:	ee10 0a10 	vmov	r0, s0
 800a89a:	a379      	add	r3, pc, #484	; (adr r3, 800aa80 <__ieee754_rem_pio2+0x320>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7f5 fea9 	bl	80005f8 <__aeabi_dmul>
 800a8a6:	4b80      	ldr	r3, [pc, #512]	; (800aaa8 <__ieee754_rem_pio2+0x348>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f7f5 fcef 	bl	800028c <__adddf3>
 800a8ae:	f7f6 f953 	bl	8000b58 <__aeabi_d2iz>
 800a8b2:	4683      	mov	fp, r0
 800a8b4:	f7f5 fe36 	bl	8000524 <__aeabi_i2d>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	ec43 2b18 	vmov	d8, r2, r3
 800a8c0:	a367      	add	r3, pc, #412	; (adr r3, 800aa60 <__ieee754_rem_pio2+0x300>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fe97 	bl	80005f8 <__aeabi_dmul>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fcd9 	bl	8000288 <__aeabi_dsub>
 800a8d6:	a364      	add	r3, pc, #400	; (adr r3, 800aa68 <__ieee754_rem_pio2+0x308>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	4606      	mov	r6, r0
 800a8de:	460f      	mov	r7, r1
 800a8e0:	ec51 0b18 	vmov	r0, r1, d8
 800a8e4:	f7f5 fe88 	bl	80005f8 <__aeabi_dmul>
 800a8e8:	f1bb 0f1f 	cmp.w	fp, #31
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	dc0d      	bgt.n	800a90e <__ieee754_rem_pio2+0x1ae>
 800a8f2:	4b6e      	ldr	r3, [pc, #440]	; (800aaac <__ieee754_rem_pio2+0x34c>)
 800a8f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fc:	4543      	cmp	r3, r8
 800a8fe:	d006      	beq.n	800a90e <__ieee754_rem_pio2+0x1ae>
 800a900:	4622      	mov	r2, r4
 800a902:	462b      	mov	r3, r5
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f7f5 fcbe 	bl	8000288 <__aeabi_dsub>
 800a90c:	e00f      	b.n	800a92e <__ieee754_rem_pio2+0x1ce>
 800a90e:	462b      	mov	r3, r5
 800a910:	4622      	mov	r2, r4
 800a912:	4630      	mov	r0, r6
 800a914:	4639      	mov	r1, r7
 800a916:	f7f5 fcb7 	bl	8000288 <__aeabi_dsub>
 800a91a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a91e:	9303      	str	r3, [sp, #12]
 800a920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a924:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a928:	f1b8 0f10 	cmp.w	r8, #16
 800a92c:	dc02      	bgt.n	800a934 <__ieee754_rem_pio2+0x1d4>
 800a92e:	e9ca 0100 	strd	r0, r1, [sl]
 800a932:	e039      	b.n	800a9a8 <__ieee754_rem_pio2+0x248>
 800a934:	a34e      	add	r3, pc, #312	; (adr r3, 800aa70 <__ieee754_rem_pio2+0x310>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	ec51 0b18 	vmov	r0, r1, d8
 800a93e:	f7f5 fe5b 	bl	80005f8 <__aeabi_dmul>
 800a942:	4604      	mov	r4, r0
 800a944:	460d      	mov	r5, r1
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4630      	mov	r0, r6
 800a94c:	4639      	mov	r1, r7
 800a94e:	f7f5 fc9b 	bl	8000288 <__aeabi_dsub>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4680      	mov	r8, r0
 800a958:	4689      	mov	r9, r1
 800a95a:	4630      	mov	r0, r6
 800a95c:	4639      	mov	r1, r7
 800a95e:	f7f5 fc93 	bl	8000288 <__aeabi_dsub>
 800a962:	4622      	mov	r2, r4
 800a964:	462b      	mov	r3, r5
 800a966:	f7f5 fc8f 	bl	8000288 <__aeabi_dsub>
 800a96a:	a343      	add	r3, pc, #268	; (adr r3, 800aa78 <__ieee754_rem_pio2+0x318>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	ec51 0b18 	vmov	r0, r1, d8
 800a978:	f7f5 fe3e 	bl	80005f8 <__aeabi_dmul>
 800a97c:	4622      	mov	r2, r4
 800a97e:	462b      	mov	r3, r5
 800a980:	f7f5 fc82 	bl	8000288 <__aeabi_dsub>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	4640      	mov	r0, r8
 800a98e:	4649      	mov	r1, r9
 800a990:	f7f5 fc7a 	bl	8000288 <__aeabi_dsub>
 800a994:	9a03      	ldr	r2, [sp, #12]
 800a996:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	2b31      	cmp	r3, #49	; 0x31
 800a99e:	dc24      	bgt.n	800a9ea <__ieee754_rem_pio2+0x28a>
 800a9a0:	e9ca 0100 	strd	r0, r1, [sl]
 800a9a4:	4646      	mov	r6, r8
 800a9a6:	464f      	mov	r7, r9
 800a9a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	f7f5 fc68 	bl	8000288 <__aeabi_dsub>
 800a9b8:	462b      	mov	r3, r5
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	f7f5 fc64 	bl	8000288 <__aeabi_dsub>
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9c8:	f6bf af0a 	bge.w	800a7e0 <__ieee754_rem_pio2+0x80>
 800a9cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a9d0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9d8:	f8ca 8000 	str.w	r8, [sl]
 800a9dc:	f8ca 0008 	str.w	r0, [sl, #8]
 800a9e0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a9e4:	f1cb 0b00 	rsb	fp, fp, #0
 800a9e8:	e6fa      	b.n	800a7e0 <__ieee754_rem_pio2+0x80>
 800a9ea:	a327      	add	r3, pc, #156	; (adr r3, 800aa88 <__ieee754_rem_pio2+0x328>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	ec51 0b18 	vmov	r0, r1, d8
 800a9f4:	f7f5 fe00 	bl	80005f8 <__aeabi_dmul>
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	460d      	mov	r5, r1
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f5 fc40 	bl	8000288 <__aeabi_dsub>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	f7f5 fc38 	bl	8000288 <__aeabi_dsub>
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	f7f5 fc34 	bl	8000288 <__aeabi_dsub>
 800aa20:	a31b      	add	r3, pc, #108	; (adr r3, 800aa90 <__ieee754_rem_pio2+0x330>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	4604      	mov	r4, r0
 800aa28:	460d      	mov	r5, r1
 800aa2a:	ec51 0b18 	vmov	r0, r1, d8
 800aa2e:	f7f5 fde3 	bl	80005f8 <__aeabi_dmul>
 800aa32:	4622      	mov	r2, r4
 800aa34:	462b      	mov	r3, r5
 800aa36:	f7f5 fc27 	bl	8000288 <__aeabi_dsub>
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	e75f      	b.n	800a900 <__ieee754_rem_pio2+0x1a0>
 800aa40:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <__ieee754_rem_pio2+0x350>)
 800aa42:	4598      	cmp	r8, r3
 800aa44:	dd36      	ble.n	800aab4 <__ieee754_rem_pio2+0x354>
 800aa46:	ee10 2a10 	vmov	r2, s0
 800aa4a:	462b      	mov	r3, r5
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f7f5 fc1a 	bl	8000288 <__aeabi_dsub>
 800aa54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa58:	e9ca 0100 	strd	r0, r1, [sl]
 800aa5c:	e694      	b.n	800a788 <__ieee754_rem_pio2+0x28>
 800aa5e:	bf00      	nop
 800aa60:	54400000 	.word	0x54400000
 800aa64:	3ff921fb 	.word	0x3ff921fb
 800aa68:	1a626331 	.word	0x1a626331
 800aa6c:	3dd0b461 	.word	0x3dd0b461
 800aa70:	1a600000 	.word	0x1a600000
 800aa74:	3dd0b461 	.word	0x3dd0b461
 800aa78:	2e037073 	.word	0x2e037073
 800aa7c:	3ba3198a 	.word	0x3ba3198a
 800aa80:	6dc9c883 	.word	0x6dc9c883
 800aa84:	3fe45f30 	.word	0x3fe45f30
 800aa88:	2e000000 	.word	0x2e000000
 800aa8c:	3ba3198a 	.word	0x3ba3198a
 800aa90:	252049c1 	.word	0x252049c1
 800aa94:	397b839a 	.word	0x397b839a
 800aa98:	3fe921fb 	.word	0x3fe921fb
 800aa9c:	4002d97b 	.word	0x4002d97b
 800aaa0:	3ff921fb 	.word	0x3ff921fb
 800aaa4:	413921fb 	.word	0x413921fb
 800aaa8:	3fe00000 	.word	0x3fe00000
 800aaac:	0800c108 	.word	0x0800c108
 800aab0:	7fefffff 	.word	0x7fefffff
 800aab4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800aab8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800aabc:	ee10 0a10 	vmov	r0, s0
 800aac0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800aac4:	ee10 6a10 	vmov	r6, s0
 800aac8:	460f      	mov	r7, r1
 800aaca:	f7f6 f845 	bl	8000b58 <__aeabi_d2iz>
 800aace:	f7f5 fd29 	bl	8000524 <__aeabi_i2d>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4630      	mov	r0, r6
 800aad8:	4639      	mov	r1, r7
 800aada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aade:	f7f5 fbd3 	bl	8000288 <__aeabi_dsub>
 800aae2:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <__ieee754_rem_pio2+0x410>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	460f      	mov	r7, r1
 800aaec:	4606      	mov	r6, r0
 800aaee:	f7f6 f833 	bl	8000b58 <__aeabi_d2iz>
 800aaf2:	f7f5 fd17 	bl	8000524 <__aeabi_i2d>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab02:	f7f5 fbc1 	bl	8000288 <__aeabi_dsub>
 800ab06:	4b1a      	ldr	r3, [pc, #104]	; (800ab70 <__ieee754_rem_pio2+0x410>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f7f5 fd75 	bl	80005f8 <__aeabi_dmul>
 800ab0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab12:	ad04      	add	r5, sp, #16
 800ab14:	f04f 0803 	mov.w	r8, #3
 800ab18:	46a9      	mov	r9, r5
 800ab1a:	2600      	movs	r6, #0
 800ab1c:	2700      	movs	r7, #0
 800ab1e:	4632      	mov	r2, r6
 800ab20:	463b      	mov	r3, r7
 800ab22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ab26:	46c3      	mov	fp, r8
 800ab28:	3d08      	subs	r5, #8
 800ab2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab2e:	f7f5 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1f3      	bne.n	800ab1e <__ieee754_rem_pio2+0x3be>
 800ab36:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <__ieee754_rem_pio2+0x414>)
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	4622      	mov	r2, r4
 800ab40:	465b      	mov	r3, fp
 800ab42:	4651      	mov	r1, sl
 800ab44:	4648      	mov	r0, r9
 800ab46:	f000 f993 	bl	800ae70 <__kernel_rem_pio2>
 800ab4a:	9b02      	ldr	r3, [sp, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	4683      	mov	fp, r0
 800ab50:	f6bf ae46 	bge.w	800a7e0 <__ieee754_rem_pio2+0x80>
 800ab54:	e9da 2100 	ldrd	r2, r1, [sl]
 800ab58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab5c:	e9ca 2300 	strd	r2, r3, [sl]
 800ab60:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ab64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab68:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ab6c:	e73a      	b.n	800a9e4 <__ieee754_rem_pio2+0x284>
 800ab6e:	bf00      	nop
 800ab70:	41700000 	.word	0x41700000
 800ab74:	0800c188 	.word	0x0800c188

0800ab78 <__ieee754_sqrt>:
 800ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7c:	ec55 4b10 	vmov	r4, r5, d0
 800ab80:	4e55      	ldr	r6, [pc, #340]	; (800acd8 <__ieee754_sqrt+0x160>)
 800ab82:	43ae      	bics	r6, r5
 800ab84:	ee10 0a10 	vmov	r0, s0
 800ab88:	ee10 3a10 	vmov	r3, s0
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4629      	mov	r1, r5
 800ab90:	d110      	bne.n	800abb4 <__ieee754_sqrt+0x3c>
 800ab92:	ee10 2a10 	vmov	r2, s0
 800ab96:	462b      	mov	r3, r5
 800ab98:	f7f5 fd2e 	bl	80005f8 <__aeabi_dmul>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4620      	mov	r0, r4
 800aba2:	4629      	mov	r1, r5
 800aba4:	f7f5 fb72 	bl	800028c <__adddf3>
 800aba8:	4604      	mov	r4, r0
 800abaa:	460d      	mov	r5, r1
 800abac:	ec45 4b10 	vmov	d0, r4, r5
 800abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	dc10      	bgt.n	800abda <__ieee754_sqrt+0x62>
 800abb8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800abbc:	4330      	orrs	r0, r6
 800abbe:	d0f5      	beq.n	800abac <__ieee754_sqrt+0x34>
 800abc0:	b15d      	cbz	r5, 800abda <__ieee754_sqrt+0x62>
 800abc2:	ee10 2a10 	vmov	r2, s0
 800abc6:	462b      	mov	r3, r5
 800abc8:	ee10 0a10 	vmov	r0, s0
 800abcc:	f7f5 fb5c 	bl	8000288 <__aeabi_dsub>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	f7f5 fe3a 	bl	800084c <__aeabi_ddiv>
 800abd8:	e7e6      	b.n	800aba8 <__ieee754_sqrt+0x30>
 800abda:	1512      	asrs	r2, r2, #20
 800abdc:	d074      	beq.n	800acc8 <__ieee754_sqrt+0x150>
 800abde:	07d4      	lsls	r4, r2, #31
 800abe0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800abe4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800abe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800abec:	bf5e      	ittt	pl
 800abee:	0fda      	lsrpl	r2, r3, #31
 800abf0:	005b      	lslpl	r3, r3, #1
 800abf2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800abf6:	2400      	movs	r4, #0
 800abf8:	0fda      	lsrs	r2, r3, #31
 800abfa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800abfe:	107f      	asrs	r7, r7, #1
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	2516      	movs	r5, #22
 800ac04:	4620      	mov	r0, r4
 800ac06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ac0a:	1886      	adds	r6, r0, r2
 800ac0c:	428e      	cmp	r6, r1
 800ac0e:	bfde      	ittt	le
 800ac10:	1b89      	suble	r1, r1, r6
 800ac12:	18b0      	addle	r0, r6, r2
 800ac14:	18a4      	addle	r4, r4, r2
 800ac16:	0049      	lsls	r1, r1, #1
 800ac18:	3d01      	subs	r5, #1
 800ac1a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ac1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ac22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac26:	d1f0      	bne.n	800ac0a <__ieee754_sqrt+0x92>
 800ac28:	462a      	mov	r2, r5
 800ac2a:	f04f 0e20 	mov.w	lr, #32
 800ac2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ac32:	4281      	cmp	r1, r0
 800ac34:	eb06 0c05 	add.w	ip, r6, r5
 800ac38:	dc02      	bgt.n	800ac40 <__ieee754_sqrt+0xc8>
 800ac3a:	d113      	bne.n	800ac64 <__ieee754_sqrt+0xec>
 800ac3c:	459c      	cmp	ip, r3
 800ac3e:	d811      	bhi.n	800ac64 <__ieee754_sqrt+0xec>
 800ac40:	f1bc 0f00 	cmp.w	ip, #0
 800ac44:	eb0c 0506 	add.w	r5, ip, r6
 800ac48:	da43      	bge.n	800acd2 <__ieee754_sqrt+0x15a>
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	db41      	blt.n	800acd2 <__ieee754_sqrt+0x15a>
 800ac4e:	f100 0801 	add.w	r8, r0, #1
 800ac52:	1a09      	subs	r1, r1, r0
 800ac54:	459c      	cmp	ip, r3
 800ac56:	bf88      	it	hi
 800ac58:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ac5c:	eba3 030c 	sub.w	r3, r3, ip
 800ac60:	4432      	add	r2, r6
 800ac62:	4640      	mov	r0, r8
 800ac64:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ac68:	f1be 0e01 	subs.w	lr, lr, #1
 800ac6c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ac70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ac78:	d1db      	bne.n	800ac32 <__ieee754_sqrt+0xba>
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	d006      	beq.n	800ac8c <__ieee754_sqrt+0x114>
 800ac7e:	1c50      	adds	r0, r2, #1
 800ac80:	bf13      	iteet	ne
 800ac82:	3201      	addne	r2, #1
 800ac84:	3401      	addeq	r4, #1
 800ac86:	4672      	moveq	r2, lr
 800ac88:	f022 0201 	bicne.w	r2, r2, #1
 800ac8c:	1063      	asrs	r3, r4, #1
 800ac8e:	0852      	lsrs	r2, r2, #1
 800ac90:	07e1      	lsls	r1, r4, #31
 800ac92:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ac96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ac9a:	bf48      	it	mi
 800ac9c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aca0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aca4:	4614      	mov	r4, r2
 800aca6:	e781      	b.n	800abac <__ieee754_sqrt+0x34>
 800aca8:	0ad9      	lsrs	r1, r3, #11
 800acaa:	3815      	subs	r0, #21
 800acac:	055b      	lsls	r3, r3, #21
 800acae:	2900      	cmp	r1, #0
 800acb0:	d0fa      	beq.n	800aca8 <__ieee754_sqrt+0x130>
 800acb2:	02cd      	lsls	r5, r1, #11
 800acb4:	d50a      	bpl.n	800accc <__ieee754_sqrt+0x154>
 800acb6:	f1c2 0420 	rsb	r4, r2, #32
 800acba:	fa23 f404 	lsr.w	r4, r3, r4
 800acbe:	1e55      	subs	r5, r2, #1
 800acc0:	4093      	lsls	r3, r2
 800acc2:	4321      	orrs	r1, r4
 800acc4:	1b42      	subs	r2, r0, r5
 800acc6:	e78a      	b.n	800abde <__ieee754_sqrt+0x66>
 800acc8:	4610      	mov	r0, r2
 800acca:	e7f0      	b.n	800acae <__ieee754_sqrt+0x136>
 800accc:	0049      	lsls	r1, r1, #1
 800acce:	3201      	adds	r2, #1
 800acd0:	e7ef      	b.n	800acb2 <__ieee754_sqrt+0x13a>
 800acd2:	4680      	mov	r8, r0
 800acd4:	e7bd      	b.n	800ac52 <__ieee754_sqrt+0xda>
 800acd6:	bf00      	nop
 800acd8:	7ff00000 	.word	0x7ff00000
 800acdc:	00000000 	.word	0x00000000

0800ace0 <__kernel_cos>:
 800ace0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	ec57 6b10 	vmov	r6, r7, d0
 800ace8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800acec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800acf0:	ed8d 1b00 	vstr	d1, [sp]
 800acf4:	da07      	bge.n	800ad06 <__kernel_cos+0x26>
 800acf6:	ee10 0a10 	vmov	r0, s0
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 ff2c 	bl	8000b58 <__aeabi_d2iz>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	f000 8088 	beq.w	800ae16 <__kernel_cos+0x136>
 800ad06:	4632      	mov	r2, r6
 800ad08:	463b      	mov	r3, r7
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	f7f5 fc73 	bl	80005f8 <__aeabi_dmul>
 800ad12:	4b51      	ldr	r3, [pc, #324]	; (800ae58 <__kernel_cos+0x178>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7f5 fc6d 	bl	80005f8 <__aeabi_dmul>
 800ad1e:	a340      	add	r3, pc, #256	; (adr r3, 800ae20 <__kernel_cos+0x140>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	4682      	mov	sl, r0
 800ad26:	468b      	mov	fp, r1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 fc64 	bl	80005f8 <__aeabi_dmul>
 800ad30:	a33d      	add	r3, pc, #244	; (adr r3, 800ae28 <__kernel_cos+0x148>)
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 faa9 	bl	800028c <__adddf3>
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	462b      	mov	r3, r5
 800ad3e:	f7f5 fc5b 	bl	80005f8 <__aeabi_dmul>
 800ad42:	a33b      	add	r3, pc, #236	; (adr r3, 800ae30 <__kernel_cos+0x150>)
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f7f5 fa9e 	bl	8000288 <__aeabi_dsub>
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	462b      	mov	r3, r5
 800ad50:	f7f5 fc52 	bl	80005f8 <__aeabi_dmul>
 800ad54:	a338      	add	r3, pc, #224	; (adr r3, 800ae38 <__kernel_cos+0x158>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7f5 fa97 	bl	800028c <__adddf3>
 800ad5e:	4622      	mov	r2, r4
 800ad60:	462b      	mov	r3, r5
 800ad62:	f7f5 fc49 	bl	80005f8 <__aeabi_dmul>
 800ad66:	a336      	add	r3, pc, #216	; (adr r3, 800ae40 <__kernel_cos+0x160>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f7f5 fa8c 	bl	8000288 <__aeabi_dsub>
 800ad70:	4622      	mov	r2, r4
 800ad72:	462b      	mov	r3, r5
 800ad74:	f7f5 fc40 	bl	80005f8 <__aeabi_dmul>
 800ad78:	a333      	add	r3, pc, #204	; (adr r3, 800ae48 <__kernel_cos+0x168>)
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	f7f5 fa85 	bl	800028c <__adddf3>
 800ad82:	4622      	mov	r2, r4
 800ad84:	462b      	mov	r3, r5
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	f7f5 fc33 	bl	80005f8 <__aeabi_dmul>
 800ad92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad96:	4604      	mov	r4, r0
 800ad98:	460d      	mov	r5, r1
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 fc2b 	bl	80005f8 <__aeabi_dmul>
 800ada2:	460b      	mov	r3, r1
 800ada4:	4602      	mov	r2, r0
 800ada6:	4629      	mov	r1, r5
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7f5 fa6d 	bl	8000288 <__aeabi_dsub>
 800adae:	4b2b      	ldr	r3, [pc, #172]	; (800ae5c <__kernel_cos+0x17c>)
 800adb0:	4598      	cmp	r8, r3
 800adb2:	4606      	mov	r6, r0
 800adb4:	460f      	mov	r7, r1
 800adb6:	dc10      	bgt.n	800adda <__kernel_cos+0xfa>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4650      	mov	r0, sl
 800adbe:	4659      	mov	r1, fp
 800adc0:	f7f5 fa62 	bl	8000288 <__aeabi_dsub>
 800adc4:	460b      	mov	r3, r1
 800adc6:	4926      	ldr	r1, [pc, #152]	; (800ae60 <__kernel_cos+0x180>)
 800adc8:	4602      	mov	r2, r0
 800adca:	2000      	movs	r0, #0
 800adcc:	f7f5 fa5c 	bl	8000288 <__aeabi_dsub>
 800add0:	ec41 0b10 	vmov	d0, r0, r1
 800add4:	b003      	add	sp, #12
 800add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adda:	4b22      	ldr	r3, [pc, #136]	; (800ae64 <__kernel_cos+0x184>)
 800addc:	4920      	ldr	r1, [pc, #128]	; (800ae60 <__kernel_cos+0x180>)
 800adde:	4598      	cmp	r8, r3
 800ade0:	bfcc      	ite	gt
 800ade2:	4d21      	ldrgt	r5, [pc, #132]	; (800ae68 <__kernel_cos+0x188>)
 800ade4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ade8:	2400      	movs	r4, #0
 800adea:	4622      	mov	r2, r4
 800adec:	462b      	mov	r3, r5
 800adee:	2000      	movs	r0, #0
 800adf0:	f7f5 fa4a 	bl	8000288 <__aeabi_dsub>
 800adf4:	4622      	mov	r2, r4
 800adf6:	4680      	mov	r8, r0
 800adf8:	4689      	mov	r9, r1
 800adfa:	462b      	mov	r3, r5
 800adfc:	4650      	mov	r0, sl
 800adfe:	4659      	mov	r1, fp
 800ae00:	f7f5 fa42 	bl	8000288 <__aeabi_dsub>
 800ae04:	4632      	mov	r2, r6
 800ae06:	463b      	mov	r3, r7
 800ae08:	f7f5 fa3e 	bl	8000288 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4640      	mov	r0, r8
 800ae12:	4649      	mov	r1, r9
 800ae14:	e7da      	b.n	800adcc <__kernel_cos+0xec>
 800ae16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ae50 <__kernel_cos+0x170>
 800ae1a:	e7db      	b.n	800add4 <__kernel_cos+0xf4>
 800ae1c:	f3af 8000 	nop.w
 800ae20:	be8838d4 	.word	0xbe8838d4
 800ae24:	bda8fae9 	.word	0xbda8fae9
 800ae28:	bdb4b1c4 	.word	0xbdb4b1c4
 800ae2c:	3e21ee9e 	.word	0x3e21ee9e
 800ae30:	809c52ad 	.word	0x809c52ad
 800ae34:	3e927e4f 	.word	0x3e927e4f
 800ae38:	19cb1590 	.word	0x19cb1590
 800ae3c:	3efa01a0 	.word	0x3efa01a0
 800ae40:	16c15177 	.word	0x16c15177
 800ae44:	3f56c16c 	.word	0x3f56c16c
 800ae48:	5555554c 	.word	0x5555554c
 800ae4c:	3fa55555 	.word	0x3fa55555
 800ae50:	00000000 	.word	0x00000000
 800ae54:	3ff00000 	.word	0x3ff00000
 800ae58:	3fe00000 	.word	0x3fe00000
 800ae5c:	3fd33332 	.word	0x3fd33332
 800ae60:	3ff00000 	.word	0x3ff00000
 800ae64:	3fe90000 	.word	0x3fe90000
 800ae68:	3fd20000 	.word	0x3fd20000
 800ae6c:	00000000 	.word	0x00000000

0800ae70 <__kernel_rem_pio2>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	ed2d 8b02 	vpush	{d8}
 800ae78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ae7c:	f112 0f14 	cmn.w	r2, #20
 800ae80:	9308      	str	r3, [sp, #32]
 800ae82:	9101      	str	r1, [sp, #4]
 800ae84:	4bc4      	ldr	r3, [pc, #784]	; (800b198 <__kernel_rem_pio2+0x328>)
 800ae86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ae88:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae8e:	9302      	str	r3, [sp, #8]
 800ae90:	9b08      	ldr	r3, [sp, #32]
 800ae92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae96:	bfa8      	it	ge
 800ae98:	1ed4      	subge	r4, r2, #3
 800ae9a:	9306      	str	r3, [sp, #24]
 800ae9c:	bfb2      	itee	lt
 800ae9e:	2400      	movlt	r4, #0
 800aea0:	2318      	movge	r3, #24
 800aea2:	fb94 f4f3 	sdivge	r4, r4, r3
 800aea6:	f06f 0317 	mvn.w	r3, #23
 800aeaa:	fb04 3303 	mla	r3, r4, r3, r3
 800aeae:	eb03 0a02 	add.w	sl, r3, r2
 800aeb2:	9b02      	ldr	r3, [sp, #8]
 800aeb4:	9a06      	ldr	r2, [sp, #24]
 800aeb6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b188 <__kernel_rem_pio2+0x318>
 800aeba:	eb03 0802 	add.w	r8, r3, r2
 800aebe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aec0:	1aa7      	subs	r7, r4, r2
 800aec2:	ae22      	add	r6, sp, #136	; 0x88
 800aec4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aec8:	2500      	movs	r5, #0
 800aeca:	4545      	cmp	r5, r8
 800aecc:	dd13      	ble.n	800aef6 <__kernel_rem_pio2+0x86>
 800aece:	9b08      	ldr	r3, [sp, #32]
 800aed0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b188 <__kernel_rem_pio2+0x318>
 800aed4:	aa22      	add	r2, sp, #136	; 0x88
 800aed6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aeda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800aede:	f04f 0800 	mov.w	r8, #0
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	4598      	cmp	r8, r3
 800aee6:	dc2f      	bgt.n	800af48 <__kernel_rem_pio2+0xd8>
 800aee8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800aeec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800aef0:	462f      	mov	r7, r5
 800aef2:	2600      	movs	r6, #0
 800aef4:	e01b      	b.n	800af2e <__kernel_rem_pio2+0xbe>
 800aef6:	42ef      	cmn	r7, r5
 800aef8:	d407      	bmi.n	800af0a <__kernel_rem_pio2+0x9a>
 800aefa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aefe:	f7f5 fb11 	bl	8000524 <__aeabi_i2d>
 800af02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af06:	3501      	adds	r5, #1
 800af08:	e7df      	b.n	800aeca <__kernel_rem_pio2+0x5a>
 800af0a:	ec51 0b18 	vmov	r0, r1, d8
 800af0e:	e7f8      	b.n	800af02 <__kernel_rem_pio2+0x92>
 800af10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af18:	f7f5 fb6e 	bl	80005f8 <__aeabi_dmul>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af24:	f7f5 f9b2 	bl	800028c <__adddf3>
 800af28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af2c:	3601      	adds	r6, #1
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	429e      	cmp	r6, r3
 800af32:	f1a7 0708 	sub.w	r7, r7, #8
 800af36:	ddeb      	ble.n	800af10 <__kernel_rem_pio2+0xa0>
 800af38:	ed9d 7b04 	vldr	d7, [sp, #16]
 800af3c:	f108 0801 	add.w	r8, r8, #1
 800af40:	ecab 7b02 	vstmia	fp!, {d7}
 800af44:	3508      	adds	r5, #8
 800af46:	e7cc      	b.n	800aee2 <__kernel_rem_pio2+0x72>
 800af48:	9b02      	ldr	r3, [sp, #8]
 800af4a:	aa0e      	add	r2, sp, #56	; 0x38
 800af4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af50:	930d      	str	r3, [sp, #52]	; 0x34
 800af52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800af54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af58:	9c02      	ldr	r4, [sp, #8]
 800af5a:	930c      	str	r3, [sp, #48]	; 0x30
 800af5c:	00e3      	lsls	r3, r4, #3
 800af5e:	930a      	str	r3, [sp, #40]	; 0x28
 800af60:	ab9a      	add	r3, sp, #616	; 0x268
 800af62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800af6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800af6e:	ab72      	add	r3, sp, #456	; 0x1c8
 800af70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800af74:	46c3      	mov	fp, r8
 800af76:	46a1      	mov	r9, r4
 800af78:	f1b9 0f00 	cmp.w	r9, #0
 800af7c:	f1a5 0508 	sub.w	r5, r5, #8
 800af80:	dc77      	bgt.n	800b072 <__kernel_rem_pio2+0x202>
 800af82:	ec47 6b10 	vmov	d0, r6, r7
 800af86:	4650      	mov	r0, sl
 800af88:	f000 fe0e 	bl	800bba8 <scalbn>
 800af8c:	ec57 6b10 	vmov	r6, r7, d0
 800af90:	2200      	movs	r2, #0
 800af92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af96:	ee10 0a10 	vmov	r0, s0
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fb2c 	bl	80005f8 <__aeabi_dmul>
 800afa0:	ec41 0b10 	vmov	d0, r0, r1
 800afa4:	f000 fd80 	bl	800baa8 <floor>
 800afa8:	4b7c      	ldr	r3, [pc, #496]	; (800b19c <__kernel_rem_pio2+0x32c>)
 800afaa:	ec51 0b10 	vmov	r0, r1, d0
 800afae:	2200      	movs	r2, #0
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4630      	mov	r0, r6
 800afba:	4639      	mov	r1, r7
 800afbc:	f7f5 f964 	bl	8000288 <__aeabi_dsub>
 800afc0:	460f      	mov	r7, r1
 800afc2:	4606      	mov	r6, r0
 800afc4:	f7f5 fdc8 	bl	8000b58 <__aeabi_d2iz>
 800afc8:	9004      	str	r0, [sp, #16]
 800afca:	f7f5 faab 	bl	8000524 <__aeabi_i2d>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4630      	mov	r0, r6
 800afd4:	4639      	mov	r1, r7
 800afd6:	f7f5 f957 	bl	8000288 <__aeabi_dsub>
 800afda:	f1ba 0f00 	cmp.w	sl, #0
 800afde:	4606      	mov	r6, r0
 800afe0:	460f      	mov	r7, r1
 800afe2:	dd6d      	ble.n	800b0c0 <__kernel_rem_pio2+0x250>
 800afe4:	1e62      	subs	r2, r4, #1
 800afe6:	ab0e      	add	r3, sp, #56	; 0x38
 800afe8:	9d04      	ldr	r5, [sp, #16]
 800afea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afee:	f1ca 0118 	rsb	r1, sl, #24
 800aff2:	fa40 f301 	asr.w	r3, r0, r1
 800aff6:	441d      	add	r5, r3
 800aff8:	408b      	lsls	r3, r1
 800affa:	1ac0      	subs	r0, r0, r3
 800affc:	ab0e      	add	r3, sp, #56	; 0x38
 800affe:	9504      	str	r5, [sp, #16]
 800b000:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b004:	f1ca 0317 	rsb	r3, sl, #23
 800b008:	fa40 fb03 	asr.w	fp, r0, r3
 800b00c:	f1bb 0f00 	cmp.w	fp, #0
 800b010:	dd65      	ble.n	800b0de <__kernel_rem_pio2+0x26e>
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	2200      	movs	r2, #0
 800b016:	3301      	adds	r3, #1
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	4615      	mov	r5, r2
 800b01c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b020:	4294      	cmp	r4, r2
 800b022:	f300 809c 	bgt.w	800b15e <__kernel_rem_pio2+0x2ee>
 800b026:	f1ba 0f00 	cmp.w	sl, #0
 800b02a:	dd07      	ble.n	800b03c <__kernel_rem_pio2+0x1cc>
 800b02c:	f1ba 0f01 	cmp.w	sl, #1
 800b030:	f000 80c0 	beq.w	800b1b4 <__kernel_rem_pio2+0x344>
 800b034:	f1ba 0f02 	cmp.w	sl, #2
 800b038:	f000 80c6 	beq.w	800b1c8 <__kernel_rem_pio2+0x358>
 800b03c:	f1bb 0f02 	cmp.w	fp, #2
 800b040:	d14d      	bne.n	800b0de <__kernel_rem_pio2+0x26e>
 800b042:	4632      	mov	r2, r6
 800b044:	463b      	mov	r3, r7
 800b046:	4956      	ldr	r1, [pc, #344]	; (800b1a0 <__kernel_rem_pio2+0x330>)
 800b048:	2000      	movs	r0, #0
 800b04a:	f7f5 f91d 	bl	8000288 <__aeabi_dsub>
 800b04e:	4606      	mov	r6, r0
 800b050:	460f      	mov	r7, r1
 800b052:	2d00      	cmp	r5, #0
 800b054:	d043      	beq.n	800b0de <__kernel_rem_pio2+0x26e>
 800b056:	4650      	mov	r0, sl
 800b058:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b190 <__kernel_rem_pio2+0x320>
 800b05c:	f000 fda4 	bl	800bba8 <scalbn>
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	ec53 2b10 	vmov	r2, r3, d0
 800b068:	f7f5 f90e 	bl	8000288 <__aeabi_dsub>
 800b06c:	4606      	mov	r6, r0
 800b06e:	460f      	mov	r7, r1
 800b070:	e035      	b.n	800b0de <__kernel_rem_pio2+0x26e>
 800b072:	4b4c      	ldr	r3, [pc, #304]	; (800b1a4 <__kernel_rem_pio2+0x334>)
 800b074:	2200      	movs	r2, #0
 800b076:	4630      	mov	r0, r6
 800b078:	4639      	mov	r1, r7
 800b07a:	f7f5 fabd 	bl	80005f8 <__aeabi_dmul>
 800b07e:	f7f5 fd6b 	bl	8000b58 <__aeabi_d2iz>
 800b082:	f7f5 fa4f 	bl	8000524 <__aeabi_i2d>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	ec43 2b18 	vmov	d8, r2, r3
 800b08e:	4b46      	ldr	r3, [pc, #280]	; (800b1a8 <__kernel_rem_pio2+0x338>)
 800b090:	2200      	movs	r2, #0
 800b092:	f7f5 fab1 	bl	80005f8 <__aeabi_dmul>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4630      	mov	r0, r6
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 f8f3 	bl	8000288 <__aeabi_dsub>
 800b0a2:	f7f5 fd59 	bl	8000b58 <__aeabi_d2iz>
 800b0a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0aa:	f84b 0b04 	str.w	r0, [fp], #4
 800b0ae:	ec51 0b18 	vmov	r0, r1, d8
 800b0b2:	f7f5 f8eb 	bl	800028c <__adddf3>
 800b0b6:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460f      	mov	r7, r1
 800b0be:	e75b      	b.n	800af78 <__kernel_rem_pio2+0x108>
 800b0c0:	d106      	bne.n	800b0d0 <__kernel_rem_pio2+0x260>
 800b0c2:	1e63      	subs	r3, r4, #1
 800b0c4:	aa0e      	add	r2, sp, #56	; 0x38
 800b0c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b0ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b0ce:	e79d      	b.n	800b00c <__kernel_rem_pio2+0x19c>
 800b0d0:	4b36      	ldr	r3, [pc, #216]	; (800b1ac <__kernel_rem_pio2+0x33c>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f7f5 fd16 	bl	8000b04 <__aeabi_dcmpge>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d13d      	bne.n	800b158 <__kernel_rem_pio2+0x2e8>
 800b0dc:	4683      	mov	fp, r0
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	f000 80c0 	beq.w	800b270 <__kernel_rem_pio2+0x400>
 800b0f0:	1e65      	subs	r5, r4, #1
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	9902      	ldr	r1, [sp, #8]
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	da6c      	bge.n	800b1d6 <__kernel_rem_pio2+0x366>
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	f000 8089 	beq.w	800b214 <__kernel_rem_pio2+0x3a4>
 800b102:	ab0e      	add	r3, sp, #56	; 0x38
 800b104:	f1aa 0a18 	sub.w	sl, sl, #24
 800b108:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 80ad 	beq.w	800b26c <__kernel_rem_pio2+0x3fc>
 800b112:	4650      	mov	r0, sl
 800b114:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b190 <__kernel_rem_pio2+0x320>
 800b118:	f000 fd46 	bl	800bba8 <scalbn>
 800b11c:	ab9a      	add	r3, sp, #616	; 0x268
 800b11e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b122:	ec57 6b10 	vmov	r6, r7, d0
 800b126:	00ec      	lsls	r4, r5, #3
 800b128:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b12c:	46aa      	mov	sl, r5
 800b12e:	f1ba 0f00 	cmp.w	sl, #0
 800b132:	f280 80d6 	bge.w	800b2e2 <__kernel_rem_pio2+0x472>
 800b136:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b188 <__kernel_rem_pio2+0x318>
 800b13a:	462e      	mov	r6, r5
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	f2c0 8104 	blt.w	800b34a <__kernel_rem_pio2+0x4da>
 800b142:	ab72      	add	r3, sp, #456	; 0x1c8
 800b144:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b148:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b1b0 <__kernel_rem_pio2+0x340>
 800b14c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b150:	f04f 0800 	mov.w	r8, #0
 800b154:	1baf      	subs	r7, r5, r6
 800b156:	e0ea      	b.n	800b32e <__kernel_rem_pio2+0x4be>
 800b158:	f04f 0b02 	mov.w	fp, #2
 800b15c:	e759      	b.n	800b012 <__kernel_rem_pio2+0x1a2>
 800b15e:	f8d8 3000 	ldr.w	r3, [r8]
 800b162:	b955      	cbnz	r5, 800b17a <__kernel_rem_pio2+0x30a>
 800b164:	b123      	cbz	r3, 800b170 <__kernel_rem_pio2+0x300>
 800b166:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b16a:	f8c8 3000 	str.w	r3, [r8]
 800b16e:	2301      	movs	r3, #1
 800b170:	3201      	adds	r2, #1
 800b172:	f108 0804 	add.w	r8, r8, #4
 800b176:	461d      	mov	r5, r3
 800b178:	e752      	b.n	800b020 <__kernel_rem_pio2+0x1b0>
 800b17a:	1acb      	subs	r3, r1, r3
 800b17c:	f8c8 3000 	str.w	r3, [r8]
 800b180:	462b      	mov	r3, r5
 800b182:	e7f5      	b.n	800b170 <__kernel_rem_pio2+0x300>
 800b184:	f3af 8000 	nop.w
	...
 800b194:	3ff00000 	.word	0x3ff00000
 800b198:	0800c2d0 	.word	0x0800c2d0
 800b19c:	40200000 	.word	0x40200000
 800b1a0:	3ff00000 	.word	0x3ff00000
 800b1a4:	3e700000 	.word	0x3e700000
 800b1a8:	41700000 	.word	0x41700000
 800b1ac:	3fe00000 	.word	0x3fe00000
 800b1b0:	0800c290 	.word	0x0800c290
 800b1b4:	1e62      	subs	r2, r4, #1
 800b1b6:	ab0e      	add	r3, sp, #56	; 0x38
 800b1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1c0:	a90e      	add	r1, sp, #56	; 0x38
 800b1c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b1c6:	e739      	b.n	800b03c <__kernel_rem_pio2+0x1cc>
 800b1c8:	1e62      	subs	r2, r4, #1
 800b1ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1d4:	e7f4      	b.n	800b1c0 <__kernel_rem_pio2+0x350>
 800b1d6:	a90e      	add	r1, sp, #56	; 0x38
 800b1d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	430a      	orrs	r2, r1
 800b1e0:	e789      	b.n	800b0f6 <__kernel_rem_pio2+0x286>
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b1e8:	2900      	cmp	r1, #0
 800b1ea:	d0fa      	beq.n	800b1e2 <__kernel_rem_pio2+0x372>
 800b1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b1f2:	446a      	add	r2, sp
 800b1f4:	3a98      	subs	r2, #152	; 0x98
 800b1f6:	920a      	str	r2, [sp, #40]	; 0x28
 800b1f8:	9a08      	ldr	r2, [sp, #32]
 800b1fa:	18e3      	adds	r3, r4, r3
 800b1fc:	18a5      	adds	r5, r4, r2
 800b1fe:	aa22      	add	r2, sp, #136	; 0x88
 800b200:	f104 0801 	add.w	r8, r4, #1
 800b204:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	9b04      	ldr	r3, [sp, #16]
 800b20c:	4543      	cmp	r3, r8
 800b20e:	da04      	bge.n	800b21a <__kernel_rem_pio2+0x3aa>
 800b210:	461c      	mov	r4, r3
 800b212:	e6a3      	b.n	800af5c <__kernel_rem_pio2+0xec>
 800b214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b216:	2301      	movs	r3, #1
 800b218:	e7e4      	b.n	800b1e4 <__kernel_rem_pio2+0x374>
 800b21a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b21c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b220:	f7f5 f980 	bl	8000524 <__aeabi_i2d>
 800b224:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b22a:	46ab      	mov	fp, r5
 800b22c:	461c      	mov	r4, r3
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	2600      	movs	r6, #0
 800b234:	2700      	movs	r7, #0
 800b236:	9b06      	ldr	r3, [sp, #24]
 800b238:	4599      	cmp	r9, r3
 800b23a:	dd06      	ble.n	800b24a <__kernel_rem_pio2+0x3da>
 800b23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b242:	f108 0801 	add.w	r8, r8, #1
 800b246:	930a      	str	r3, [sp, #40]	; 0x28
 800b248:	e7df      	b.n	800b20a <__kernel_rem_pio2+0x39a>
 800b24a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b24e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b252:	f7f5 f9d1 	bl	80005f8 <__aeabi_dmul>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	4630      	mov	r0, r6
 800b25c:	4639      	mov	r1, r7
 800b25e:	f7f5 f815 	bl	800028c <__adddf3>
 800b262:	f109 0901 	add.w	r9, r9, #1
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	e7e4      	b.n	800b236 <__kernel_rem_pio2+0x3c6>
 800b26c:	3d01      	subs	r5, #1
 800b26e:	e748      	b.n	800b102 <__kernel_rem_pio2+0x292>
 800b270:	ec47 6b10 	vmov	d0, r6, r7
 800b274:	f1ca 0000 	rsb	r0, sl, #0
 800b278:	f000 fc96 	bl	800bba8 <scalbn>
 800b27c:	ec57 6b10 	vmov	r6, r7, d0
 800b280:	4ba0      	ldr	r3, [pc, #640]	; (800b504 <__kernel_rem_pio2+0x694>)
 800b282:	ee10 0a10 	vmov	r0, s0
 800b286:	2200      	movs	r2, #0
 800b288:	4639      	mov	r1, r7
 800b28a:	f7f5 fc3b 	bl	8000b04 <__aeabi_dcmpge>
 800b28e:	b1f8      	cbz	r0, 800b2d0 <__kernel_rem_pio2+0x460>
 800b290:	4b9d      	ldr	r3, [pc, #628]	; (800b508 <__kernel_rem_pio2+0x698>)
 800b292:	2200      	movs	r2, #0
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f5 f9ae 	bl	80005f8 <__aeabi_dmul>
 800b29c:	f7f5 fc5c 	bl	8000b58 <__aeabi_d2iz>
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	f7f5 f93f 	bl	8000524 <__aeabi_i2d>
 800b2a6:	4b97      	ldr	r3, [pc, #604]	; (800b504 <__kernel_rem_pio2+0x694>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f7f5 f9a5 	bl	80005f8 <__aeabi_dmul>
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7f4 ffe7 	bl	8000288 <__aeabi_dsub>
 800b2ba:	f7f5 fc4d 	bl	8000b58 <__aeabi_d2iz>
 800b2be:	1c65      	adds	r5, r4, #1
 800b2c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b2c2:	f10a 0a18 	add.w	sl, sl, #24
 800b2c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b2ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b2ce:	e720      	b.n	800b112 <__kernel_rem_pio2+0x2a2>
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f5 fc40 	bl	8000b58 <__aeabi_d2iz>
 800b2d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b2da:	4625      	mov	r5, r4
 800b2dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b2e0:	e717      	b.n	800b112 <__kernel_rem_pio2+0x2a2>
 800b2e2:	ab0e      	add	r3, sp, #56	; 0x38
 800b2e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b2e8:	f7f5 f91c 	bl	8000524 <__aeabi_i2d>
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	463b      	mov	r3, r7
 800b2f0:	f7f5 f982 	bl	80005f8 <__aeabi_dmul>
 800b2f4:	4b84      	ldr	r3, [pc, #528]	; (800b508 <__kernel_rem_pio2+0x698>)
 800b2f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f5 f97a 	bl	80005f8 <__aeabi_dmul>
 800b304:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	e70f      	b.n	800b12e <__kernel_rem_pio2+0x2be>
 800b30e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b312:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b316:	f7f5 f96f 	bl	80005f8 <__aeabi_dmul>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b322:	f7f4 ffb3 	bl	800028c <__adddf3>
 800b326:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b32a:	f108 0801 	add.w	r8, r8, #1
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	4598      	cmp	r8, r3
 800b332:	dc01      	bgt.n	800b338 <__kernel_rem_pio2+0x4c8>
 800b334:	45b8      	cmp	r8, r7
 800b336:	ddea      	ble.n	800b30e <__kernel_rem_pio2+0x49e>
 800b338:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b33c:	ab4a      	add	r3, sp, #296	; 0x128
 800b33e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b342:	ed87 7b00 	vstr	d7, [r7]
 800b346:	3e01      	subs	r6, #1
 800b348:	e6f8      	b.n	800b13c <__kernel_rem_pio2+0x2cc>
 800b34a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	dc0b      	bgt.n	800b368 <__kernel_rem_pio2+0x4f8>
 800b350:	2b00      	cmp	r3, #0
 800b352:	dc35      	bgt.n	800b3c0 <__kernel_rem_pio2+0x550>
 800b354:	d059      	beq.n	800b40a <__kernel_rem_pio2+0x59a>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	f003 0007 	and.w	r0, r3, #7
 800b35c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b360:	ecbd 8b02 	vpop	{d8}
 800b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b368:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b36a:	2b03      	cmp	r3, #3
 800b36c:	d1f3      	bne.n	800b356 <__kernel_rem_pio2+0x4e6>
 800b36e:	ab4a      	add	r3, sp, #296	; 0x128
 800b370:	4423      	add	r3, r4
 800b372:	9306      	str	r3, [sp, #24]
 800b374:	461c      	mov	r4, r3
 800b376:	469a      	mov	sl, r3
 800b378:	9502      	str	r5, [sp, #8]
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b382:	dc6b      	bgt.n	800b45c <__kernel_rem_pio2+0x5ec>
 800b384:	46aa      	mov	sl, r5
 800b386:	f1ba 0f01 	cmp.w	sl, #1
 800b38a:	f1a4 0408 	sub.w	r4, r4, #8
 800b38e:	f300 8085 	bgt.w	800b49c <__kernel_rem_pio2+0x62c>
 800b392:	9c06      	ldr	r4, [sp, #24]
 800b394:	2000      	movs	r0, #0
 800b396:	3408      	adds	r4, #8
 800b398:	2100      	movs	r1, #0
 800b39a:	2d01      	cmp	r5, #1
 800b39c:	f300 809d 	bgt.w	800b4da <__kernel_rem_pio2+0x66a>
 800b3a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b3a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b3a8:	f1bb 0f00 	cmp.w	fp, #0
 800b3ac:	f040 809b 	bne.w	800b4e6 <__kernel_rem_pio2+0x676>
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	e9c3 5600 	strd	r5, r6, [r3]
 800b3b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b3ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3be:	e7ca      	b.n	800b356 <__kernel_rem_pio2+0x4e6>
 800b3c0:	3408      	adds	r4, #8
 800b3c2:	ab4a      	add	r3, sp, #296	; 0x128
 800b3c4:	441c      	add	r4, r3
 800b3c6:	462e      	mov	r6, r5
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	da36      	bge.n	800b43e <__kernel_rem_pio2+0x5ce>
 800b3d0:	f1bb 0f00 	cmp.w	fp, #0
 800b3d4:	d039      	beq.n	800b44a <__kernel_rem_pio2+0x5da>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3dc:	9c01      	ldr	r4, [sp, #4]
 800b3de:	e9c4 2300 	strd	r2, r3, [r4]
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b3ea:	f7f4 ff4d 	bl	8000288 <__aeabi_dsub>
 800b3ee:	ae4c      	add	r6, sp, #304	; 0x130
 800b3f0:	2401      	movs	r4, #1
 800b3f2:	42a5      	cmp	r5, r4
 800b3f4:	da2c      	bge.n	800b450 <__kernel_rem_pio2+0x5e0>
 800b3f6:	f1bb 0f00 	cmp.w	fp, #0
 800b3fa:	d002      	beq.n	800b402 <__kernel_rem_pio2+0x592>
 800b3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b400:	4619      	mov	r1, r3
 800b402:	9b01      	ldr	r3, [sp, #4]
 800b404:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b408:	e7a5      	b.n	800b356 <__kernel_rem_pio2+0x4e6>
 800b40a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b40e:	eb0d 0403 	add.w	r4, sp, r3
 800b412:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b416:	2000      	movs	r0, #0
 800b418:	2100      	movs	r1, #0
 800b41a:	2d00      	cmp	r5, #0
 800b41c:	da09      	bge.n	800b432 <__kernel_rem_pio2+0x5c2>
 800b41e:	f1bb 0f00 	cmp.w	fp, #0
 800b422:	d002      	beq.n	800b42a <__kernel_rem_pio2+0x5ba>
 800b424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b428:	4619      	mov	r1, r3
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	e9c3 0100 	strd	r0, r1, [r3]
 800b430:	e791      	b.n	800b356 <__kernel_rem_pio2+0x4e6>
 800b432:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b436:	f7f4 ff29 	bl	800028c <__adddf3>
 800b43a:	3d01      	subs	r5, #1
 800b43c:	e7ed      	b.n	800b41a <__kernel_rem_pio2+0x5aa>
 800b43e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b442:	f7f4 ff23 	bl	800028c <__adddf3>
 800b446:	3e01      	subs	r6, #1
 800b448:	e7c0      	b.n	800b3cc <__kernel_rem_pio2+0x55c>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	e7c5      	b.n	800b3dc <__kernel_rem_pio2+0x56c>
 800b450:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b454:	f7f4 ff1a 	bl	800028c <__adddf3>
 800b458:	3401      	adds	r4, #1
 800b45a:	e7ca      	b.n	800b3f2 <__kernel_rem_pio2+0x582>
 800b45c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b460:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b464:	9b02      	ldr	r3, [sp, #8]
 800b466:	3b01      	subs	r3, #1
 800b468:	9302      	str	r3, [sp, #8]
 800b46a:	4632      	mov	r2, r6
 800b46c:	463b      	mov	r3, r7
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f4 ff0b 	bl	800028c <__adddf3>
 800b476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4640      	mov	r0, r8
 800b480:	4649      	mov	r1, r9
 800b482:	f7f4 ff01 	bl	8000288 <__aeabi_dsub>
 800b486:	4632      	mov	r2, r6
 800b488:	463b      	mov	r3, r7
 800b48a:	f7f4 feff 	bl	800028c <__adddf3>
 800b48e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b492:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b496:	ed8a 7b00 	vstr	d7, [sl]
 800b49a:	e76e      	b.n	800b37a <__kernel_rem_pio2+0x50a>
 800b49c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b4a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	4632      	mov	r2, r6
 800b4a8:	463b      	mov	r3, r7
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	f7f4 feee 	bl	800028c <__adddf3>
 800b4b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	f7f4 fee4 	bl	8000288 <__aeabi_dsub>
 800b4c0:	4632      	mov	r2, r6
 800b4c2:	463b      	mov	r3, r7
 800b4c4:	f7f4 fee2 	bl	800028c <__adddf3>
 800b4c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4d0:	ed84 7b00 	vstr	d7, [r4]
 800b4d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4d8:	e755      	b.n	800b386 <__kernel_rem_pio2+0x516>
 800b4da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4de:	f7f4 fed5 	bl	800028c <__adddf3>
 800b4e2:	3d01      	subs	r5, #1
 800b4e4:	e759      	b.n	800b39a <__kernel_rem_pio2+0x52a>
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	9a01      	ldr	r2, [sp, #4]
 800b4ea:	601d      	str	r5, [r3, #0]
 800b4ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b4f0:	605c      	str	r4, [r3, #4]
 800b4f2:	609f      	str	r7, [r3, #8]
 800b4f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b4f8:	60d3      	str	r3, [r2, #12]
 800b4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4fe:	6110      	str	r0, [r2, #16]
 800b500:	6153      	str	r3, [r2, #20]
 800b502:	e728      	b.n	800b356 <__kernel_rem_pio2+0x4e6>
 800b504:	41700000 	.word	0x41700000
 800b508:	3e700000 	.word	0x3e700000
 800b50c:	00000000 	.word	0x00000000

0800b510 <__kernel_sin>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	ed2d 8b04 	vpush	{d8-d9}
 800b518:	eeb0 8a41 	vmov.f32	s16, s2
 800b51c:	eef0 8a61 	vmov.f32	s17, s3
 800b520:	ec55 4b10 	vmov	r4, r5, d0
 800b524:	b083      	sub	sp, #12
 800b526:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b52a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b52e:	9001      	str	r0, [sp, #4]
 800b530:	da06      	bge.n	800b540 <__kernel_sin+0x30>
 800b532:	ee10 0a10 	vmov	r0, s0
 800b536:	4629      	mov	r1, r5
 800b538:	f7f5 fb0e 	bl	8000b58 <__aeabi_d2iz>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d051      	beq.n	800b5e4 <__kernel_sin+0xd4>
 800b540:	4622      	mov	r2, r4
 800b542:	462b      	mov	r3, r5
 800b544:	4620      	mov	r0, r4
 800b546:	4629      	mov	r1, r5
 800b548:	f7f5 f856 	bl	80005f8 <__aeabi_dmul>
 800b54c:	4682      	mov	sl, r0
 800b54e:	468b      	mov	fp, r1
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4620      	mov	r0, r4
 800b556:	4629      	mov	r1, r5
 800b558:	f7f5 f84e 	bl	80005f8 <__aeabi_dmul>
 800b55c:	a341      	add	r3, pc, #260	; (adr r3, 800b664 <__kernel_sin+0x154>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	4680      	mov	r8, r0
 800b564:	4689      	mov	r9, r1
 800b566:	4650      	mov	r0, sl
 800b568:	4659      	mov	r1, fp
 800b56a:	f7f5 f845 	bl	80005f8 <__aeabi_dmul>
 800b56e:	a33f      	add	r3, pc, #252	; (adr r3, 800b66c <__kernel_sin+0x15c>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f7f4 fe88 	bl	8000288 <__aeabi_dsub>
 800b578:	4652      	mov	r2, sl
 800b57a:	465b      	mov	r3, fp
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	a33c      	add	r3, pc, #240	; (adr r3, 800b674 <__kernel_sin+0x164>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f4 fe81 	bl	800028c <__adddf3>
 800b58a:	4652      	mov	r2, sl
 800b58c:	465b      	mov	r3, fp
 800b58e:	f7f5 f833 	bl	80005f8 <__aeabi_dmul>
 800b592:	a33a      	add	r3, pc, #232	; (adr r3, 800b67c <__kernel_sin+0x16c>)
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f7f4 fe76 	bl	8000288 <__aeabi_dsub>
 800b59c:	4652      	mov	r2, sl
 800b59e:	465b      	mov	r3, fp
 800b5a0:	f7f5 f82a 	bl	80005f8 <__aeabi_dmul>
 800b5a4:	a337      	add	r3, pc, #220	; (adr r3, 800b684 <__kernel_sin+0x174>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f7f4 fe6f 	bl	800028c <__adddf3>
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	460f      	mov	r7, r1
 800b5b4:	b9eb      	cbnz	r3, 800b5f2 <__kernel_sin+0xe2>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	4659      	mov	r1, fp
 800b5be:	f7f5 f81b 	bl	80005f8 <__aeabi_dmul>
 800b5c2:	a325      	add	r3, pc, #148	; (adr r3, 800b658 <__kernel_sin+0x148>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	f7f4 fe5e 	bl	8000288 <__aeabi_dsub>
 800b5cc:	4642      	mov	r2, r8
 800b5ce:	464b      	mov	r3, r9
 800b5d0:	f7f5 f812 	bl	80005f8 <__aeabi_dmul>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4620      	mov	r0, r4
 800b5da:	4629      	mov	r1, r5
 800b5dc:	f7f4 fe56 	bl	800028c <__adddf3>
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	460d      	mov	r5, r1
 800b5e4:	ec45 4b10 	vmov	d0, r4, r5
 800b5e8:	b003      	add	sp, #12
 800b5ea:	ecbd 8b04 	vpop	{d8-d9}
 800b5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <__kernel_sin+0x150>)
 800b5f4:	ec51 0b18 	vmov	r0, r1, d8
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f7f4 fffd 	bl	80005f8 <__aeabi_dmul>
 800b5fe:	4632      	mov	r2, r6
 800b600:	ec41 0b19 	vmov	d9, r0, r1
 800b604:	463b      	mov	r3, r7
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f4 fff5 	bl	80005f8 <__aeabi_dmul>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	ec51 0b19 	vmov	r0, r1, d9
 800b616:	f7f4 fe37 	bl	8000288 <__aeabi_dsub>
 800b61a:	4652      	mov	r2, sl
 800b61c:	465b      	mov	r3, fp
 800b61e:	f7f4 ffeb 	bl	80005f8 <__aeabi_dmul>
 800b622:	ec53 2b18 	vmov	r2, r3, d8
 800b626:	f7f4 fe2f 	bl	8000288 <__aeabi_dsub>
 800b62a:	a30b      	add	r3, pc, #44	; (adr r3, 800b658 <__kernel_sin+0x148>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	4606      	mov	r6, r0
 800b632:	460f      	mov	r7, r1
 800b634:	4640      	mov	r0, r8
 800b636:	4649      	mov	r1, r9
 800b638:	f7f4 ffde 	bl	80005f8 <__aeabi_dmul>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4630      	mov	r0, r6
 800b642:	4639      	mov	r1, r7
 800b644:	f7f4 fe22 	bl	800028c <__adddf3>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4620      	mov	r0, r4
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f4 fe1a 	bl	8000288 <__aeabi_dsub>
 800b654:	e7c4      	b.n	800b5e0 <__kernel_sin+0xd0>
 800b656:	bf00      	nop
 800b658:	55555549 	.word	0x55555549
 800b65c:	3fc55555 	.word	0x3fc55555
 800b660:	3fe00000 	.word	0x3fe00000
 800b664:	5acfd57c 	.word	0x5acfd57c
 800b668:	3de5d93a 	.word	0x3de5d93a
 800b66c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b670:	3e5ae5e6 	.word	0x3e5ae5e6
 800b674:	57b1fe7d 	.word	0x57b1fe7d
 800b678:	3ec71de3 	.word	0x3ec71de3
 800b67c:	19c161d5 	.word	0x19c161d5
 800b680:	3f2a01a0 	.word	0x3f2a01a0
 800b684:	1110f8a6 	.word	0x1110f8a6
 800b688:	3f811111 	.word	0x3f811111
 800b68c:	00000000 	.word	0x00000000

0800b690 <__kernel_tan>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	ed2d 8b06 	vpush	{d8-d10}
 800b698:	ec5b ab10 	vmov	sl, fp, d0
 800b69c:	4be0      	ldr	r3, [pc, #896]	; (800ba20 <__kernel_tan+0x390>)
 800b69e:	b083      	sub	sp, #12
 800b6a0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b6a4:	429f      	cmp	r7, r3
 800b6a6:	ec59 8b11 	vmov	r8, r9, d1
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	f8cd b000 	str.w	fp, [sp]
 800b6b0:	dc61      	bgt.n	800b776 <__kernel_tan+0xe6>
 800b6b2:	ee10 0a10 	vmov	r0, s0
 800b6b6:	4659      	mov	r1, fp
 800b6b8:	f7f5 fa4e 	bl	8000b58 <__aeabi_d2iz>
 800b6bc:	4605      	mov	r5, r0
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f040 8083 	bne.w	800b7ca <__kernel_tan+0x13a>
 800b6c4:	1c73      	adds	r3, r6, #1
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	433b      	orrs	r3, r7
 800b6cc:	d112      	bne.n	800b6f4 <__kernel_tan+0x64>
 800b6ce:	ec4b ab10 	vmov	d0, sl, fp
 800b6d2:	f7fe ff81 	bl	800a5d8 <fabs>
 800b6d6:	49d3      	ldr	r1, [pc, #844]	; (800ba24 <__kernel_tan+0x394>)
 800b6d8:	ec53 2b10 	vmov	r2, r3, d0
 800b6dc:	2000      	movs	r0, #0
 800b6de:	f7f5 f8b5 	bl	800084c <__aeabi_ddiv>
 800b6e2:	4682      	mov	sl, r0
 800b6e4:	468b      	mov	fp, r1
 800b6e6:	ec4b ab10 	vmov	d0, sl, fp
 800b6ea:	b003      	add	sp, #12
 800b6ec:	ecbd 8b06 	vpop	{d8-d10}
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	2e01      	cmp	r6, #1
 800b6f6:	d0f6      	beq.n	800b6e6 <__kernel_tan+0x56>
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	f7f4 fdc4 	bl	800028c <__adddf3>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	460f      	mov	r7, r1
 800b70a:	2000      	movs	r0, #0
 800b70c:	49c6      	ldr	r1, [pc, #792]	; (800ba28 <__kernel_tan+0x398>)
 800b70e:	f7f5 f89d 	bl	800084c <__aeabi_ddiv>
 800b712:	e9cd 0100 	strd	r0, r1, [sp]
 800b716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b71a:	462e      	mov	r6, r5
 800b71c:	4652      	mov	r2, sl
 800b71e:	462c      	mov	r4, r5
 800b720:	4630      	mov	r0, r6
 800b722:	461d      	mov	r5, r3
 800b724:	4639      	mov	r1, r7
 800b726:	465b      	mov	r3, fp
 800b728:	f7f4 fdae 	bl	8000288 <__aeabi_dsub>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	4640      	mov	r0, r8
 800b732:	4649      	mov	r1, r9
 800b734:	f7f4 fda8 	bl	8000288 <__aeabi_dsub>
 800b738:	4632      	mov	r2, r6
 800b73a:	462b      	mov	r3, r5
 800b73c:	f7f4 ff5c 	bl	80005f8 <__aeabi_dmul>
 800b740:	4632      	mov	r2, r6
 800b742:	4680      	mov	r8, r0
 800b744:	4689      	mov	r9, r1
 800b746:	462b      	mov	r3, r5
 800b748:	4630      	mov	r0, r6
 800b74a:	4639      	mov	r1, r7
 800b74c:	f7f4 ff54 	bl	80005f8 <__aeabi_dmul>
 800b750:	4bb4      	ldr	r3, [pc, #720]	; (800ba24 <__kernel_tan+0x394>)
 800b752:	2200      	movs	r2, #0
 800b754:	f7f4 fd9a 	bl	800028c <__adddf3>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4640      	mov	r0, r8
 800b75e:	4649      	mov	r1, r9
 800b760:	f7f4 fd94 	bl	800028c <__adddf3>
 800b764:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b768:	f7f4 ff46 	bl	80005f8 <__aeabi_dmul>
 800b76c:	4622      	mov	r2, r4
 800b76e:	462b      	mov	r3, r5
 800b770:	f7f4 fd8c 	bl	800028c <__adddf3>
 800b774:	e7b5      	b.n	800b6e2 <__kernel_tan+0x52>
 800b776:	4bad      	ldr	r3, [pc, #692]	; (800ba2c <__kernel_tan+0x39c>)
 800b778:	429f      	cmp	r7, r3
 800b77a:	dd26      	ble.n	800b7ca <__kernel_tan+0x13a>
 800b77c:	9b00      	ldr	r3, [sp, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	da09      	bge.n	800b796 <__kernel_tan+0x106>
 800b782:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b786:	469b      	mov	fp, r3
 800b788:	ee10 aa10 	vmov	sl, s0
 800b78c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b790:	ee11 8a10 	vmov	r8, s2
 800b794:	4699      	mov	r9, r3
 800b796:	4652      	mov	r2, sl
 800b798:	465b      	mov	r3, fp
 800b79a:	a183      	add	r1, pc, #524	; (adr r1, 800b9a8 <__kernel_tan+0x318>)
 800b79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a0:	f7f4 fd72 	bl	8000288 <__aeabi_dsub>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	a180      	add	r1, pc, #512	; (adr r1, 800b9b0 <__kernel_tan+0x320>)
 800b7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7b2:	f7f4 fd69 	bl	8000288 <__aeabi_dsub>
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	462b      	mov	r3, r5
 800b7ba:	f7f4 fd67 	bl	800028c <__adddf3>
 800b7be:	f04f 0800 	mov.w	r8, #0
 800b7c2:	4682      	mov	sl, r0
 800b7c4:	468b      	mov	fp, r1
 800b7c6:	f04f 0900 	mov.w	r9, #0
 800b7ca:	4652      	mov	r2, sl
 800b7cc:	465b      	mov	r3, fp
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	4659      	mov	r1, fp
 800b7d2:	f7f4 ff11 	bl	80005f8 <__aeabi_dmul>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	ec43 2b18 	vmov	d8, r2, r3
 800b7de:	f7f4 ff0b 	bl	80005f8 <__aeabi_dmul>
 800b7e2:	ec53 2b18 	vmov	r2, r3, d8
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	a371      	add	r3, pc, #452	; (adr r3, 800b9b8 <__kernel_tan+0x328>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	ec41 0b19 	vmov	d9, r0, r1
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	4629      	mov	r1, r5
 800b800:	f7f4 fefa 	bl	80005f8 <__aeabi_dmul>
 800b804:	a36e      	add	r3, pc, #440	; (adr r3, 800b9c0 <__kernel_tan+0x330>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f4 fd3f 	bl	800028c <__adddf3>
 800b80e:	4622      	mov	r2, r4
 800b810:	462b      	mov	r3, r5
 800b812:	f7f4 fef1 	bl	80005f8 <__aeabi_dmul>
 800b816:	a36c      	add	r3, pc, #432	; (adr r3, 800b9c8 <__kernel_tan+0x338>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f4 fd36 	bl	800028c <__adddf3>
 800b820:	4622      	mov	r2, r4
 800b822:	462b      	mov	r3, r5
 800b824:	f7f4 fee8 	bl	80005f8 <__aeabi_dmul>
 800b828:	a369      	add	r3, pc, #420	; (adr r3, 800b9d0 <__kernel_tan+0x340>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f7f4 fd2d 	bl	800028c <__adddf3>
 800b832:	4622      	mov	r2, r4
 800b834:	462b      	mov	r3, r5
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	a367      	add	r3, pc, #412	; (adr r3, 800b9d8 <__kernel_tan+0x348>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fd24 	bl	800028c <__adddf3>
 800b844:	4622      	mov	r2, r4
 800b846:	462b      	mov	r3, r5
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	a364      	add	r3, pc, #400	; (adr r3, 800b9e0 <__kernel_tan+0x350>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7f4 fd1b 	bl	800028c <__adddf3>
 800b856:	ec53 2b18 	vmov	r2, r3, d8
 800b85a:	f7f4 fecd 	bl	80005f8 <__aeabi_dmul>
 800b85e:	a362      	add	r3, pc, #392	; (adr r3, 800b9e8 <__kernel_tan+0x358>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	ec41 0b1a 	vmov	d10, r0, r1
 800b868:	4620      	mov	r0, r4
 800b86a:	4629      	mov	r1, r5
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	a35f      	add	r3, pc, #380	; (adr r3, 800b9f0 <__kernel_tan+0x360>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fd09 	bl	800028c <__adddf3>
 800b87a:	4622      	mov	r2, r4
 800b87c:	462b      	mov	r3, r5
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	a35d      	add	r3, pc, #372	; (adr r3, 800b9f8 <__kernel_tan+0x368>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fd00 	bl	800028c <__adddf3>
 800b88c:	4622      	mov	r2, r4
 800b88e:	462b      	mov	r3, r5
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	a35a      	add	r3, pc, #360	; (adr r3, 800ba00 <__kernel_tan+0x370>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7f4 fcf7 	bl	800028c <__adddf3>
 800b89e:	4622      	mov	r2, r4
 800b8a0:	462b      	mov	r3, r5
 800b8a2:	f7f4 fea9 	bl	80005f8 <__aeabi_dmul>
 800b8a6:	a358      	add	r3, pc, #352	; (adr r3, 800ba08 <__kernel_tan+0x378>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fcee 	bl	800028c <__adddf3>
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	f7f4 fea0 	bl	80005f8 <__aeabi_dmul>
 800b8b8:	a355      	add	r3, pc, #340	; (adr r3, 800ba10 <__kernel_tan+0x380>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 fce5 	bl	800028c <__adddf3>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	ec51 0b1a 	vmov	r0, r1, d10
 800b8ca:	f7f4 fcdf 	bl	800028c <__adddf3>
 800b8ce:	ec53 2b19 	vmov	r2, r3, d9
 800b8d2:	f7f4 fe91 	bl	80005f8 <__aeabi_dmul>
 800b8d6:	4642      	mov	r2, r8
 800b8d8:	464b      	mov	r3, r9
 800b8da:	f7f4 fcd7 	bl	800028c <__adddf3>
 800b8de:	ec53 2b18 	vmov	r2, r3, d8
 800b8e2:	f7f4 fe89 	bl	80005f8 <__aeabi_dmul>
 800b8e6:	4642      	mov	r2, r8
 800b8e8:	464b      	mov	r3, r9
 800b8ea:	f7f4 fccf 	bl	800028c <__adddf3>
 800b8ee:	a34a      	add	r3, pc, #296	; (adr r3, 800ba18 <__kernel_tan+0x388>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	ec51 0b19 	vmov	r0, r1, d9
 800b8fc:	f7f4 fe7c 	bl	80005f8 <__aeabi_dmul>
 800b900:	4622      	mov	r2, r4
 800b902:	462b      	mov	r3, r5
 800b904:	f7f4 fcc2 	bl	800028c <__adddf3>
 800b908:	460b      	mov	r3, r1
 800b90a:	ec41 0b18 	vmov	d8, r0, r1
 800b90e:	4602      	mov	r2, r0
 800b910:	4659      	mov	r1, fp
 800b912:	4650      	mov	r0, sl
 800b914:	f7f4 fcba 	bl	800028c <__adddf3>
 800b918:	4b44      	ldr	r3, [pc, #272]	; (800ba2c <__kernel_tan+0x39c>)
 800b91a:	429f      	cmp	r7, r3
 800b91c:	4604      	mov	r4, r0
 800b91e:	460d      	mov	r5, r1
 800b920:	f340 8086 	ble.w	800ba30 <__kernel_tan+0x3a0>
 800b924:	4630      	mov	r0, r6
 800b926:	f7f4 fdfd 	bl	8000524 <__aeabi_i2d>
 800b92a:	4622      	mov	r2, r4
 800b92c:	4680      	mov	r8, r0
 800b92e:	4689      	mov	r9, r1
 800b930:	462b      	mov	r3, r5
 800b932:	4620      	mov	r0, r4
 800b934:	4629      	mov	r1, r5
 800b936:	f7f4 fe5f 	bl	80005f8 <__aeabi_dmul>
 800b93a:	4642      	mov	r2, r8
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
 800b940:	464b      	mov	r3, r9
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fca1 	bl	800028c <__adddf3>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	4630      	mov	r0, r6
 800b950:	4639      	mov	r1, r7
 800b952:	f7f4 ff7b 	bl	800084c <__aeabi_ddiv>
 800b956:	ec53 2b18 	vmov	r2, r3, d8
 800b95a:	f7f4 fc95 	bl	8000288 <__aeabi_dsub>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4650      	mov	r0, sl
 800b964:	4659      	mov	r1, fp
 800b966:	f7f4 fc8f 	bl	8000288 <__aeabi_dsub>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	f7f4 fc8d 	bl	800028c <__adddf3>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f4 fc85 	bl	8000288 <__aeabi_dsub>
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b984:	f00a 0a02 	and.w	sl, sl, #2
 800b988:	4604      	mov	r4, r0
 800b98a:	f1ca 0001 	rsb	r0, sl, #1
 800b98e:	460d      	mov	r5, r1
 800b990:	f7f4 fdc8 	bl	8000524 <__aeabi_i2d>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	f7f4 fe2c 	bl	80005f8 <__aeabi_dmul>
 800b9a0:	e69f      	b.n	800b6e2 <__kernel_tan+0x52>
 800b9a2:	bf00      	nop
 800b9a4:	f3af 8000 	nop.w
 800b9a8:	54442d18 	.word	0x54442d18
 800b9ac:	3fe921fb 	.word	0x3fe921fb
 800b9b0:	33145c07 	.word	0x33145c07
 800b9b4:	3c81a626 	.word	0x3c81a626
 800b9b8:	74bf7ad4 	.word	0x74bf7ad4
 800b9bc:	3efb2a70 	.word	0x3efb2a70
 800b9c0:	32f0a7e9 	.word	0x32f0a7e9
 800b9c4:	3f12b80f 	.word	0x3f12b80f
 800b9c8:	1a8d1068 	.word	0x1a8d1068
 800b9cc:	3f3026f7 	.word	0x3f3026f7
 800b9d0:	fee08315 	.word	0xfee08315
 800b9d4:	3f57dbc8 	.word	0x3f57dbc8
 800b9d8:	e96e8493 	.word	0xe96e8493
 800b9dc:	3f8226e3 	.word	0x3f8226e3
 800b9e0:	1bb341fe 	.word	0x1bb341fe
 800b9e4:	3faba1ba 	.word	0x3faba1ba
 800b9e8:	db605373 	.word	0xdb605373
 800b9ec:	bef375cb 	.word	0xbef375cb
 800b9f0:	a03792a6 	.word	0xa03792a6
 800b9f4:	3f147e88 	.word	0x3f147e88
 800b9f8:	f2f26501 	.word	0xf2f26501
 800b9fc:	3f4344d8 	.word	0x3f4344d8
 800ba00:	c9560328 	.word	0xc9560328
 800ba04:	3f6d6d22 	.word	0x3f6d6d22
 800ba08:	8406d637 	.word	0x8406d637
 800ba0c:	3f9664f4 	.word	0x3f9664f4
 800ba10:	1110fe7a 	.word	0x1110fe7a
 800ba14:	3fc11111 	.word	0x3fc11111
 800ba18:	55555563 	.word	0x55555563
 800ba1c:	3fd55555 	.word	0x3fd55555
 800ba20:	3e2fffff 	.word	0x3e2fffff
 800ba24:	3ff00000 	.word	0x3ff00000
 800ba28:	bff00000 	.word	0xbff00000
 800ba2c:	3fe59427 	.word	0x3fe59427
 800ba30:	2e01      	cmp	r6, #1
 800ba32:	d02f      	beq.n	800ba94 <__kernel_tan+0x404>
 800ba34:	460f      	mov	r7, r1
 800ba36:	4602      	mov	r2, r0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4689      	mov	r9, r1
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	4917      	ldr	r1, [pc, #92]	; (800ba9c <__kernel_tan+0x40c>)
 800ba40:	f7f4 ff04 	bl	800084c <__aeabi_ddiv>
 800ba44:	2600      	movs	r6, #0
 800ba46:	e9cd 0100 	strd	r0, r1, [sp]
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	465b      	mov	r3, fp
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f4 fc19 	bl	8000288 <__aeabi_dsub>
 800ba56:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	ec51 0b18 	vmov	r0, r1, d8
 800ba62:	f7f4 fc11 	bl	8000288 <__aeabi_dsub>
 800ba66:	4632      	mov	r2, r6
 800ba68:	462b      	mov	r3, r5
 800ba6a:	f7f4 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ba6e:	46b0      	mov	r8, r6
 800ba70:	460f      	mov	r7, r1
 800ba72:	4642      	mov	r2, r8
 800ba74:	462b      	mov	r3, r5
 800ba76:	4634      	mov	r4, r6
 800ba78:	4649      	mov	r1, r9
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	f7f4 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ba82:	4b07      	ldr	r3, [pc, #28]	; (800baa0 <__kernel_tan+0x410>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	f7f4 fc01 	bl	800028c <__adddf3>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4630      	mov	r0, r6
 800ba90:	4639      	mov	r1, r7
 800ba92:	e665      	b.n	800b760 <__kernel_tan+0xd0>
 800ba94:	4682      	mov	sl, r0
 800ba96:	468b      	mov	fp, r1
 800ba98:	e625      	b.n	800b6e6 <__kernel_tan+0x56>
 800ba9a:	bf00      	nop
 800ba9c:	bff00000 	.word	0xbff00000
 800baa0:	3ff00000 	.word	0x3ff00000
 800baa4:	00000000 	.word	0x00000000

0800baa8 <floor>:
 800baa8:	ec51 0b10 	vmov	r0, r1, d0
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bab4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bab8:	2e13      	cmp	r6, #19
 800baba:	ee10 5a10 	vmov	r5, s0
 800babe:	ee10 8a10 	vmov	r8, s0
 800bac2:	460c      	mov	r4, r1
 800bac4:	dc32      	bgt.n	800bb2c <floor+0x84>
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	da14      	bge.n	800baf4 <floor+0x4c>
 800baca:	a333      	add	r3, pc, #204	; (adr r3, 800bb98 <floor+0xf0>)
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f7f4 fbdc 	bl	800028c <__adddf3>
 800bad4:	2200      	movs	r2, #0
 800bad6:	2300      	movs	r3, #0
 800bad8:	f7f5 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 800badc:	b138      	cbz	r0, 800baee <floor+0x46>
 800bade:	2c00      	cmp	r4, #0
 800bae0:	da57      	bge.n	800bb92 <floor+0xea>
 800bae2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bae6:	431d      	orrs	r5, r3
 800bae8:	d001      	beq.n	800baee <floor+0x46>
 800baea:	4c2d      	ldr	r4, [pc, #180]	; (800bba0 <floor+0xf8>)
 800baec:	2500      	movs	r5, #0
 800baee:	4621      	mov	r1, r4
 800baf0:	4628      	mov	r0, r5
 800baf2:	e025      	b.n	800bb40 <floor+0x98>
 800baf4:	4f2b      	ldr	r7, [pc, #172]	; (800bba4 <floor+0xfc>)
 800baf6:	4137      	asrs	r7, r6
 800baf8:	ea01 0307 	and.w	r3, r1, r7
 800bafc:	4303      	orrs	r3, r0
 800bafe:	d01f      	beq.n	800bb40 <floor+0x98>
 800bb00:	a325      	add	r3, pc, #148	; (adr r3, 800bb98 <floor+0xf0>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f7f4 fbc1 	bl	800028c <__adddf3>
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f7f5 f803 	bl	8000b18 <__aeabi_dcmpgt>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d0eb      	beq.n	800baee <floor+0x46>
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	bfbe      	ittt	lt
 800bb1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bb1e:	fa43 f606 	asrlt.w	r6, r3, r6
 800bb22:	19a4      	addlt	r4, r4, r6
 800bb24:	ea24 0407 	bic.w	r4, r4, r7
 800bb28:	2500      	movs	r5, #0
 800bb2a:	e7e0      	b.n	800baee <floor+0x46>
 800bb2c:	2e33      	cmp	r6, #51	; 0x33
 800bb2e:	dd0b      	ble.n	800bb48 <floor+0xa0>
 800bb30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bb34:	d104      	bne.n	800bb40 <floor+0x98>
 800bb36:	ee10 2a10 	vmov	r2, s0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	f7f4 fba6 	bl	800028c <__adddf3>
 800bb40:	ec41 0b10 	vmov	d0, r0, r1
 800bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb50:	fa23 f707 	lsr.w	r7, r3, r7
 800bb54:	4207      	tst	r7, r0
 800bb56:	d0f3      	beq.n	800bb40 <floor+0x98>
 800bb58:	a30f      	add	r3, pc, #60	; (adr r3, 800bb98 <floor+0xf0>)
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	f7f4 fb95 	bl	800028c <__adddf3>
 800bb62:	2200      	movs	r2, #0
 800bb64:	2300      	movs	r3, #0
 800bb66:	f7f4 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d0bf      	beq.n	800baee <floor+0x46>
 800bb6e:	2c00      	cmp	r4, #0
 800bb70:	da02      	bge.n	800bb78 <floor+0xd0>
 800bb72:	2e14      	cmp	r6, #20
 800bb74:	d103      	bne.n	800bb7e <floor+0xd6>
 800bb76:	3401      	adds	r4, #1
 800bb78:	ea25 0507 	bic.w	r5, r5, r7
 800bb7c:	e7b7      	b.n	800baee <floor+0x46>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bb84:	fa03 f606 	lsl.w	r6, r3, r6
 800bb88:	4435      	add	r5, r6
 800bb8a:	4545      	cmp	r5, r8
 800bb8c:	bf38      	it	cc
 800bb8e:	18e4      	addcc	r4, r4, r3
 800bb90:	e7f2      	b.n	800bb78 <floor+0xd0>
 800bb92:	2500      	movs	r5, #0
 800bb94:	462c      	mov	r4, r5
 800bb96:	e7aa      	b.n	800baee <floor+0x46>
 800bb98:	8800759c 	.word	0x8800759c
 800bb9c:	7e37e43c 	.word	0x7e37e43c
 800bba0:	bff00000 	.word	0xbff00000
 800bba4:	000fffff 	.word	0x000fffff

0800bba8 <scalbn>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	ec55 4b10 	vmov	r4, r5, d0
 800bbae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	b99a      	cbnz	r2, 800bbe0 <scalbn+0x38>
 800bbb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bbbc:	4323      	orrs	r3, r4
 800bbbe:	d036      	beq.n	800bc2e <scalbn+0x86>
 800bbc0:	4b39      	ldr	r3, [pc, #228]	; (800bca8 <scalbn+0x100>)
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	ee10 0a10 	vmov	r0, s0
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f7f4 fd15 	bl	80005f8 <__aeabi_dmul>
 800bbce:	4b37      	ldr	r3, [pc, #220]	; (800bcac <scalbn+0x104>)
 800bbd0:	429e      	cmp	r6, r3
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	460d      	mov	r5, r1
 800bbd6:	da10      	bge.n	800bbfa <scalbn+0x52>
 800bbd8:	a32b      	add	r3, pc, #172	; (adr r3, 800bc88 <scalbn+0xe0>)
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	e03a      	b.n	800bc56 <scalbn+0xae>
 800bbe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bbe4:	428a      	cmp	r2, r1
 800bbe6:	d10c      	bne.n	800bc02 <scalbn+0x5a>
 800bbe8:	ee10 2a10 	vmov	r2, s0
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fb4c 	bl	800028c <__adddf3>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	e019      	b.n	800bc2e <scalbn+0x86>
 800bbfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bbfe:	460b      	mov	r3, r1
 800bc00:	3a36      	subs	r2, #54	; 0x36
 800bc02:	4432      	add	r2, r6
 800bc04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bc08:	428a      	cmp	r2, r1
 800bc0a:	dd08      	ble.n	800bc1e <scalbn+0x76>
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	a120      	add	r1, pc, #128	; (adr r1, 800bc90 <scalbn+0xe8>)
 800bc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc14:	da1c      	bge.n	800bc50 <scalbn+0xa8>
 800bc16:	a120      	add	r1, pc, #128	; (adr r1, 800bc98 <scalbn+0xf0>)
 800bc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc1c:	e018      	b.n	800bc50 <scalbn+0xa8>
 800bc1e:	2a00      	cmp	r2, #0
 800bc20:	dd08      	ble.n	800bc34 <scalbn+0x8c>
 800bc22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc2e:	ec45 4b10 	vmov	d0, r4, r5
 800bc32:	bd70      	pop	{r4, r5, r6, pc}
 800bc34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bc38:	da19      	bge.n	800bc6e <scalbn+0xc6>
 800bc3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc3e:	429e      	cmp	r6, r3
 800bc40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bc44:	dd0a      	ble.n	800bc5c <scalbn+0xb4>
 800bc46:	a112      	add	r1, pc, #72	; (adr r1, 800bc90 <scalbn+0xe8>)
 800bc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1e2      	bne.n	800bc16 <scalbn+0x6e>
 800bc50:	a30f      	add	r3, pc, #60	; (adr r3, 800bc90 <scalbn+0xe8>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fccf 	bl	80005f8 <__aeabi_dmul>
 800bc5a:	e7cb      	b.n	800bbf4 <scalbn+0x4c>
 800bc5c:	a10a      	add	r1, pc, #40	; (adr r1, 800bc88 <scalbn+0xe0>)
 800bc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0b8      	beq.n	800bbd8 <scalbn+0x30>
 800bc66:	a10e      	add	r1, pc, #56	; (adr r1, 800bca0 <scalbn+0xf8>)
 800bc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc6c:	e7b4      	b.n	800bbd8 <scalbn+0x30>
 800bc6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc72:	3236      	adds	r2, #54	; 0x36
 800bc74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <scalbn+0x108>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	e7e8      	b.n	800bc56 <scalbn+0xae>
 800bc84:	f3af 8000 	nop.w
 800bc88:	c2f8f359 	.word	0xc2f8f359
 800bc8c:	01a56e1f 	.word	0x01a56e1f
 800bc90:	8800759c 	.word	0x8800759c
 800bc94:	7e37e43c 	.word	0x7e37e43c
 800bc98:	8800759c 	.word	0x8800759c
 800bc9c:	fe37e43c 	.word	0xfe37e43c
 800bca0:	c2f8f359 	.word	0xc2f8f359
 800bca4:	81a56e1f 	.word	0x81a56e1f
 800bca8:	43500000 	.word	0x43500000
 800bcac:	ffff3cb0 	.word	0xffff3cb0
 800bcb0:	3c900000 	.word	0x3c900000

0800bcb4 <_init>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_fini>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	bf00      	nop
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr
